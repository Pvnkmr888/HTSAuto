package com.honeywell.lyric.utils;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.TouchAction;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.FluentWait;

import com.google.common.base.Function;
import com.honeywell.chapi.ChapiUtil;
import com.honeywell.commons.coreframework.Keyword;
import com.honeywell.commons.coreframework.SuiteConstants;
import com.honeywell.commons.coreframework.SuiteConstants.SuiteConstantTypes;
import com.honeywell.commons.coreframework.TestCaseInputs;
import com.honeywell.commons.coreframework.TestCases;
import com.honeywell.commons.mobile.Mobile;
import com.honeywell.commons.mobile.MobileObject;
import com.honeywell.commons.mobile.MobileUtils;
import com.honeywell.commons.report.FailType;
import com.honeywell.stat.LocationInformation;
import com.honeywell.stat.ThermostatInformation;

public class JasperUtils {

	public static String TYPE_OF_SCHEDULE = "TypeOfSchedule";
	public static String TYPE_OF_TIME_SCHEDULE = "TypeOfTimeSchedule";
	public static String TYPE_OF_SCHEDULE_RETAINED = "TypeOfScheduleRetained";

	public static final String TIME_BASED_SCHEDULE = "Time";
	public static final String GEOFENCE_BASED_SCHEDULE = "Geofence";
	public static final String EVERYDAY_SCHEDULE = "EveryDay";
	public static final String WEEKDAY_AND_WEEKEND_SCHEDULE = "WeekdayAndWeekend";

	public static String EVERYDAY_WAKE_TIME = "everydayWakeUpTime";
	public static String EVERYDAY_AWAY_TIME = "everydayAwayTime";
	public static String EVERYDAY_HOME_TIME = "everydayhomeTime";
	public static String EVERYDAY_SLEEP_TIME = "everydaySleepTime";
	public static String EVERYDAY_WAKE_HEAT_SETPOINT = "everydayWakeHeatSetPoint";
	public static String EVERYDAY_WAKE_COOL_SETPOINT = "everydayWakeCoolSetPoint";
	public static String EVERYDAY_AWAY_HEAT_SETPOINT = "everydayAwayHeatSetPoint";
	public static String EVERYDAY_AWAY_COOL_SETPOINT = "everydayAwayCoolSetPoint";
	public static String EVERYDAY_HOME_HEAT_SETPOINT = "everydayHomeHeatSetPoint";
	public static String EVERYDAY_HOME_COOL_SETPOINT = "everydayHomeCoolSetPoint";
	public static String EVERYDAY_SLEEP_HEAT_SETPOINT = "everydaySleepHeatSetPoint";
	public static String EVERYDAY_SLEEP_COOL_SETPOINT = "everydaySleepCoolSetPoint";

	public static String WEEKDAY_WAKE_TIME = "weekdayWakeUpTime";
	public static String WEEKDAY_AWAY_TIME = "weekdayAwayTime";
	public static String WEEKDAY_HOME_TIME = "weekdayhomeTime";
	public static String WEEKDAY_SLEEP_TIME = "weekdaySleepTime";
	public static String WEEKDAY_WAKE_HEAT_SETPOINT = "weekdayWakeHeatSetPoint";
	public static String WEEKDAY_WAKE_COOL_SETPOINT = "weekdayWakeCoolSetPoint";
	public static String WEEKDAY_AWAY_HEAT_SETPOINT = "weekdayAwayHeatSetPoint";
	public static String WEEKDAY_AWAY_COOL_SETPOINT = "weekdayAwayCoolSetPoint";
	public static String WEEKDAY_HOME_HEAT_SETPOINT = "weekdayHomeHeatSetPoint";
	public static String WEEKDAY_HOME_COOL_SETPOINT = "weekdayHomeCoolSetPoint";
	public static String WEEKDAY_SLEEP_HEAT_SETPOINT = "weekdaySleepHeatSetPoint";
	public static String WEEKDAY_SLEEP_COOL_SETPOINT = "weekdaySleepCoolSetPoint";

	public static String WEEKEND_WAKE_TIME = "weekendWakeUpTime";
	public static String WEEKEND_AWAY_TIME = "weekendAwayTime";
	public static String WEEKEND_HOME_TIME = "weekendhomeTime";
	public static String WEEKEND_SLEEP_TIME = "weekendSleepTime";
	public static String WEEKEND_WAKE_HEAT_SETPOINT = "weekendWakeHeatSetPoint";
	public static String WEEKEND_WAKE_COOL_SETPOINT = "weekendWakeCoolSetPoint";
	public static String WEEKEND_AWAY_HEAT_SETPOINT = "weekendAwayHeatSetPoint";
	public static String WEEKEND_AWAY_COOL_SETPOINT = "weekendAwayCoolSetPoint";
	public static String WEEKEND_HOME_HEAT_SETPOINT = "weekendHomeHeatSetPoint";
	public static String WEEKEND_HOME_COOL_SETPOINT = "weekendHomeCoolSetPoint";
	public static String WEEKEND_SLEEP_HEAT_SETPOINT = "weekendSleepHeatSetPoint";
	public static String WEEKEND_SLEEP_COOL_SETPOINT = "weekendSleepCoolSetPoint";

	public static String GEOFENCE_AWAY_HEAT_SETPOINT = "geofenceAwayHeatSetPoint";
	public static String GEOFENCE_AWAY_COOL_SETPOINT = "geofenceAwayCoolSetPoint";
	public static String GEOFENCE_HOME_HEAT_SETPOINT = "geofenceHomeHeatSetPoint";
	public static String GEOFENCE_HOME_COOL_SETPOINT = "geofenceHomeCoolSetPoint";
	public static String GEOFENCE_SLEEP_HEAT_SETPOINT = "geofenceSleepHeatSetPoint";
	public static String GEOFENCE_SLEEP_COOL_SETPOINT = "geofenceSleepCoolSetPoint";

	public static String SET_GEOFENCE_SLEEP_TIMER = "setGeofenceSleepTimer";
	public static String GEOFENCE_SLEEP_START_TIME = "GeofenceSleepStartTime";
	public static String GEOFENCE_SLEEP_END_TIME = "GeofenceSleepEndTime";

	public static String EVERYDAY_1_TIME = "everyday1Time";
	public static String EVERYDAY_2_TIME = "everyday2Time";
	public static String EVERYDAY_3_TIME = "everyday3Time";
	public static String EVERYDAY_4_TIME = "everyday4Time";
	public static String EVERYDAY_5_TIME = "everyday5Time";
	public static String EVERYDAY_6_TIME = "everyday6Time";
	public static String EVERYDAY_1_HEAT_SETPOINT = "everyday1HeatSetPoint";
	public static String EVERYDAY_1_COOL_SETPOINT = "everyday1CoolSetPoint";
	public static String EVERYDAY_2_HEAT_SETPOINT = "everyday2HeatSetPoint";
	public static String EVERYDAY_2_COOL_SETPOINT = "everyday2CoolSetPoint";
	public static String EVERYDAY_3_HEAT_SETPOINT = "everyday3HeatSetPoint";
	public static String EVERYDAY_3_COOL_SETPOINT = "everyday3CoolSetPoint";
	public static String EVERYDAY_4_HEAT_SETPOINT = "everyday4HeatSetPoint";
	public static String EVERYDAY_4_COOL_SETPOINT = "everyday4CoolSetPoint";
	public static String EVERYDAY_5_HEAT_SETPOINT = "everyday5HeatSetPoint";
	public static String EVERYDAY_5_COOL_SETPOINT = "everyday5CoolSetPoint";
	public static String EVERYDAY_6_HEAT_SETPOINT = "everyday6HeatSetPoint";
	public static String EVERYDAY_6_COOL_SETPOINT = "everyday6CoolSetPoint";

	public static String WEEKDAY_1_TIME = "weekday1Time";
	public static String WEEKDAY_2_TIME = "weekday2Time";
	public static String WEEKDAY_3_TIME = "weekday3Time";
	public static String WEEKDAY_4_TIME = "weekday4Time";
	public static String WEEKDAY_5_TIME = "weekday5Time";
	public static String WEEKDAY_6_TIME = "weekday6Time";
	public static String WEEKDAY_1_HEAT_SETPOINT = "weekday1HeatSetPoint";
	public static String WEEKDAY_1_COOL_SETPOINT = "weekday1CoolSetPoint";
	public static String WEEKDAY_2_HEAT_SETPOINT = "weekday2HeatSetPoint";
	public static String WEEKDAY_2_COOL_SETPOINT = "weekday2CoolSetPoint";
	public static String WEEKDAY_3_HEAT_SETPOINT = "weekday3HeatSetPoint";
	public static String WEEKDAY_3_COOL_SETPOINT = "weekday3CoolSetPoint";
	public static String WEEKDAY_4_HEAT_SETPOINT = "weekday41HeatSetPoint";
	public static String WEEKDAY_4_COOL_SETPOINT = "weekday4CoolSetPoint";
	public static String WEEKDAY_5_HEAT_SETPOINT = "weekday5HeatSetPoint";
	public static String WEEKDAY_5_COOL_SETPOINT = "weekday5CoolSetPoint";
	public static String WEEKDAY_6_HEAT_SETPOINT = "weekday6HeatSetPoint";
	public static String WEEKDAY_6_COOL_SETPOINT = "weekday6CoolSetPoint";

	public static String WEEKEND_1_TIME = "weekend1Time";
	public static String WEEKEND_2_TIME = "weekend2Time";
	public static String WEEKEND_3_TIME = "weekend3Time";
	public static String WEEKEND_4_TIME = "weekend4Time";
	public static String WEEKEND_5_TIME = "weekend5Time";
	public static String WEEKEND_6_TIME = "weekend6Time";
	public static String WEEKEND_1_HEAT_SETPOINT = "weekend1HeatSetPoint";
	public static String WEEKEND_1_COOL_SETPOINT = "weekend1CoolSetPoint";
	public static String WEEKEND_2_HEAT_SETPOINT = "weekend2HeatSetPoint";
	public static String WEEKEND_2_COOL_SETPOINT = "weekend2CoolSetPoint";
	public static String WEEKEND_3_HEAT_SETPOINT = "weekend3HeatSetPoint";
	public static String WEEKEND_3_COOL_SETPOINT = "weekend3CoolSetPoint";
	public static String WEEKEND_4_HEAT_SETPOINT = "weekend4HeatSetPoint";
	public static String WEEKEND_4_COOL_SETPOINT = "weekend4CoolSetPoint";
	public static String WEEKEND_5_HEAT_SETPOINT = "weekend5HeatSetPoint";
	public static String WEEKEND_5_COOL_SETPOINT = "weekend5CoolSetPoint";
	public static String WEEKEND_6_HEAT_SETPOINT = "weekend6HeatSetPoint";
	public static String WEEKEND_6_COOL_SETPOINT = "weekend6CoolSetPoint";

	public static String PERIOD_NUMBER_EMEA = "periodNumberEMEA";
	public static String PERIOD_NAME_NA = "periodNameNA";
	public static String EVERYDAY_WAKE = "everydayWake";
	public static String EVERYDAY_AWAY = "everydayAway";
	public static String EVERYDAY_HOME = "everydayHome";
	public static String EVERYDAY_SLEEP = "everydaySleep";
	public static String EVERYDAY_1 = "everyday1";
	public static String EVERYDAY_2 = "everyday2";
	public static String EVERYDAY_3 = "everyday3";
	public static String EVERYDAY_4 = "everyday4";
	public static String EVERYDAY_5 = "everyday5";
	public static String EVERYDAY_6 = "everyday6";
	public static String WEEKDAY_WAKE = "weekdayWake";
	public static String WEEKDAY_AWAY = "weekdayAway";
	public static String WEEKDAY_HOME = "weekdayHome";
	public static String WEEKDAY_SLEEP = "weekdaySleep";
	public static String WEEKEND_WAKE = "weekendWake";
	public static String WEEKEND_AWAY = "weekendAway";
	public static String WEEKEND_HOME = "weekendHome";
	public static String WEEKEND_SLEEP = "weekendSleep";

	public static String GEOFENCE_PERIOD = "geofencePeriod";
	public static String GEOFENCE_HOME = "geofenceHome";
	public static String GEOFENCE_AWAY = "geofenceAway";
	public static String GEOFENCE_SLEEP = "geofenceSleep";

	public static String ABOVE_MAXIMUM = "aboveMaximum";
	public static String AT_MAXIMUM = "atMaximum";
	public static String AT_MINIMUM = "atMinimum";
	public static String BELOW_MINIMUM = "belowMinimum";
	public static String IN_RANGE = "inRange";
	public static String SETPOINT_RANGE = "setPointRange";

	public static String ALL_STAT_GEOFENCE_COPYING = "geofenceCopyAll";
	public static String SKIP_GEOFENCE_COPYING = "geofenceSkip";
	public static String SPECIFIC_STAT_GEOFENCE_COPYING = "geofenceSkipCopy";
	public static String STAT_TO_COPY_SCHEDULE = "statToCopySchedule";
	public static String JASPER_STAT_TYPE = "jasperStatType";

	public static String ALL_STAT_COPYING = "allStatCopying";
	public static String SKIP_COPYING = "skipCopying";
	public static String SPECIFIC_STAT_COPYING = "specificStatCopying";

	public static String PERIOD_NUMBER_TO_DELETE = "periodNumberEMEAToDelete";
	public static String DELETE_PERIOD = "deletePeriod";
	public static String DELETE_MULTIPLE_PERIODS = "deleteMultiplePeriods";
	public static String NUMBER_OF_PERIODS_TO_DELETE = "numberOfPeriodsToDelete";
	public static String ADD_PERIOD = "addPeriod";

	public static String ADD_PERIOD_START_TIME = "ADD_PERIOD_START_TIME";
	public static String ADD_PERIOD_END_TIME = "ADD_PERIOD_END_TIME";
	public static String ADD_PERIOD_HEAT_SETPOINT = "ADD_PERIOD_HEAT_SETPOINT";
	public static String ADD_PERIOD_COOL_SETPOINT = "ADD_PERIOD_COOL_SETPOINT";

	public static String JASPER_NA = "jasperNA";
	public static String JASPER_EMEA = "jasperEMEA";

	public static String UNITS = "units";

	public static String VACATION_HEAT_SETPOINTS = "vacationHeatSetPoints";
	public static String VACATION_COOL_SETPOINTS = "vacationCoolSetPoints";

	public static String OVERRIDE_COOL_SETPOINTS = "overrideCoolSetPoints";
	public static String OVERRIDE_HEAT_SETPOINTS = "overrideHeatSetPoints";

	public static String HOLD_UNTIL_TIME = "holdUntilTime";
	public static String HOLD_UNTIL_TIME_DATE = "holdUntilTimeAndDate";

	public static String DEVICE1_HEAT_SETPOINTS = "device1HeatSetpoints";
	public static String DEVICE1_COOL_SETPOINTS = "device1CoolSetpoints";

	public static String DEVICE2_HEAT_SETPOINTS = "device2HeatSetpoints";
	public static String DEVICE2_COOL_SETPOINTS = "device2CoolSetpoints";

	public static String LOCATION_NAME = "locationName";
	public static String DEVICE_NAME = "deviceName";

	public static final int d = 176;
	public static final char degree = (char) d;

	public static String REPLACE_FILTER_EVERY_VALUE = "replaceFilterEveryValue";

	public static String INDOORTEMP_ALERT_STATUS = "indoorTempAlertStatus";
	public static String INDOORTEMP_PUSH_NOTIFICATION_STATUS = "indoorTempPushNotificationStatus";
	public static String IS_INDOORTEMP_LOWER_THAN_ORIGINAL = "isIndoorTempLowerThanOriginal";
	public static String INDOORTEMP_BELOW_VALUE = "indoorTempBelowValue";
	public static String INDOORTEMP_ABOVE_VALUE = "indoorTempAboveValue";

	public static String INDOORHUMIDITY_ALERT_STATUS = "indoorHumiditypAlertStatus";
	public static String INDOORHUMIDITY_PUSH_NOTIFICATION_STATUS = "indoorHumidityPushNotificationStatus";
	public static String IS_INDOORHUMIDITY_LOWER_THAN_ORIGINAL = "isIndoorHumidityLowerThanOriginal";
	public static String INDOORHUMIDITY_BELOW_VALUE = "indoorHumidityBelowValue";
	public static String INDOORHUMIDITY_ABOVE_VALUE = "indoorHumidityAboveValue";

	public static String EXPECTING_FILTERREMINDER_PUSH_NOTIFICATION = "expectingFilterReminderPushNotification";

	public static String SHOW_VIEW_TYPE = "showViewType";
	public static String INDIVIDUAL_TYPE = "Individual Days";
	public static String GROUP_TYPE = "Group Days";

	public static String SCHEDULE_DAY_EDITED = "scheduleDayEdited";
	public static String SCHEDULE_PERIOD_EDITED = "schedulePeriodEdited";

	public static String EMEA_TIME_SCHEDULE_NUMBER_OF_PERIODS_IN_A_DAY = "emeaTimeScheduleNumberOfPeriodsInADay";

	public static String VERIFY_SET_PERIOD_TIME = "verifySetPeriodTime";

	// Geofence
	public static final Double Latitude = 25.2764380;
	public static final Double Longitude = 90.7439670;
	public static final Double Altitude = 100.00;

	/**
	 * <p>
	 * The addDaysToDate method adds days a date.
	 * </p>
	 * 
	 * @param TestCases
	 * @param String
	 *            - This is a date in the format 'yyyy-MM-dd'T'HH:mm:ss' to
	 *            which days have to be added.
	 * @param Integer
	 *            - This is the number of days to be added to the data passed in
	 *            the above parameter.
	 * @return String in the format 'yyyy-MM-dd'T'HH:mm:ss'
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static String addDaysToDate(TestCases testCase, String date,
			int noOfDays) {
		String dateAfterAddition = "";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(date));
			c.add(Calendar.DATE, noOfDays);
			dateAfterAddition = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			dateAfterAddition = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error Occured : " + e.getMessage());
		}
		return dateAfterAddition;
	}

	public static String addHoursAndMinutesToTime(TestCases testCase,
			String time, boolean incrementTime, int diffHour, int diffMin) {
		Date returnTime = null;
		String changedTime = "";
		boolean flag = false;

		try {
			SimpleDateFormat df12 = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat df24 = new SimpleDateFormat("hh:mm");
			SimpleDateFormat dfHour = new SimpleDateFormat("h a");
			String dateString = time.replaceAll("\\.", "");
			if (dateString.contains("m") || dateString.contains("M")
					&& dateString.contains(":")) {
				returnTime = df12.parse(dateString);
			} else if (dateString.contains("m") || dateString.contains("M")
					&& !dateString.contains(":")) {
				returnTime = dfHour.parse(dateString);
				flag = true;
			} else {
				returnTime = df24.parse(dateString);
			}
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(returnTime);
			if (incrementTime) {
				calendar.add(Calendar.HOUR, diffHour);
				calendar.add(Calendar.MINUTE, diffMin);
			} else {
				calendar.add(Calendar.HOUR, -diffHour);
				calendar.add(Calendar.MINUTE, -diffMin);
			}
			returnTime = calendar.getTime();
			if (dateString.contains("m") || dateString.contains("M")
					&& dateString.contains(":")) {
				changedTime = df12.format(returnTime);
			} else if (flag) {
				changedTime = dfHour.format(returnTime);
			} else {
				changedTime = df24.format(returnTime);
			}
		} catch (NumberFormatException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"[NumberFormatException] " + e.getMessage());
		} catch (ParseException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"[ParseException] " + e.getMessage());
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"[Exception] " + e.getMessage());
		}
		return changedTime;
	}

	/**
	 * <p>
	 * The addMinutesToDate method adds minutes a date.
	 * </p>
	 * 
	 * @param TestCases
	 * @param String
	 *            - This is a date in the format 'yyyy-MM-dd'T'HH:mm:ss' to
	 *            which minutes have to be added.
	 * @param Integer
	 *            - This is the number of minutes to be added to the data passed
	 *            in the above parameter.
	 * @return String in the format 'yyyy-MM-dd'T'HH:mm:ss'
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static String addMinutesToDate(TestCases testCase, String date,
			int noOfMins) {
		String dateAfterAddition = "";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(date));
			c.add(Calendar.MINUTE, noOfMins);
			dateAfterAddition = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			dateAfterAddition = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error Occured : " + e.getMessage());
		}
		return dateAfterAddition;
	}

	public static boolean addPeriodEMEADefaultCase(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
		String tempPeriod = " ", tempPeriodStartTime = " ", tempPeriodEndTime = "";
		WebElement element = null;
		List<WebElement> schedule_period_time = null, schedule_period_setpoint = null;
		List<WebElement> weekdaySchedule_period_time = null;
		List<WebElement> weekendSchedule_period_time = null;
		int initialPeriodSize = 0, finalPeriodSize = 0;

		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		if (MobileUtils.isMobElementExists(fieldObjects, testCase, "AddImage",
				5)) {
			element = MobileUtils.getMobElement(fieldObjects, testCase,
					"AddImage");
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting time and set points for new period ***************");
			Random rn = new Random();
			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				tempPeriod = String.valueOf(rn.nextInt(4 - 1 + 1) + 1);
				schedule_period_time = MobileUtils.getMobElements(fieldObjects,
						testCase, "EverydayTime");
				initialPeriodSize = schedule_period_time.size();
			} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				tempPeriod = String.valueOf(rn.nextInt(8 - 1 + 1));
				System.out.println(tempPeriod);
				if (Integer.parseInt(tempPeriod) <= 4) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						Dimension dimensions = testCase.getMobileDriver()
								.manage().window().getSize();
						int startx = (dimensions.width * 20) / 100;
						int starty = (dimensions.height * 62) / 100;
						int endx = (dimensions.width * 22) / 100;
						int endy = (dimensions.height * 35) / 100;
						testCase.getMobileDriver().swipe(endx, endy, startx,
								starty, 1000);

					} else {
						testCase.getMobileDriver()
								.scrollTo("Monday - Friday_1");
					}
					weekdaySchedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "WeekdayTimeList");
					element = MobileUtils.getMobElements(fieldObjects,
							testCase, "AddImage").get(0);
				} else {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						Dimension dimensions = testCase.getMobileDriver()
								.manage().window().getSize();
						int startx = (dimensions.width * 20) / 100;
						int starty = (dimensions.height * 62) / 100;
						int endx = (dimensions.width * 22) / 100;
						int endy = (dimensions.height * 35) / 100;
						testCase.getMobileDriver().swipe(startx, starty, endx,
								endy, 1000);

					} else {
						testCase.getMobileDriver().scrollTo(
								"Saturday - Sunday_4");
					}
					weekendSchedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "WeekendTimeList");
					element = MobileUtils.getMobElements(fieldObjects,
							testCase, "AddImage").get(1);
				}
			}

			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					tempPeriodStartTime = schedule_period_time.get(
							Integer.parseInt(tempPeriod) - 1).getText();
					tempPeriodEndTime = schedule_period_time.get(
							Integer.parseInt(tempPeriod)).getText();
				} else {
					if (Integer.parseInt(tempPeriod) <= 4) {
						tempPeriodStartTime = weekdaySchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 1).getText();
						tempPeriodEndTime = weekdaySchedule_period_time.get(
								Integer.parseInt(tempPeriod)).getText();
					} else {
						tempPeriodStartTime = weekendSchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 4 - 1).getText();
						tempPeriodEndTime = weekendSchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 4).getText();

					}
				}
			} else {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					tempPeriodStartTime = schedule_period_time.get(
							Integer.parseInt(tempPeriod) - 1).getAttribute(
							"value");
					tempPeriodEndTime = schedule_period_time.get(
							Integer.parseInt(tempPeriod)).getAttribute("value");
				} else {
					if (Integer.parseInt(tempPeriod) <= 4) {
						tempPeriodStartTime = weekdaySchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 1).getAttribute(
								"value");
						tempPeriodEndTime = weekdaySchedule_period_time.get(
								Integer.parseInt(tempPeriod)).getAttribute(
								"value");
					} else {
						tempPeriodStartTime = weekendSchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 4 - 1)
								.getAttribute("value");
						tempPeriodEndTime = weekendSchedule_period_time.get(
								Integer.parseInt(tempPeriod) - 4).getAttribute(
								"value");

					}
				}
			}
			try {
				if (!tempPeriodStartTime.contains("m")
						&& !tempPeriodStartTime.contains("M")) {
					final SimpleDateFormat sdf = new SimpleDateFormat("H:mm");
					final Date dateObj1 = sdf.parse(tempPeriodStartTime
							.split("\\s+")[0]);
					tempPeriodStartTime = new SimpleDateFormat("hh:mm aa")
							.format(dateObj1);
				}
				if (!tempPeriodEndTime.contains("m")
						&& !tempPeriodEndTime.contains("M")) {
					final SimpleDateFormat sdf = new SimpleDateFormat("H:mm");
					final Date dateObj1 = sdf.parse(tempPeriodEndTime
							.split("\\s+")[0]);
					tempPeriodEndTime = new SimpleDateFormat("hh:mm aa")
							.format(dateObj1);
				}
			} catch (NumberFormatException e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"[NumberFormatException] Error message: "
								+ e.getMessage());
			} catch (ParseException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[ParseException] Error message: " + e.getMessage());
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[Exception] Error message: " + e.getMessage());
			}

			tempPeriodStartTime = JasperUtils.addHoursAndMinutesToTime(
					testCase, tempPeriodStartTime, true, 0, 30);
			tempPeriodEndTime = JasperUtils.addHoursAndMinutesToTime(testCase,
					tempPeriodEndTime, false, 0, 30);
			inputs.setInputValue(ADD_PERIOD_START_TIME, tempPeriodStartTime);
			inputs.setInputValue(ADD_PERIOD_END_TIME, tempPeriodEndTime);

			periodTimeandSetPoint.put("periodName", "AddImage");
			periodTimeandSetPoint.put("StartTime",
					inputs.getInputValue(ADD_PERIOD_START_TIME));
			periodTimeandSetPoint.put("EndTime",
					inputs.getInputValue(ADD_PERIOD_END_TIME));
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				periodTimeandSetPoint.put("HeatSetPoint",
						inputs.getInputValue(ADD_PERIOD_HEAT_SETPOINT));
				periodTimeandSetPoint.put("CoolSetPoint",
						inputs.getInputValue(ADD_PERIOD_COOL_SETPOINT));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				periodTimeandSetPoint.put("HeatSetPoint",
						inputs.getInputValue(ADD_PERIOD_HEAT_SETPOINT));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				periodTimeandSetPoint.put("CoolSetPoint",
						inputs.getInputValue(ADD_PERIOD_COOL_SETPOINT));
			}

			flag = flag
					& JasperUtils.setTimeSchedulePeriodTimeAndSetPoints(
							testCase, inputs, periodTimeandSetPoint, element);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SaveButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed setting time and set points for new period ***************");

			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				schedule_period_time = MobileUtils.getMobElements(fieldObjects,
						testCase, "EverydayTime");
				finalPeriodSize = schedule_period_time.size();
			} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {

				if (Integer.parseInt(tempPeriod) <= 4) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						Dimension dimensions = testCase.getMobileDriver()
								.manage().window().getSize();
						int startx = (dimensions.width * 20) / 100;
						int starty = (dimensions.height * 62) / 100;
						int endx = (dimensions.width * 22) / 100;
						int endy = (dimensions.height * 35) / 100;
						testCase.getMobileDriver().swipe(endx, endy, startx,
								starty, 1000);

					} else {

					}
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "WeekdayTimeList");
					finalPeriodSize = schedule_period_time.size();
				} else {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						Dimension dimensions = testCase.getMobileDriver()
								.manage().window().getSize();
						int startx = (dimensions.width * 20) / 100;
						int starty = (dimensions.height * 62) / 100;
						int endx = (dimensions.width * 22) / 100;
						int endy = (dimensions.height * 35) / 100;
						testCase.getMobileDriver().swipe(startx, starty, endx,
								endy, 1000);

					} else {

					}
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "WeekendTimeList");
					finalPeriodSize = schedule_period_time.size();
				}

			}

			String tempTime = "";
			if (initialPeriodSize != finalPeriodSize) {
				Keyword.ReportStep_Pass(testCase,
						"A new period is added successfully: Initial period count-"
								+ initialPeriodSize + " Final period count-"
								+ finalPeriodSize);
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "EverydayTime");
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						schedule_period_setpoint = MobileUtils.getMobElements(
								fieldObjects, testCase,
								"SchedulePeriodHeatSetPoint");

						for (int i = 1; i <= schedule_period_time.size(); i++) {
							try {
								if (!schedule_period_time.get(i - 1).getText()
										.contains("m")
										&& !schedule_period_time.get(i - 1)
												.getText().contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf
											.parse(schedule_period_time
													.get(i - 1).getText()
													.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 1) {
								inputs.setInputValue(EVERYDAY_1_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_1_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							} else if (i == 2) {
								inputs.setInputValue(EVERYDAY_2_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_2_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							} else if (i == 3) {
								inputs.setInputValue(EVERYDAY_3_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_3_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							} else if (i == 4) {
								inputs.setInputValue(EVERYDAY_4_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_4_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							} else if (i == 5) {
								inputs.setInputValue(EVERYDAY_5_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_5_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							} else if (i == 6) {
								inputs.setInputValue(EVERYDAY_6_TIME, tempTime);
								inputs.setInputValue(EVERYDAY_6_HEAT_SETPOINT,
										schedule_period_setpoint.get(i - 1)
												.getText());
							}
						}
					} else {
						for (int i = 1; i <= schedule_period_time.size(); i++) {
							try {
								if (!schedule_period_time.get(i - 1)
										.getAttribute("value").contains("m")
										&& !schedule_period_time.get(i - 1)
												.getAttribute("value")
												.contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf
											.parse(schedule_period_time
													.get(i - 1)
													.getAttribute("value")
													.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 1) {
								inputs.setInputValue(EVERYDAY_1_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_1_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							} else if (i == 2) {
								inputs.setInputValue(EVERYDAY_2_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_2_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							} else if (i == 3) {
								inputs.setInputValue(EVERYDAY_3_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_3_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							} else if (i == 4) {
								inputs.setInputValue(EVERYDAY_4_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_4_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							} else if (i == 5) {
								inputs.setInputValue(EVERYDAY_5_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_5_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							} else if (i == 6) {
								inputs.setInputValue(EVERYDAY_6_TIME, tempTime);
								inputs.setInputValue(
										EVERYDAY_6_HEAT_SETPOINT,
										MobileUtils.getMobElement(
												testCase,
												"name",
												"Everyday_" + i
														+ "_HeatTemperature")
												.getAttribute("value"));
							}
						}
					}
				} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {

					//
					if (Integer.parseInt(tempPeriod) <= 4) {
						schedule_period_time = MobileUtils.getMobElements(
								fieldObjects, testCase, "WeekdayTimeList");
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							schedule_period_setpoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"WeekdayHeatSetpointListEMEA");
							for (int i = 1; i <= schedule_period_time.size(); i++) {
								try {
									if (!schedule_period_time.get(i - 1)
											.getText().contains("m")
											&& !schedule_period_time.get(i - 1)
													.getText().contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(schedule_period_time
														.get(i - 1).getText()
														.split("\\s+")[0]);
										tempTime = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (i == 1) {
									inputs.setInputValue(WEEKDAY_1_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_1_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 2) {
									inputs.setInputValue(WEEKDAY_2_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_2_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 3) {
									inputs.setInputValue(WEEKDAY_3_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_3_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 4) {
									inputs.setInputValue(WEEKDAY_4_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_4_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 5) {
									inputs.setInputValue(WEEKDAY_5_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_5_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 6) {
									inputs.setInputValue(WEEKDAY_6_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_6_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								}
							}
						} else {
							for (int i = 1; i <= schedule_period_time.size(); i++) {
								try {
									if (!schedule_period_time.get(i - 1)
											.getAttribute("value")
											.contains("m")
											&& !schedule_period_time.get(i - 1)
													.getAttribute("value")
													.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(schedule_period_time
														.get(i - 1)
														.getAttribute("value")
														.split("\\s+")[0]);
										tempTime = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (i == 1) {
									inputs.setInputValue(WEEKDAY_1_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_1_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 2) {
									inputs.setInputValue(WEEKDAY_2_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_2_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 3) {
									inputs.setInputValue(WEEKDAY_3_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_3_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 4) {
									inputs.setInputValue(WEEKDAY_4_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_4_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 5) {
									inputs.setInputValue(WEEKDAY_5_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_5_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 6) {
									inputs.setInputValue(WEEKDAY_6_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKDAY_6_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekday_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								}
							}
						}
					} else {
						schedule_period_time = MobileUtils.getMobElements(
								fieldObjects, testCase, "WeekendTimeList");
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							schedule_period_setpoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"WeekendHeatSetpointListEMEA");
							for (int i = 1; i <= schedule_period_time.size(); i++) {
								try {
									if (!schedule_period_time.get(i - 1)
											.getText().contains("m")
											&& !schedule_period_time.get(i - 1)
													.getText().contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(schedule_period_time
														.get(i - 1).getText()
														.split("\\s+")[0]);
										tempTime = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (i == 1) {
									inputs.setInputValue(WEEKEND_1_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_1_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 2) {
									inputs.setInputValue(WEEKEND_2_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_2_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 3) {
									inputs.setInputValue(WEEKEND_3_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_3_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 4) {
									inputs.setInputValue(WEEKEND_4_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_4_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 5) {
									inputs.setInputValue(WEEKEND_5_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_5_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								} else if (i == 6) {
									inputs.setInputValue(WEEKEND_6_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_6_HEAT_SETPOINT,
											schedule_period_setpoint.get(i - 1)
													.getText());
								}
							}
						} else {
							for (int i = 1; i <= schedule_period_time.size(); i++) {
								try {
									if (!schedule_period_time.get(i - 1)
											.getAttribute("value")
											.contains("m")
											&& !schedule_period_time.get(i - 1)
													.getAttribute("value")
													.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(schedule_period_time
														.get(i - 1)
														.getAttribute("value")
														.split("\\s+")[0]);
										tempTime = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (i == 1) {
									inputs.setInputValue(WEEKEND_1_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_1_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 2) {
									inputs.setInputValue(WEEKEND_2_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_2_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 3) {
									inputs.setInputValue(WEEKEND_3_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_3_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 4) {
									inputs.setInputValue(WEEKEND_4_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_4_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 5) {
									inputs.setInputValue(WEEKEND_5_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_5_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								} else if (i == 6) {
									inputs.setInputValue(WEEKEND_6_TIME,
											tempTime);
									inputs.setInputValue(
											WEEKEND_6_HEAT_SETPOINT,
											MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Weekend_"
																	+ i
																	+ "_HeatTemperature")
													.getAttribute("value"));
								}
							}
						}

					}
					//

				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to add a new period: Initial period count-"
								+ initialPeriodSize + " Final period count-"
								+ finalPeriodSize);
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"[AddImage] Add image/+ icon is not shown");
		}

		return flag;
	}

	// This method will click on the system mode button and change the system
	// mode to
	// the value passed in the parameter by clicking on the mode in primary card
	/**
	 * <p>
	 * The changeSystemMode method changes system mode on the primary card by
	 * tapping on the system mode icon and selecting the system mode from the
	 * list of modes displayed.
	 * </p>
	 * 
	 * @param TestCases
	 * @param TestCaseInputs
	 * @param String
	 *            - This is the expected mode to which system mode has to be
	 *            changed to.
	 * @return Boolean indicating success or failure.
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static boolean changeSystemMode(TestCases testCase,
			TestCaseInputs inputs, String expectedMode) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		try {
			ThermostatInformation statInfo = new ThermostatInformation(
					testCase, inputs);
			if (!statInfo.isStatOnline()) {
				Keyword.ReportStep_Pass(testCase,
						"Create Schedule : Cannot change system mode because thermostat is offline");
				return true;
			}

			if (expectedMode.equals("Heat")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SystemModeButton");
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"HeatModeOption");
			}

			else if (expectedMode.equals("Cool")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SystemModeButton");
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CoolModeOption");
			}

			else if (expectedMode.equals("Off")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SystemModeButton");
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"OffModeOption");
			} else if (expectedMode.equals("Auto")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SystemModeButton");
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"AutoModeOption");
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Change System Mode : Error Occured : " + e.getMessage());

		}
		return flag;
	}

	// This method will convert String value passed in parameters to Celsius to
	// one decimal point

	/**
	 * <p>
	 * The checkIfVacationSettingsAreEnabled method checks whether the vacation
	 * settings i.e. From Date & To Date is enabled/disabled.
	 * </p>
	 * 
	 * @param TestCases
	 * @param Boolean
	 *            - If boolean value is true, the method will check if the
	 *            elements are enabled and else if the boolean value is false
	 *            the method will check if the elements are disabled.
	 * @return Boolean indicating success or failure.
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static boolean checkIfVacationSettingAreEnabled(TestCases testCase,
			boolean isEnabled) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (isEnabled) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getText().equalsIgnoreCase("ON")) {
					Keyword.ReportStep_Pass(testCase,
							"Check If Vacation Settings are Enabled : Vacation switch is in ON state");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Check If Vacation Settings are Enabled : Vacation switch is not in ON state");
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getAttribute("value").equalsIgnoreCase("1")) {
					Keyword.ReportStep_Pass(testCase,
							"Check If Vacation Settings are Enabled : Vacation switch is in ON state");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Check If Vacation Settings are Enabled : Vacation switch is not in ON state");
				}
			}
			try {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					List<WebElement> fromAndToDate = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"FromAndToDates");
					WebElement fromDate = fromAndToDate.get(0);
					WebElement toDate = fromAndToDate.get(1);
					if (fromDate.getAttribute("enabled").equals("true")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Check If Vacation Settings are Enabled : From date is enabled on vacation settings");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Check If Vacation Settings are Enabled : From date is not enabled on vacation settings");
					}
					if (toDate.getAttribute("enabled").equals("true")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Check If Vacation Settings are Enabled : To date is enabled on vacation settings");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Check If Vacation Settings are Enabled : To date is not enabled on vacation settings");
					}
				} else {
					try {
						flag = flag
								& MobileUtils.clickOnElement(testCase, "name",
										"From");
						if (MobileUtils.isMobElementExists("xpath",
								"//UIAPickerWheel", testCase, 3)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Check If Vacation Settings are Enabled : From date is enabled on vacation settings");
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "From");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Check If Vacation Settings are Enabled : From date is not enabled on vacation settings");
						}
						flag = flag
								& MobileUtils.clickOnElement(testCase, "name",
										"To");
						if (MobileUtils.isMobElementExists("xpath",
								"//UIAPickerWheel", testCase, 3)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Check If Vacation Settings are Enabled : To date is enabled on vacation settings");
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "To");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Check If Vacation Settings are Enabled : To date is not enabled on vacation settings");
						}
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Check If Vacation Settings are Enabled : Error Occured :"
										+ e.getMessage());
					}
				}
			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Check If Vacation Settings are Enabled : Could not find from and to date on vacation settings");
			}
		} else if (!isEnabled) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getText().equalsIgnoreCase("OFF")) {
					Keyword.ReportStep_Pass(testCase,
							"Check If Vacation Settings are Enabled : Vacation switch is in OFF state");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Check If Vacation Settings are Enabled : Vacation switch is not in OFF state");
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getAttribute("value").equalsIgnoreCase("0")) {
					Keyword.ReportStep_Pass(testCase,
							"Check If Vacation Settings are Enabled : Vacation switch is in OFF state");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Check If Vacation Settings are Enabled : Vacation switch is not in OFF state");
				}
			}

			try {
				List<WebElement> fromAndToDate = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				WebElement fromDate = fromAndToDate.get(0);
				WebElement toDate = fromAndToDate.get(1);
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (fromDate.getAttribute("enabled").equals("false")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Check If Vacation Settings are Enabled : From date is disabled on vacation settings");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Check If Vacation Settings are Enabled : From date is not disabled on vacation settings");
					}
					if (toDate.getAttribute("enabled").equals("false")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Check If Vacation Settings are Enabled : To date is disabled on vacation settings");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Check If Vacation Settings are Enabled : To date is not disabled on vacation settings");
					}
				} else {
					try {
						flag = flag
								& MobileUtils.clickOnElement(testCase, "name",
										"From");
						if (MobileUtils.isMobElementExists("xpath",
								"//UIAPickerWheel", testCase, 3)) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Check If Vacation Settings are Enabled : From date is not disabled on vacation settings");
						} else {
							Keyword.ReportStep_Pass(
									testCase,
									"Check If Vacation Settings are Enabled : From date is disabled on vacation settings");
						}
						flag = flag
								& MobileUtils.clickOnElement(testCase, "name",
										"To");
						if (MobileUtils.isMobElementExists("xpath",
								"//UIAPickerWheel", testCase, 3)) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Check If Vacation Settings are Enabled : To date is not disabled on vacation settings");
						} else {
							Keyword.ReportStep_Pass(
									testCase,
									"Check If Vacation Settings are Enabled : To date is disabled on vacation settings");
						}
					} catch (Exception e) {
						System.out.println(e.getMessage());
					}
				}
			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Check If Vacation Settings are Enabled : Could not find from and to date on vacation settings");
			}
		}
		return flag;
	}

	/**
	 * <p>
	 * The convertFromCelsiusToFahrenhiet method converts a temperature value
	 * from Celsius to Fahrenheit.
	 * </p>
	 * 
	 * @param TestCases
	 * @param String
	 *            - This is the Celsius temperature that has to be converted to
	 *            Fahrenheit.
	 * @return String - This is temperature value in Fahrenheit.
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static String convertFromCelsiusToFahrenhiet(TestCases testCase,
			String celsiusTemp) {
		try {
			Double temp = Double.parseDouble(celsiusTemp);
			temp = (9.0 / 5.0) * temp + 32;
			return String.valueOf(temp.intValue());
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : e.getMessage");
			return " ";
		}
	}

	/**
	 * <p>
	 * The convertFromFahrenhietToCelsius method converts a temperature value
	 * from Fahrenheit to Celsius.
	 * </p>
	 * 
	 * @param TestCases
	 * @param String
	 *            - This is the Fahrenheit temperature that has to be converted
	 *            to Celsius.
	 * @return String - This is temperature value in Celsius.
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static String convertFromFahrenhietToCelsius(TestCases testCase,
			String fahrenhietTemp) {
		try {
			Double temp = Double.parseDouble(fahrenhietTemp);
			temp = ((temp - 32) * 5) / 9;
			temp = Math.round(temp * 10.0) / 10.0;
			return temp.toString();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : e.getMessage");
			return " ";
		}
	}

	/**
	 * <p>
	 * The convertTimeToUTCTime method converts time to UTC time.
	 * </p>
	 * 
	 * @param TestCases
	 * @param String
	 *            - This is the time value in the format 'yyyy-MM-dd'T'HH:mm:ss'
	 *            that has to be converted to UTC time.
	 * @return String - This is the time value converted to UTC time.
	 * 
	 * @author h119237 - Pratik Lalseta.
	 */
	public static String convertTimetoUTCTime(TestCases testCase, String time) {
		String convertedTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Date date = vacationDateFormat.parse(time);
			vacationDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
			convertedTime = vacationDateFormat.format(date);
		} catch (Exception e) {
			convertedTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Convert Time to UTC Time : Error Occured : "
							+ e.getMessage());
		}
		return convertedTime;
	}

	public static boolean createGeofenceBasedSchedule(TestCases testCase,
			TestCaseInputs inputs, boolean createScheduleUsingUseGeofenceButton) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"LocationOption", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"LocationOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (createScheduleUsingUseGeofenceButton) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='USE GEOFENCING']");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='LEARN MORE']");
			}
		} else {
			if (createScheduleUsingUseGeofenceButton) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"USE GEOFENCING");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"LEARN MORE");
			}
		}
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting set points for Home period ***************");
		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_HOME);
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperatures do you prefer when you're at home" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to home set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to home set points page"
				 * ); }
				 */
			}
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")
				|| !allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperature do you prefer when you're at home" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to home set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to home set points page"
				 * ); }
				 */
			}
		}
		HashMap<String, String> targetSetPoints = new HashMap<String, String>();
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT));
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Home cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Home heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Home heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Home cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
		}
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, "Home", targetSetPoints);
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"NextButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"NextButton");
		}
		Keyword.ReportStep_Pass(testCase,
				"*************** Completed setting set points for Home period ***************");
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting set points for Away period ***************");
		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_AWAY);
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperatures do you prefer when you're away from home"
				 * + "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to away set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to away set points page"
				 * ); }
				 */
			}
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")
				|| !allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperature do you prefer when you're away from away" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to away set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to home set points page"
				 * ); }
				 */
			}
		}
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT));
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Away cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Away heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Away heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Away cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
		}
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, "Away", targetSetPoints);
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"NextButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"NextButton");
		}
		Keyword.ReportStep_Pass(testCase,
				"*************** Completed setting set points for Away period ***************");
		if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
				.equalsIgnoreCase("No")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipSleepButton");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"NoButton");
			}

		} else {
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting time and set points for Sleep period ***************");
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_SLEEP);
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"YesButton");
			}
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME),
									"GeofenceSleepStartTime", true, true);
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME),
									"GeofenceSleepEndTime", true, true);
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
			}
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, "Sleep", targetSetPoints);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"NextButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed setting time and set points for Sleep period ***************");
		}
		// flag = flag & JasperUtils.verifyCreatedSchedule(testCase, inputs,
		// "Geofence");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"DoneButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"DoneButton");
		}

		if (inputs.getInputValue(JasperUtils.ALL_STAT_COPYING).equals("Yes")) {
			System.out.println("Copy all");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 3)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				for (WebElement cbox : checkBoxes) {
					if (testCase.getPlatform().toUpperCase().contains("IOS")) {
						if (cbox.getAttribute("value").equals("")) {
							cbox.click();
						}
					} else {
						if (cbox.getAttribute("checked").equals("false")) {
							cbox.click();
						}
					}
				}

			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else if (inputs.getInputValue(JasperUtils.SPECIFIC_STAT_COPYING)
				.equals("Yes")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 5)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				System.out.println(checkBoxes.size());
				String SelectStatPosition = JasperUtils
						.getRandomSetPointValueBetweenMinandMax(testCase,
								inputs, Double.parseDouble("0"), Double
										.parseDouble(String.valueOf(checkBoxes
												.size())));
				Keyword.ReportStep_Pass(testCase, "Selecting stat at Position "
						+ SelectStatPosition
						+ ", copying to "
						+ checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.getText());

				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					// if
					// (checkBoxes.get(Integer.parseInt(SelectStatPosition)).getAttribute("value").equals(""))
					// {
					checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.click();
					inputs.setInputValue(JasperUtils.STAT_TO_COPY_SCHEDULE,
							checkBoxes
									.get(Integer.parseInt(SelectStatPosition))
									.getAttribute("name"));
					// }
				} else {
					if (checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.getAttribute("checked").equals("false")) {
						checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.click();
						inputs.setInputValue(
								JasperUtils.STAT_TO_COPY_SCHEDULE,
								checkBoxes.get(
										Integer.parseInt(SelectStatPosition))
										.getText());
					}
				}

			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"SkipButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipButton");
			}
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeScheduleButton", 10)) {
			Keyword.ReportStep_Pass(testCase,
					"Create Schedule : Successfully navigated to Primary Card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Failed to navigate to Primary Card");
		}
		return flag;
	}

	public static boolean createGeofenceBasedScheduleWithDefaultValues(
			TestCases testCase, TestCaseInputs inputs,
			boolean createScheduleUsingUseGeofenceButton) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"LocationOption", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"LocationOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}

		if (createScheduleUsingUseGeofenceButton) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='USE GEOFENCING']");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"USE GEOFENCING");
			}
		} else {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='LEARN MORE']");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"LEARN MORE");
			}
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Verifying set points for Home period ***************");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperatures do you prefer when you're at home" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to home set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to home set points page"
				 * ); }
				 */
			}
			flag = flag
					& verifyCoolStepperValue(
							testCase,
							inputs,
							inputs.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT),
							"");
			flag = flag
					& verifyHeatStepperValue(
							testCase,
							inputs,
							inputs.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT),
							"");

		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperature do you prefer when you're at home" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to home set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to home set points page"
				 * ); }
				 */
			}
			flag = flag
					& verifyHeatStepperValue(
							testCase,
							inputs,
							inputs.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT),
							"");
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HomeTemperatureHeaderSingleTemperature", 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Create Schedule : Successfully navigated to home set points page");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Schedule : Failed to navigate to home set points page");
			}
			flag = flag
					& verifyCoolStepperValue(
							testCase,
							inputs,
							inputs.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT),
							"");
		}
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"NextButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed verifying set points for Home period ***************");
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Verifying set points for Away period ***************");
		String coolSetPoint = "";
		String heatSetPoint = "";
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				coolSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"CoolSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				coolSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "CoolSetPoints")
						.get(1).getAttribute("value");
			}
			flag = flag
					& verifyCoolStepperValue(
							testCase,
							inputs,
							coolSetPoint,
							inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT),
							"");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				heatSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"HeatSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				heatSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "HeatSetPoints")
						.get(1).getAttribute("value");
			}
			flag = flag
					& verifyHeatStepperValue(
							testCase,
							inputs,
							heatSetPoint,
							inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT),
							"");

		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperatures do you prefer when you're away from home"
				 * + "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to away set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to away set points page"
				 * ); }
				 */
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				heatSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"HeatSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				heatSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "HeatSetPoints")
						.get(1).getAttribute("value");
			}
			flag = flag
					& verifyHeatStepperValue(
							testCase,
							inputs,
							heatSetPoint,
							inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT),
							"");
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name",
				 * "What temperature do you prefer when you're away from home" +
				 * "\u003F", testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Create Schedule : Successfully navigated to away set points page"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Schedule : Failed to navigate to away set points page"
				 * ); }
				 */
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				coolSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"CoolSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				coolSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "CoolSetPoints")
						.get(1).getAttribute("value");
			}
			flag = flag
					& verifyCoolStepperValue(
							testCase,
							inputs,
							coolSetPoint,
							inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT),
							"");
		}
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"NextButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed verifying set points for Away period ***************");
		if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
				.equalsIgnoreCase("No")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipSleepButton");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"NoButton");
			}

		} else {
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Verifying time and set points for Sleep period ***************");
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"YesButton");
			}
			flag = flag
					& JasperUtils
							.verifySetPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME),
									"GeofenceSleepStartTime");
			flag = flag
					& JasperUtils
							.verifySetPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME),
									"GeofenceSleepEndTime");
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				flag = flag
						& verifyCoolStepperValue(
								testCase,
								inputs,
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT),
								"");
				flag = flag
						& verifyHeatStepperValue(
								testCase,
								inputs,
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT),
								"");
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				flag = flag
						& verifyHeatStepperValue(
								testCase,
								inputs,
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT),
								"");
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				flag = flag
						& verifyCoolStepperValue(
								testCase,
								inputs,
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT),
								"");
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"NextButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed verifying time and set points for Sleep period ***************");
		}
		// flag = flag & JasperUtils.verifyCreatedSchedule(testCase, inputs,
		// "Geofence");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"DoneButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"DoneButton");
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"SkipButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SkipButton");
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeScheduleButton", 10)) {
			Keyword.ReportStep_Pass(testCase,
					"Create Schedule : Successfully navigated to Primary Card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Failed to navigate to Primary Card");
		}
		return flag;
	}

	public static boolean createGeofenceBasedScheduleWithMinMaxSetPoints(
			TestCases testCase, TestCaseInputs inputs,
			boolean createScheduleUsingUseGeofenceButton) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"LocationOption", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"LocationOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (createScheduleUsingUseGeofenceButton) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='USE GEOFENCING']");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='LEARN MORE']");
			}
		} else {
			if (createScheduleUsingUseGeofenceButton) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"USE GEOFENCING");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								"LEARN MORE");
			}
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting set points for Home period ***************");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			}
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			}
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HomeTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to home set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to home set points page");
				}
			}
		}

		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Setting maximum and minimum set points for Home ***************");
		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_HOME);
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, null, true);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"NextButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed setting maximum and minimum set points for Home ***************");
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting set points for Away period ***************");
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderMultiTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			}
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			}
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AwayTemperatureHeaderSingleTemperature", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Successfully navigated to away set points page");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Create Schedule : Failed to navigate to away set points page");
				}
			}
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Setting maximum and minimum set points for Away ***************");
		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_AWAY);
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, null, true);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"NextButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed setting maximum and minimum set points for Away ***************");
		if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
				.equalsIgnoreCase("No")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipSleepButton");
			} else {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"NoButton");
			}

		} else {
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting time and set points for Sleep period ***************");
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"YesButton");
			}
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME),
									"GeofenceSleepStartTime", true, true);
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME),
									"GeofenceSleepEndTime", true, true);
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Setting maximum and minimum set points for Sleep ***************");
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_SLEEP);
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, null, true);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"NextButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed setting maximum and minimum set points for Sleep ***************");
		}
		// flag = flag & JasperUtils.verifyCreatedSchedule(testCase, inputs,
		// "Geofence");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"DoneButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"DoneButton");
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"SkipButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SkipButton");
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeScheduleButton", 10)) {
			Keyword.ReportStep_Pass(testCase,
					"Create Schedule : Successfully navigated to Primary Card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Failed to navigate to Primary Card");
		}
		return flag;
	}

	public static boolean createTimeBasedSchedule(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils
				.isMobElementExists(fieldObjects, testCase, "TimeOption")) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"TimeOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}
		if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
				EVERYDAY_SCHEDULE)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"EverydayScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake", "Away", "Home", "Sleep" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_WAKE_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayWake");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_WAKE);
					} else if (mode.equals("Away")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_AWAY_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayAway");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_AWAY);
					} else if (mode.equals("Home")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_HOME_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayHome");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_HOME);
					} else if (mode.equals("Sleep")) {
						periodTimeandSetPoint
								.put("Time",
										inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydaySleep");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_SLEEP);
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					flag = flag
							& JasperUtils
									.setTimeSchedulePeriodTimeAndSetPoints(
											testCase, inputs,
											periodTimeandSetPoint, element);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			} else {
				String[] modes = { "1", "2", "3", "4" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("1")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_1_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_2_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_1");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_COOL_SETPOINT));
						}
					} else if (mode.equals("2")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_2_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_3_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_2");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_COOL_SETPOINT));
						}
					} else if (mode.equals("3")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_3_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_4_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_3");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_COOL_SETPOINT));
						}
					} else if (mode.equals("4")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_4_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_1_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_4");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_COOL_SETPOINT));
						}
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					flag = flag
							& JasperUtils
									.setTimeSchedulePeriodTimeAndSetPoints(
											testCase, inputs,
											periodTimeandSetPoint, element);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			}
		} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
				.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"WeekdayandWeekendScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake_Weekday", "Away_Weekday",
						"Home_Weekday", "Sleep_Weekday", "Wake_Weekend",
						"Away_Weekend", "Home_Weekend", "Sleep_Weekend" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_WAKE_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayWake");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_WAKE);
					} else if (mode.equals("Away_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_AWAY_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayAway");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_AWAY);
					} else if (mode.equals("Home_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_HOME_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayHome");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_HOME);
					} else if (mode.equals("Sleep_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_SLEEP_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdaySleep");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_SLEEP);
					} else if (mode.equals("Wake_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_WAKE_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendWake",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Wake");
									} catch (Exception e3) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Wake_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendWake");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Wake_Saturday-Sunday");
							}
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_WAKE);
					} else if (mode.equals("Away_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_AWAY_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendAway",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Away");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Away_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendAway");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Away_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_AWAY);
					} else if (mode.equals("Home_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_HOME_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendHome",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Home");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Home_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendHome");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Home_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_HOME);
					} else if (mode.equals("Sleep_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_SLEEP_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendSleep",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Sleep");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Sleep_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendSleep");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Sleep_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_SLEEP);
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					flag = flag
							& JasperUtils
									.setTimeSchedulePeriodTimeAndSetPoints(
											testCase, inputs,
											periodTimeandSetPoint, element);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			} else {
				String[] modes = { "1_Weekday", "2_Weekday", "3_Weekday",
						"4_Weekday", "1_Weekend", "2_Weekend", "3_Weekend",
						"4_Weekend" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("1_Weekday")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_1_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_2_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Monday - Friday_1"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_COOL_SETPOINT));
						}
					} else if (mode.equals("2_Weekday")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_2_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_3_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Monday - Friday_2"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_COOL_SETPOINT));
						}
					} else if (mode.equals("3_Weekday")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_3_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_4_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Monday - Friday_3"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_COOL_SETPOINT));
						}
					} else if (mode.equals("4_Weekday")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_4_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKDAY_1_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Monday - Friday_4"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_COOL_SETPOINT));
						}
					} else if (mode.equals("1_Weekend")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKEND_1_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKEND_2_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("name",
										"Saturday - Sunday_1", testCase, 5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_1");
									} catch (Exception e3) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Saturday-Sunday_1");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"name", "Saturday - Sunday_1");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 1_Saturday-Sunday");
							}
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_COOL_SETPOINT));
						}
					} else if (mode.equals("2_Weekend")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKEND_2_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKEND_3_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("name",
										"Saturday - Sunday_2", testCase, 5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_2");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element 2_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"name", "Saturday - Sunday_2");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 2_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_COOL_SETPOINT));
						}
					} else if (mode.equals("3_Weekend")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKEND_3_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKEND_4_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("name",
										"Saturday - Sunday_3", testCase, 5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_3");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element 3_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"name", "Saturday - Sunday_3");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 3_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_COOL_SETPOINT));
						}
					} else if (mode.equals("4_Weekend")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.WEEKEND_4_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.WEEKEND_1_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("name",
										"Saturday - Sunday_4", testCase, 5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_4");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element 4_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"name", "Saturday - Sunday_4");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 4_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_COOL_SETPOINT));
						}
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					flag = flag
							& JasperUtils
									.setTimeSchedulePeriodTimeAndSetPoints(
											testCase, inputs,
											periodTimeandSetPoint, element);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			}
		}
		// flag = flag & JasperUtils.verifyCreatedSchedule(testCase, inputs,
		// "Time");
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"DoneButton");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ConfirmChangeButton", 10)) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (testCase.getMobileDriver()
						.findElement(By.id("android:id/button1"))
						.getAttribute("text").equals("Confirm Change")) {
					testCase.getMobileDriver()
							.findElement(By.id("android:id/button1")).click();
				}
			} else {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ConfirmChangeButton")) {
					flag = false;
				}
			}
		}
		if (inputs.getInputValue(JasperUtils.ALL_STAT_COPYING).equals("Yes")) {
			System.out.println("Copy all");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 3)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				for (WebElement cbox : checkBoxes) {
					if (testCase.getPlatform().toUpperCase().contains("IOS")) {
						if (cbox.getAttribute("value").equals("")) {
							cbox.click();
						}
					} else {
						if (cbox.getAttribute("checked").equals("false")) {
							cbox.click();
						}
					}
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 3)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else if (inputs.getInputValue(JasperUtils.SPECIFIC_STAT_COPYING)
				.equals("Yes")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 3)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				System.out.println(checkBoxes.size());
				String SelectStatPosition = JasperUtils
						.getRandomSetPointValueBetweenMinandMax(testCase,
								inputs, Double.parseDouble("0"), Double
										.parseDouble(String.valueOf(checkBoxes
												.size())));
				Keyword.ReportStep_Pass(testCase, "Selecting stat at Position "
						+ SelectStatPosition
						+ ", copying to "
						+ checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.getText());

				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					if (checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.getAttribute("value").equals("")) {
						checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.click();
						inputs.setInputValue(
								JasperUtils.STAT_TO_COPY_SCHEDULE,
								checkBoxes.get(
										Integer.parseInt(SelectStatPosition))
										.getAttribute("name"));
					}
				} else {
					if (checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.getAttribute("checked").equals("false")) {
						checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.click();
						inputs.setInputValue(
								JasperUtils.STAT_TO_COPY_SCHEDULE,
								checkBoxes.get(
										Integer.parseInt(SelectStatPosition))
										.getText());
					}
				}

			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 3)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"SkipButton", 3)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipButton");
			}
		}
		/*
		 * if (MobileUtils.isMobElementExists(fieldObjects, testCase,
		 * "GeofenceScheduleButton", 10)) { Keyword.ReportStep_Pass(testCase,
		 * "Create Schedule : Successfully navigated to Primary Card"); } else
		 */if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeScheduleButton", 10)) {
			Keyword.ReportStep_Pass(testCase,
					"Create Schedule : Successfully navigated to Primary Card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Failed to navigate to Primary Card");
		}
		return flag;
	}

	public static boolean createTimeBasedScheduleWithDefaultValues(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils
				.isMobElementExists(fieldObjects, testCase, "TimeOption")) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"TimeOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}
		if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
				.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"EverydayScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake", "Away", "Home", "Sleep" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_WAKE_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayWake");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_WAKE);
					} else if (mode.equals("Away")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_AWAY_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayAway");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_AWAY);
					} else if (mode.equals("Home")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.EVERYDAY_HOME_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayHome");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_HOME);
					} else if (mode.equals("Sleep")) {
						periodTimeandSetPoint
								.put("Time",
										inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydaySleep");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_SLEEP);
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully click on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select "
										+ periodTimeandSetPoint
												.get("periodName"));
						return false;
					}
					flag = flag
							& verifySetPeriodTime(testCase,
									periodTimeandSetPoint.get("Time"),
									"TimeChooser");
					String coolTemp = " ";
					String heatTemp = " ";
					if (allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(periodTimeandSetPoint
									.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						}

						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");

					} else if (allowedModes.contains("Heat")
							&& !allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
					} else if (!allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
						}
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					}
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			}
			// ================================================EMEA===========================================================
			else {
				String[] modes = { "1", "2", "3", "4" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("1")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_1_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_2_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_1");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_1_COOL_SETPOINT));
						}
					} else if (mode.equals("2")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_2_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_3_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_2");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_2_COOL_SETPOINT));
						}
					} else if (mode.equals("3")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_3_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_4_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_3");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_3_COOL_SETPOINT));
						}
					} else if (mode.equals("4")) {
						periodTimeandSetPoint.put("StartTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_4_TIME));
						periodTimeandSetPoint.put("EndTime", inputs
								.getInputValue(JasperUtils.EVERYDAY_1_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_4");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.EVERYDAY_4_COOL_SETPOINT));
						}
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully click on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select "
										+ periodTimeandSetPoint
												.get("periodName"));
						return false;
					}
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils
								.isMobElementExists(
										"XPATH",
										"//*[@text='When do you want the temperature to change?']",
										testCase, 5)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Time chooser header is shown correctly: When do you want the temperature to change?");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Time chooser header is not shown correctly");
						}
						if (MobileUtils
								.isMobElementExists(
										"XPATH",
										"//*[@text='What temperature is preferred during this time?']",
										testCase, 5)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Temp chooser header is shown correctly: What temperature is preferred during this time?");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Temp chooser header is not shown correctly");
						}
					} else {
						if (MobileUtils
								.isMobElementExists(
										"XPATH",
										"//UIAStaticText[@name='When do you want the temperature to change?']",
										testCase, 5)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Time chooser header is shown correctly: When do you want the temperature to change?");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Time chooser header is not shown correctly");
						}
						if (MobileUtils
								.isMobElementExists(
										"XPATH",
										"//UIAStaticText[@name='What temperature is preferred at this time?']",
										testCase, 5)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Temp chooser header is shown correctly: What temperature is preferred at this time?");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Temp chooser header is not shown correctly");
						}
					}
					flag = flag
							& verifySetPeriodTime(testCase,
									periodTimeandSetPoint.get("StartTime"),
									"TimeChooser");
					flag = flag
							& verifySetPeriodTime(testCase,
									periodTimeandSetPoint.get("EndTime"),
									"TimeChooserEndTime");
					String coolTemp = " ";
					String heatTemp = " ";
					if (allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(periodTimeandSetPoint
									.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						}

						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");

					} else if (allowedModes.contains("Heat")
							&& !allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
					} else if (!allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
						}
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					}
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			}
		} else if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
				.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"WeekdayandWeekendScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake_Weekday", "Away_Weekday",
						"Home_Weekday", "Sleep_Weekday", "Wake_Weekend",
						"Away_Weekend", "Home_Weekend", "Sleep_Weekend" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_WAKE_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayWake");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_WAKE);
					} else if (mode.equals("Away_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_AWAY_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayAway");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_AWAY);
					} else if (mode.equals("Home_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_HOME_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayHome");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_HOME);
					} else if (mode.equals("Sleep_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_SLEEP_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdaySleep");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_SLEEP);
					} else if (mode.equals("Wake_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_WAKE_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendWake",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Wake");
									} catch (Exception e3) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Wake_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendWake");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Wake_Saturday-Sunday");
							}
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_WAKE);
					} else if (mode.equals("Away_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_AWAY_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendAway",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Away");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Away_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendAway");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Away_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_AWAY);
					} else if (mode.equals("Home_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_HOME_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendHome",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Home");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Home_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendHome");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Home_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_HOME);
					} else if (mode.equals("Sleep_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_SLEEP_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendSleep",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Sleep");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Sleep_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendSleep");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Sleep_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_SLEEP);
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully click on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select "
										+ periodTimeandSetPoint
												.get("periodName"));
						return false;
					}
					flag = flag
							& verifySetPeriodTime(testCase,
									periodTimeandSetPoint.get("Time"),
									"TimeChooser");
					String coolTemp = " ";
					String heatTemp = " ";
					if (allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(periodTimeandSetPoint
									.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					} else if (allowedModes.contains("Heat")
							&& !allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
					} else if (!allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
						}
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					}
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}
			} else {

				String[] modes = { "Wake_Weekday", "Away_Weekday",
						"Home_Weekday", "Sleep_Weekday", "Wake_Weekend",
						"Away_Weekend", "Home_Weekend", "Sleep_Weekend" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_1_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@name='Monday - Friday_1']"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_1_COOL_SETPOINT));
						}
					} else if (mode.equals("Away_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_2_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@name='Monday - Friday_2']"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_2_COOL_SETPOINT));
						}
					} else if (mode.equals("Home_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_3_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@name='Monday - Friday_3']"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_3_COOL_SETPOINT));
						}
					} else if (mode.equals("Sleep_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_4_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@name='Monday - Friday_4']"));
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_4_COOL_SETPOINT));
						}
					} else if (mode.equals("Wake_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_1_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("xpath",
										"//*[@name='Saturday - Sunday_1']",
										testCase)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_1");
									} catch (Exception e3) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"xpath",
										"//*[@name='Saturday - Sunday_1']");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 1_Saturday-Sunday");
							}
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_1_COOL_SETPOINT));
						}
					} else if (mode.equals("Away_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_2_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("xpath",
										"//*[@name='Saturday - Sunday_2']",
										testCase)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_2");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Away_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"xpath",
										"//*[@name='Saturday - Sunday_2']");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 2_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_2_COOL_SETPOINT));
						}
					} else if (mode.equals("Home_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_3_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("xpath",
										"//*[@name='Saturday - Sunday_3']",
										testCase)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_3");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Home_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"xpath",
										"//*[@name='Saturday - Sunday_3']");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element 3_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_3_COOL_SETPOINT));
						}
					} else if (mode.equals("Sleep_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_4_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists("xpath",
										"//*[@name='Saturday - Sunday_4']",
										testCase)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_4");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Sleep_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(testCase,
										"xpath",
										"//*[@name='Saturday - Sunday_4']");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Sleep_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_4_COOL_SETPOINT));
						}
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully click on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select "
										+ periodTimeandSetPoint
												.get("periodName"));
						return false;
					}
					flag = flag
							& verifySetPeriodTime(testCase,
									periodTimeandSetPoint.get("Time"),
									"TimeChooser");
					String coolTemp = " ";
					String heatTemp = " ";
					if (allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(periodTimeandSetPoint
									.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					} else if (allowedModes.contains("Heat")
							&& !allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							int targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
						} else {
							Double targetHeatTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("HeatSetPoint"));
							heatTemp = String.valueOf(targetHeatTemp);
						}
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "");
					} else if (!allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (inputs.getInputValue(JasperUtils.UNITS).equals(
								GlobalVariables.FAHRENHEIT)) {
							Double temp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							int targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
						} else {
							Double targetCoolTemp = Double
									.parseDouble(periodTimeandSetPoint
											.get("CoolSetPoint"));
							coolTemp = String.valueOf(targetCoolTemp);
						}
						flag = flag
								& verifyCoolStepperValue(testCase, inputs,
										coolTemp, "");
					}
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed verifying time and set points for "
									+ periodTimeandSetPoint.get("periodName")
									+ " period ***************");
				}

			}
		}
		// flag = flag & JasperUtils.verifyCreatedSchedule(testCase, inputs,
		// "Time");
		if (inputs.getInputValue(JasperUtils.DELETE_PERIOD).equalsIgnoreCase(
				"Yes")) {
			JasperUtils.deletePeriodEMEA(testCase, inputs);
		}
		if (inputs.getInputValue(JasperUtils.DELETE_MULTIPLE_PERIODS)
				.equalsIgnoreCase("Yes")) {
			int count = 0, periodToDelete = 0;
			ArrayList<Integer> arrlist = new ArrayList<Integer>(8);
			Random rn = new Random();
			if (inputs.getInputValue(JasperUtils.NUMBER_OF_PERIODS_TO_DELETE)
					.equalsIgnoreCase("ONE")) {
				count = 1;
			} else if (inputs.getInputValue(
					JasperUtils.NUMBER_OF_PERIODS_TO_DELETE).equalsIgnoreCase(
					"TWO")) {
				count = 2;
			} else if (inputs.getInputValue(
					JasperUtils.NUMBER_OF_PERIODS_TO_DELETE).equalsIgnoreCase(
					"THREE")) {
				count = 3;
			} else if (inputs.getInputValue(
					JasperUtils.NUMBER_OF_PERIODS_TO_DELETE).equalsIgnoreCase(
					"FOUR")) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {
					count = 8;
				} else {
					count = 4;
				}
			}

			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				for (int i = 0; i < count; i++) {
					do {
						periodToDelete = rn.nextInt(4 - 1 + 1) + 1;
					} while (arrlist.contains(periodToDelete));
					inputs.setInputValue(PERIOD_NUMBER_TO_DELETE,
							String.valueOf(periodToDelete));
					arrlist.add(periodToDelete);
					JasperUtils.deletePeriodNA(testCase, inputs);
				}
			}

			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				periodToDelete = 1;
				for (int i = 0; i < count; i++) {
					do {
						periodToDelete = rn.nextInt(8 - 1 + 1) + 1;
					} while (arrlist.contains(periodToDelete));
					inputs.setInputValue(PERIOD_NUMBER_TO_DELETE,
							String.valueOf(periodToDelete));
					arrlist.add(periodToDelete);
					deletePeriodNA(testCase, inputs);
				}
			}

			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"TimeOption", 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Successfully deleted all the periods");
				return flag;
			}
		}
		if (inputs.getInputValue(ADD_PERIOD).equalsIgnoreCase("Yes")) {
			JasperUtils.addPeriodEMEADefaultCase(testCase, inputs);
		}

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"DoneButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"DoneButton");
		}
		if (!inputs.getInputValue("ConfirmTimeShedule").isEmpty()) {
			System.out.println(inputs.getInputValue("ConfirmTimeShedule"));
			if (inputs.getInputValue("ConfirmTimeShedule").equalsIgnoreCase(
					"true")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ConfirmChangeButton", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Schedule : Confirm change button shown");
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ConfirmChangeButton")) {
						flag = false;
					}
				}
			} else {
				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					if (MobileUtils.isMobElementExists("name", "CANCEL",
							testCase, 5)) {
						Keyword.ReportStep_Pass(testCase,
								"Create Schedule : Cancel change button shown");
						if (!MobileUtils.clickOnElement(testCase, "name",
								"CANCEL")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Cancel button not shown");
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"CancelChangeButton", 5)) {
						Keyword.ReportStep_Pass(testCase,
								"Create Schedule : Cancel change button shown");
						if (!MobileUtils.clickOnElement(fieldObjects, testCase,
								"CancelChangeButton")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Cancel button not shown");
					}
				}
				return flag;
			}

		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ConfirmChangeButton", 10)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (testCase.getMobileDriver()
							.findElement(By.id("android:id/button1"))
							.getAttribute("text").equals("Confirm Change")) {
						testCase.getMobileDriver()
								.findElement(By.id("android:id/button1"))
								.click();
					}
				} else {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ConfirmChangeButton")) {
						flag = false;
					}
				}
			}
		}
		if (inputs.getInputValue(JasperUtils.ALL_STAT_COPYING).equals("Yes")) {
			System.out.println("Copy all");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 3)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				for (WebElement cbox : checkBoxes) {
					if (testCase.getPlatform().toUpperCase().contains("IOS")) {
						if (cbox.getAttribute("value").equals("")) {
							cbox.click();
						}
					} else {
						if (cbox.getAttribute("checked").equals("false")) {
							cbox.click();
						}
					}
				}

			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 3)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else if (inputs.getInputValue(JasperUtils.SPECIFIC_STAT_COPYING)
				.equals("Yes")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CheckBox", 3)) {
				List<WebElement> checkBoxes = MobileUtils.getMobElements(
						fieldObjects, testCase, "CheckBox");
				System.out.println(checkBoxes.size());
				String SelectStatPosition = JasperUtils
						.getRandomSetPointValueBetweenMinandMax(testCase,
								inputs, Double.parseDouble("0"), Double
										.parseDouble(String.valueOf(checkBoxes
												.size())));
				Keyword.ReportStep_Pass(testCase, "Selecting stat at Position "
						+ SelectStatPosition
						+ ", copying to "
						+ checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.getText());

				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					if (checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.getAttribute("value").equals("")) {
						checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.click();
						inputs.setInputValue(
								JasperUtils.STAT_TO_COPY_SCHEDULE,
								checkBoxes.get(
										Integer.parseInt(SelectStatPosition))
										.getText());
					}
				} else {
					if (checkBoxes.get(Integer.parseInt(SelectStatPosition))
							.getAttribute("checked").equals("false")) {
						checkBoxes.get(Integer.parseInt(SelectStatPosition))
								.click();
						inputs.setInputValue(
								JasperUtils.STAT_TO_COPY_SCHEDULE,
								checkBoxes.get(
										Integer.parseInt(SelectStatPosition))
										.getText());
					}
				}

			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CopyButton", 10)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CopyButton");
			}
		} else if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"SkipButton", 10)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SkipButton");
		}
		/*
		 * if (MobileUtils.isMobElementExists(fieldObjects, testCase,
		 * "GeofenceScheduleButton", 10)) { Keyword.ReportStep_Pass(testCase,
		 * "Create Schedule : Successfully navigated to Primary Card"); } else
		 * if (MobileUtils.isMobElementExists(fieldObjects, testCase,
		 * "TimeScheduleButton", 10)) { Keyword.ReportStep_Pass(testCase,
		 * "Create Schedule : Successfully navigated to Primary Card"); } else {
		 * flag = false; Keyword.ReportStep_Fail(testCase,
		 * FailType.FUNCTIONAL_FAILURE,
		 * "Create Schedule : Failed to navigate to Primary Card"); }
		 */
		return flag;
	}

	public static boolean createTimeBasedScheduleWithMinMaxSetPoints(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"CreateScheduleButton", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CreateScheduleButton");
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOffOverlay")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Existing schedule is resumed");
				}
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateNewScheduleButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"CreateNewScheduleButton");
			}
		}

		if (MobileUtils
				.isMobElementExists(fieldObjects, testCase, "TimeOption")) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"TimeOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Schedule : Unable to navigate to create schedule page.");
			return false;
		}
		if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
				.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"EverydayScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake", "Away", "Home", "Sleep" };
				for (String mode : modes) {
					if (mode.equals("Wake")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayWake");
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_WAKE);
					} else if (mode.equals("Away")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayAway");
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_AWAY);
					} else if (mode.equals("Home")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydayHome");
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_HOME);
					} else if (mode.equals("Sleep")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Everyday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "EverydaySleep");
						}
						inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_SLEEP);
					}
					try {
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Create Schedule : Successfully clicked on "
										+ mode);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Create Schedule : Failed to click on " + mode);
					}

					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting maximum and minimum set points for "
									+ mode + " period ***************");
					flag = flag
							& JasperUtils.setTimeSchedulePeriodSetPoints(
									testCase, inputs, null, true);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting maximum and minimum set points for "
									+ mode + " period ***************");
				}
			}
			// ================================================EMEA===========================================================
			else {
				String[] modes = { "1", "2", "3", "4" };
				for (String mode : modes) {
					if (mode.equals("1")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Everyday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(0) != null) {
								inputs.setInputValue(
										EVERYDAY_1_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(0).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_1");
							if (MobileUtils.getMobElements(testCase, "name",
									"Everyday_Time").get(0) != null) {
								inputs.setInputValue(
										EVERYDAY_1_TIME,
										MobileUtils
												.getMobElements(testCase,
														"name", "Everyday_Time")
												.get(0).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_1);
					} else if (mode.equals("2")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Everyday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(1) != null) {
								inputs.setInputValue(
										EVERYDAY_2_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(1).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_2");
							if (MobileUtils.getMobElements(testCase, "name",
									"Everyday_Time").get(1) != null) {
								inputs.setInputValue(
										EVERYDAY_2_TIME,
										MobileUtils
												.getMobElements(testCase,
														"name", "Everyday_Time")
												.get(1).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_2);
					} else if (mode.equals("3")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Everyday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(2) != null) {
								inputs.setInputValue(
										EVERYDAY_3_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(2).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_3");
							if (MobileUtils.getMobElements(testCase, "name",
									"Everyday_Time").get(2) != null) {
								inputs.setInputValue(
										EVERYDAY_3_TIME,
										MobileUtils
												.getMobElements(testCase,
														"name", "Everyday_Time")
												.get(2).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_3);
					} else if (mode.equals("4")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Everyday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(3) != null) {
								inputs.setInputValue(
										EVERYDAY_4_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(3).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Everyday_4");
							if (MobileUtils.getMobElements(testCase, "name",
									"Everyday_Time").get(3) != null) {
								inputs.setInputValue(
										EVERYDAY_4_TIME,
										MobileUtils
												.getMobElements(testCase,
														"name", "Everyday_Time")
												.get(3).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_4);
					}
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully clicked on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select Period-"
										+ PERIOD_NUMBER_EMEA);
						return false;
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting maximum and minimum set points for "
									+ mode + " period ***************");
					flag = flag
							& JasperUtils.setTimeSchedulePeriodSetPoints(
									testCase, inputs, null, true);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting maximum and minimum set points for "
									+ mode + " period ***************");
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"DoneButton", 10)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"DoneButton");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ConfirmChangeButton", 10)) {
				if (testCase.getMobileDriver()
						.findElement(By.id("android:id/button1"))
						.getAttribute("text").equals("Confirm Change")) {
					testCase.getMobileDriver()
							.findElement(By.id("android:id/button1")).click();
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"SkipButton", 10)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipButton");
			}
			/*
			 * if (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "GeofenceScheduleButton", 10)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Create Schedule : Successfully navigated to Primary Card"); }
			 * else
			 */if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"TimeScheduleButton", 10)) {
				Keyword.ReportStep_Pass(testCase,
						"Create Schedule : Successfully navigated to Primary Card");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Schedule : Failed to navigate to Primary Card");
			}

		} else {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"WeekdayandWeekendScheduleButton");
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				String[] modes = { "Wake_Weekday", "Away_Weekday",
						"Home_Weekday", "Sleep_Weekday", "Wake_Weekend",
						"Away_Weekend", "Home_Weekend", "Sleep_Weekend" };
				for (String mode : modes) {
					HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
					ThermostatInformation statInfo = new ThermostatInformation(
							testCase, inputs);
					List<String> allowedModes = statInfo.getAllowedModes();
					periodTimeandSetPoint.put("periodName", mode);
					if (mode.equals("Wake_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_WAKE_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Wake_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayWake");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_WAKE);
					} else if (mode.equals("Away_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_AWAY_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Away_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayAway");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_AWAY);
					} else if (mode.equals("Home_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_HOME_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Home_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdayHome");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_HOME);
					} else if (mode.equals("Sleep_Weekday")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKDAY_SLEEP_TIME));
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='Sleep_Monday-Friday']"));
						} else {
							element = MobileUtils.getMobElement(fieldObjects,
									testCase, "WeekdaySleep");
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKDAY_SLEEP);
					} else if (mode.equals("Wake_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_WAKE_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendWake",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Wake");
									} catch (Exception e3) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Wake_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendWake");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Wake_Saturday-Sunday");
							}
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_WAKE);
					} else if (mode.equals("Away_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_AWAY_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendAway",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Away");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Away_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendAway");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Away_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_AWAY);
					} else if (mode.equals("Home_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_HOME_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendHome",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Home");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Home_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendHome");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
								}
							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Home_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_HOME);
					} else if (mode.equals("Sleep_Weekend")) {
						periodTimeandSetPoint.put("Time", inputs
								.getInputValue(JasperUtils.WEEKEND_SLEEP_TIME));
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
							} else {
								if (!MobileUtils.isMobElementExists(
										fieldObjects, testCase, "WeekendSleep",
										5)) {
									try {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Sleep");
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Create Schedule : Could not find element Sleep_Saturday-Sunday");
									}
								}
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "WeekendSleep");
							}
						} catch (NoSuchElementException e) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									Dimension dimensions = testCase
											.getMobileDriver().manage()
											.window().getSize();
									int startx = (dimensions.width * 20) / 100;
									int starty = (dimensions.height * 62) / 100;
									int endx = (dimensions.width * 22) / 100;
									int endy = (dimensions.height * 35) / 100;
									testCase.getMobileDriver().swipe(startx,
											starty, endx, endy, 1000);
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
								}

							} catch (NoSuchElementException e1) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Create Schedule : Could not find element Sleep_Saturday-Sunday");
							}
						}
						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("HeatSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT));
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							periodTimeandSetPoint
									.put("CoolSetPoint",
											inputs.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT));
						}
						inputs.setInputValue(PERIOD_NAME_NA, WEEKEND_SLEEP);
					}
					try {
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Create Schedule : Successfully clicked on "
										+ mode);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Create Schedule : Failed to click on " + mode);
					}

					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting maximum and minimum set points for "
									+ mode + " period ***************");
					flag = flag
							& JasperUtils.setTimeSchedulePeriodSetPoints(
									testCase, inputs, null, true);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting maximum and minimum set points for "
									+ mode + " period ***************");
				}
			}
			// ================================================EMEA===========================================================
			else {
				String[] modes = { "1", "2", "3", "4", "5", "6", "7", "8" };
				for (String mode : modes) {
					if (mode.equals("1")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Monday-Friday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(0) != null) {
								inputs.setInputValue(
										WEEKDAY_1_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(0).getText());
							}
						} else {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@name='Monday - Friday_1']"));
							if (element != null) {
								inputs.setInputValue(
										WEEKDAY_1_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Monday - Friday_Time']"))
												.get(0).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "1");
					} else if (mode.equals("2")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Monday-Friday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(1) != null) {
								inputs.setInputValue(
										WEEKDAY_2_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(1).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Monday - Friday_2");
							if (element != null) {
								inputs.setInputValue(
										WEEKDAY_2_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Monday - Friday_Time']"))
												.get(1).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "2");
					} else if (mode.equals("3")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Monday-Friday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(2) != null) {
								inputs.setInputValue(
										WEEKDAY_3_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(2).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Monday - Friday_3");
							if (element != null) {
								inputs.setInputValue(
										WEEKDAY_3_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Monday - Friday_Time']"))
												.get(2).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "3");
					} else if (mode.equals("4")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Monday-Friday']"));
							if (MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_time").get(3) != null) {
								inputs.setInputValue(
										WEEKDAY_4_TIME,
										MobileUtils
												.getMobElements(testCase, "ID",
														"scheduling_period_time")
												.get(3).getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Monday - Friday_4");
							if (element != null) {
								inputs.setInputValue(
										WEEKDAY_4_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Monday - Friday_Time']"))
												.get(3).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "4");
					} else if (mode.equals("5")) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 20) / 100;
								int starty = (dimensions.height * 62) / 100;
								int endx = (dimensions.width * 22) / 100;
								int endy = (dimensions.height * 35) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Create Schedule : Could not find element 1_Saturday-Sunday");
						}
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='1_Saturday-Sunday']"));
							if (MobileUtils
									.getMobElement(testCase, "xpath",
											"//*[@content-desc='1_Saturday-Sunday']/android.widget.TextView") != null) {
								inputs.setInputValue(
										WEEKEND_1_TIME,
										MobileUtils
												.getMobElement(testCase,
														"xpath",
														"//*[@content-desc='1_Saturday-Sunday']/android.widget.TextView")
												.getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Saturday - Sunday_1");
							if (element != null) {
								inputs.setInputValue(
										WEEKEND_1_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Saturday - Sunday_Time']"))
												.get(0).getAttribute("value"));
							}
						}

						inputs.setInputValue(PERIOD_NUMBER_EMEA, "5");
					} else if (mode.equals("6")) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 20) / 100;
								int starty = (dimensions.height * 62) / 100;
								int endx = (dimensions.width * 22) / 100;
								int endy = (dimensions.height * 35) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
							} else {
								testCase.getMobileDriver().scrollTo(
										"Saturday - Sunday_4");
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Create Schedule : Could not find element 2_Saturday-Sunday");
						}
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='2_Saturday-Sunday']"));
							if (MobileUtils
									.getMobElement(testCase, "xpath",
											"//*[@content-desc='2_Saturday-Sunday']/android.widget.TextView") != null) {
								inputs.setInputValue(
										WEEKEND_2_TIME,
										MobileUtils
												.getMobElement(testCase,
														"xpath",
														"//*[@content-desc='2_Saturday-Sunday']/android.widget.TextView")
												.getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Saturday - Sunday_2");
							if (element != null) {
								inputs.setInputValue(
										WEEKEND_2_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Saturday - Sunday_Time']"))
												.get(1).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "6");
					} else if (mode.equals("7")) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 20) / 100;
								int starty = (dimensions.height * 62) / 100;
								int endx = (dimensions.width * 22) / 100;
								int endy = (dimensions.height * 35) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Create Schedule : Could not find element 3_Saturday-Sunday");
						}
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='3_Saturday-Sunday']"));
							if (MobileUtils
									.getMobElement(testCase, "xpath",
											"//*[@content-desc='3_Saturday-Sunday']/android.widget.TextView") != null) {
								inputs.setInputValue(
										WEEKEND_3_TIME,
										MobileUtils
												.getMobElement(testCase,
														"xpath",
														"//*[@content-desc='3_Saturday-Sunday']/android.widget.TextView")
												.getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Saturday - Sunday_3");
							if (element != null) {
								inputs.setInputValue(
										WEEKEND_3_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Saturday - Sunday_Time']"))
												.get(2).getAttribute("value"));
							}
						}
						System.out.println("chk home"
								+ inputs.getInputValue(WEEKEND_3_TIME));
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "7");
					} else if (mode.equals("8")) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 20) / 100;
								int starty = (dimensions.height * 62) / 100;
								int endx = (dimensions.width * 22) / 100;
								int endy = (dimensions.height * 35) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Create Schedule : Could not find element 4_Saturday-Sunday");
						}
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase
									.getMobileDriver()
									.findElement(
											By.xpath("//*[@content-desc='4_Saturday-Sunday']"));
							if (MobileUtils
									.getMobElement(testCase, "xpath",
											"//*[@content-desc='4_Saturday-Sunday']/android.widget.TextView") != null) {
								inputs.setInputValue(
										WEEKEND_4_TIME,
										MobileUtils
												.getMobElement(testCase,
														"xpath",
														"//*[@content-desc='4_Saturday-Sunday']/android.widget.TextView")
												.getText());
							}
						} else {
							element = MobileUtils.getMobElement(testCase,
									"name", "Saturday - Sunday_4");
							if (element != null) {
								inputs.setInputValue(
										WEEKEND_4_TIME,
										testCase.getMobileDriver()
												.findElements(
														By.xpath("//*[@name='Saturday - Sunday_Time']"))
												.get(3).getAttribute("value"));
							}
						}
						inputs.setInputValue(PERIOD_NUMBER_EMEA, "8");
					}
					try {
						String elementDesc = element.getAttribute("name");
						element.click();
						Keyword.ReportStep_Pass(testCase,
								"Successfully clicked on : " + elementDesc);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Period Time and Set Points : Failed to select Period-"
										+ PERIOD_NUMBER_EMEA);
						return false;
					}
					Keyword.ReportStep_Pass(testCase, " ");
					Keyword.ReportStep_Pass(testCase,
							"*************** Setting maximum and minimum set points for "
									+ mode + " period ***************");
					flag = flag
							& JasperUtils.setTimeSchedulePeriodSetPoints(
									testCase, inputs, null, true);
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "SaveButton");
					Keyword.ReportStep_Pass(testCase,
							"*************** Completed setting maximum and minimum set points for "
									+ mode + " period ***************");
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"DoneButton", 10)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"DoneButton");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ConfirmChangeButton", 10)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (testCase.getMobileDriver()
							.findElement(By.id("android:id/button1"))
							.getAttribute("text").equals("Confirm Change")) {
						testCase.getMobileDriver()
								.findElement(By.id("android:id/button1"))
								.click();
					}
				} else {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ConfirmChangeButton")) {
						flag = false;
					}
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"SkipButton", 10)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"SkipButton");
			}
			/*
			 * if (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "GeofenceScheduleButton", 10)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Create Schedule : Successfully navigated to Primary Card"); }
			 * else
			 */if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"TimeScheduleButton", 10)) {
				Keyword.ReportStep_Pass(testCase,
						"Create Schedule : Successfully navigated to Primary Card");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Schedule : Failed to navigate to Primary Card");
			}
		}
		return flag;
	}

	public static boolean deletePeriodEMEA(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true, deletedPeriodFlag = true;
		List<WebElement> schedule_period_title, schedule_period_time;
		String expectedPeriodTime = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			schedule_period_title = MobileUtils.getMobElements(fieldObjects,
					testCase, "SchedulePeriodTitle");
			schedule_period_time = MobileUtils.getMobElements(fieldObjects,
					testCase, "SchedulePeriodTime");
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				Dimension dimensions = testCase.getMobileDriver().manage()
						.window().getSize();
				int startx = (dimensions.width * 20) / 100;
				int starty = (dimensions.height * 62) / 100;
				int endx = (dimensions.width * 22) / 100;
				int endy = (dimensions.height * 35) / 100;
				testCase.getMobileDriver().swipe(endx, endy, startx, starty,
						1000);
				List<WebElement> weekdayschedule_period_title = MobileUtils
						.getMobElements(
								testCase,
								"xpath",
								"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView");
				if (Integer.parseInt(inputs
						.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE)) <= 4) {
					for (int i = 1; i <= (weekdayschedule_period_title.size()); i++) {
						if (weekdayschedule_period_title
								.get(i - 1)
								.getText()
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils
									.getMobElement(
											testCase,
											"xpath",
											"//android.widget.FrameLayout["
													+ i
													+ "]//*[contains(@content-desc,'_Monday-Friday')]/android.widget.TextView[1]")
									.getText();
							try {
								weekdayschedule_period_title.get(i - 1).click();
								Keyword.ReportStep_Pass(testCase,
										"Selected Period-" + (i));
								break;
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SelectPeriodToDelete] Failed to select Period-"
												+ (i));
							}
						}
					}
				} else {
					dimensions = testCase.getMobileDriver().manage().window()
							.getSize();
					startx = (dimensions.width * 20) / 100;
					starty = (dimensions.height * 62) / 100;
					endx = (dimensions.width * 22) / 100;
					endy = (dimensions.height * 35) / 100;
					testCase.getMobileDriver().swipe(startx, starty, endx,
							endy, 1000);
					List<WebElement> weekendschedule_period_title = MobileUtils
							.getMobElements(
									testCase,
									"xpath",
									"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView");

					for (int i = 5; i <= (weekendschedule_period_title.size() * 2); i++) {
						if (String
								.valueOf(
										(Integer.parseInt(weekendschedule_period_title
												.get(i).getText()) + 4))
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils
									.getMobElement(
											testCase,
											"xpath",
											"//android.widget.FrameLayout["
													+ i
													+ "]//*[contains(@content-desc,'_Saturday-Sunday')]/android.widget.TextView[1]")
									.getText();
							try {
								weekendschedule_period_title.get(i - 5).click();
								Keyword.ReportStep_Pass(testCase,
										"Selected Period-" + (i));
								break;
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SelectPeriodToDelete] Failed to select Period-"
												+ (i));
							}
						}
					}
				}
			} else {

				for (int i = 0; i < schedule_period_title.size(); i++) {
					if (schedule_period_title
							.get(i)
							.getText()
							.equalsIgnoreCase(
									inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
						expectedPeriodTime = schedule_period_time.get(i)
								.getText();
						try {
							schedule_period_title.get(i).click();
							Keyword.ReportStep_Pass(testCase,
									"Selected Period-" + (i + 1));
							break;
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SelectPeriodToDelete] Failed to select Period-"
											+ (i + 1));
						}
					}
				}
			}
		} else {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(
								JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
					List<WebElement> weekdayschedule_period_title = MobileUtils
							.getMobElements(
									testCase,
									"xpath",
									"//*[contains(@name,'Monday - Friday_') and contains(@label,'TimeScheduleLabel')]");
					List<WebElement> weekendschedule_period_title = MobileUtils
							.getMobElements(
									testCase,
									"xpath",
									"//*[contains(@name,'Saturday - Sunday_') and contains(@label,'TimeScheduleLabel')]");

					String expectedPeriod;
					if (Integer
							.parseInt(inputs
									.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE)) <= 4) {
						schedule_period_time = weekdayschedule_period_title;
						expectedPeriod = "Monday - Friday_";
						for (int i = 1; i <= schedule_period_time.size(); i++) {
							String temp = MobileUtils.getMobElement(testCase,
									"name", expectedPeriod + i).getAttribute(
									"name");
							temp = temp.split("_")[1];
							if (temp.equalsIgnoreCase(inputs
									.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
								expectedPeriodTime = schedule_period_time
										.get(i).getAttribute("value");
								try {
									schedule_period_time.get(i).click();
									break;
								} catch (Exception e) {
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Failed to click on Period-"
													+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
													+ " Error message: "
													+ e.getMessage());
								}
							}
						}
					} else {
						schedule_period_time = weekendschedule_period_title;
						expectedPeriod = "Saturday - Sunday_";
						for (int i = 1; i <= schedule_period_time.size(); i++) {
							String temp = MobileUtils.getMobElement(testCase,
									"name", expectedPeriod + i).getAttribute(
									"name");
							temp = temp.split("_")[1];
							if (String
									.valueOf((Integer.parseInt(temp) + 4))
									.equalsIgnoreCase(
											inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
								expectedPeriodTime = schedule_period_time
										.get(i).getAttribute("value");
								try {
									schedule_period_time.get(i).click();
									break;
								} catch (Exception e) {
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Failed to click on Period-"
													+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
													+ " Error message: "
													+ e.getMessage());
								}
							}
						}
					}

				} else {
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "EverydayTime");
					for (int i = 1; i <= schedule_period_time.size(); i++) {
						String temp = MobileUtils.getMobElement(testCase,
								"name", "Everyday_" + i).getAttribute("name");
						temp = temp.split("_")[1];
						if (temp.equalsIgnoreCase(inputs
								.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = schedule_period_time.get(i)
									.getAttribute("value");
							try {
								schedule_period_time.get(i).click();
								break;
							} catch (Exception e) {
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to click on Period-"
												+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
												+ " Error message: "
												+ e.getMessage());
							}
						}
					}
				}
			} else {
				schedule_period_time = MobileUtils.getMobElements(fieldObjects,
						testCase, "EverydayTime");
				for (int i = 1; i <= schedule_period_time.size(); i++) {
					String temp = MobileUtils.getMobElement(testCase, "name",
							"Everyday_" + i).getAttribute("name");
					temp = temp.split("_")[1];
					if (temp.equalsIgnoreCase(inputs
							.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
						expectedPeriodTime = schedule_period_time.get(i)
								.getAttribute("value");
						try {
							schedule_period_time.get(i).click();
							break;
						} catch (Exception e) {
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to click on Period-"
											+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
											+ " Error message: "
											+ e.getMessage());
						}
					}
				}
			}
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@text='When do you want the temperature to change?']",
					testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Period edit screen is shown: When do you want the temperature to change?");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Period edit screen is not shown");
			}
		} else {
			if (MobileUtils
					.isMobElementExists(
							"XPATH",
							"//UIAStaticText[@name='When do you want the temperature to change?']",
							testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Period edit screen is shown: When do you want the temperature to change?");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Period edit screen is not shown");
			}
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"PeriodDeleteIcon", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"PeriodDeleteIcon")) {
				flag = false;
			} else {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists("XPATH",
							"//*[@text='Delete']", testCase, 5)) {
						if (!MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='Delete']")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to find Confirm Delete button");
					}
				} else {
					if (MobileUtils.isMobElementExists("name", "DELETE",
							testCase, 5)) {
						if (!MobileUtils.clickOnElement(testCase, "name",
								"DELETE")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to find Confirm Delete button");
					}
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to find Delete icon");
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				Dimension dimensions = testCase.getMobileDriver().manage()
						.window().getSize();
				int startx = (dimensions.width * 20) / 100;
				int starty = (dimensions.height * 62) / 100;
				int endx = (dimensions.width * 22) / 100;
				int endy = (dimensions.height * 35) / 100;
				testCase.getMobileDriver().swipe(endx, endy, startx, starty,
						1000);
				// List<WebElement> weekdayschedule_period_title =
				// MobileUtils.getMobElements(testCase,"xpath","//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView");
				// List<WebElement> weekdayschedule_period_time =
				// MobileUtils.getMobElements(testCase,"xpath","//*[contains(@content-desc,'_Monday-Friday')]/android.widget.TextView[1]");
				if (Integer.parseInt(inputs
						.getInputValue(PERIOD_NUMBER_TO_DELETE)) <= 4) {
					/*
					 * for (int i = 0; i <weekdayschedule_period_title.size();
					 * i++) { if (weekdayschedule_period_title.get(i).getText()
					 * .equalsIgnoreCase(inputs.getInputValue(
					 * PERIOD_NUMBER_EMEA_TO_DELETE))) { expectedPeriodTime =
					 * weekdayschedule_period_time.get(i).getText(); try {
					 * weekdayschedule_period_title.get(i).click();
					 * Keyword.ReportStep_Pass(testCase, "Selected Period-" + (i
					 * + 1)); break; } catch (Exception e) { flag = false;
					 * Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "[SelectPeriodToDelete] Failed to select Period-" + (i +
					 * 1)); } } }
					 */
				} else {
					dimensions = testCase.getMobileDriver().manage().window()
							.getSize();
					startx = (dimensions.width * 20) / 100;
					starty = (dimensions.height * 62) / 100;
					endx = (dimensions.width * 22) / 100;
					endy = (dimensions.height * 35) / 100;
					testCase.getMobileDriver().swipe(startx, starty, endx,
							endy, 1000);
					// List<WebElement> weekendschedule_period_title =
					// MobileUtils.getMobElements(testCase,"xpath","//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView");
					// List<WebElement> weekendschedule_period_time =
					// MobileUtils.getMobElements(testCase,"xpath","//*[contains(@content-desc,'_Saturday-Sunday')]/android.widget.TextView[1]");

					/*
					 * for (int i = 0; i <weekendschedule_period_title.size();
					 * i++) { if (weekendschedule_period_title.get(i).getText()
					 * .equalsIgnoreCase(inputs.getInputValue(
					 * PERIOD_NUMBER_EMEA_TO_DELETE))) { expectedPeriodTime =
					 * weekendschedule_period_time.get(i).getText(); try {
					 * weekendschedule_period_title.get(i).click();
					 * Keyword.ReportStep_Pass(testCase, "Selected Period-" + (i
					 * + 1)); break; } catch (Exception e) { flag = false;
					 * Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "[SelectPeriodToDelete] Failed to select Period-" + (i +
					 * 1)); } } }
					 */
				}
			} else {
				schedule_period_time = MobileUtils.getMobElements(fieldObjects,
						testCase, "SchedulePeriodTime");
				for (WebElement elem : schedule_period_time) {
					if (elem.getText().equalsIgnoreCase(expectedPeriodTime)) {
						flag = false;
						deletedPeriodFlag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Deleted period still shown after Deleting");
						break;
					}
				}
			}
		} else {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {

			} else {
				schedule_period_time = MobileUtils.getMobElements(fieldObjects,
						testCase, "EverydayTime");
				for (WebElement elem : schedule_period_time) {
					if (elem.getAttribute("value").equalsIgnoreCase(
							expectedPeriodTime)) {
						flag = false;
						deletedPeriodFlag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Deleted period still shown after Deleting");
						break;
					}
				}
			}
		}
		if (deletedPeriodFlag) {
			Keyword.ReportStep_Pass(testCase, "Succesfully deleted the Period-"
					+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE));
			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("1")) {
					inputs.setInputValue(EVERYDAY_1_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_2_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_1_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_2_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_1_TIME, EVERYDAY_2_TIME);
					inputs.setInputValue(EVERYDAY_2_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_3_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_2_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_3_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_2_TIME, EVERYDAY_3_TIME);
					inputs.setInputValue(EVERYDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_TIME, EVERYDAY_4_TIME);
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("2")) {
					inputs.setInputValue(EVERYDAY_2_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_3_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_2_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_3_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_2_TIME, EVERYDAY_3_TIME);
					inputs.setInputValue(EVERYDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_TIME, EVERYDAY_4_TIME);
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("3")) {
					inputs.setInputValue(EVERYDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_COOL_SETPOINT,
							inputs.getInputValue(EVERYDAY_4_COOL_SETPOINT));
					inputs.setInputValue(EVERYDAY_3_TIME, EVERYDAY_4_TIME);
				}
			} else {

				if (inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("1")) {
					// 1, 2,3, 4
					inputs.setInputValue(WEEKDAY_1_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_2_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_1_TIME,
							inputs.getInputValue(WEEKDAY_2_TIME));
					System.out.println("1 "
							+ inputs.getInputValue(WEEKDAY_2_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_1_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_2_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_2_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_3_HEAT_SETPOINT));
					System.out.println("2 "
							+ inputs.getInputValue(WEEKDAY_3_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_2_TIME,
							inputs.getInputValue(WEEKDAY_3_TIME));
					inputs.setInputValue(WEEKDAY_2_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_3_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					System.out.println("3 "
							+ inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_TIME,
							inputs.getInputValue(WEEKDAY_4_TIME));

				} else if (inputs.getInputValue(
						JasperUtils.PERIOD_NUMBER_TO_DELETE).equalsIgnoreCase(
						"2")) {
					inputs.setInputValue(WEEKDAY_2_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_3_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_2_TIME,
							inputs.getInputValue(WEEKDAY_3_TIME));
					System.out.println("2 "
							+ inputs.getInputValue(WEEKDAY_3_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_2_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_3_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					System.out.println("3 "
							+ inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_TIME,
							inputs.getInputValue(WEEKDAY_4_TIME));
				} else if (inputs.getInputValue(
						JasperUtils.PERIOD_NUMBER_TO_DELETE).equalsIgnoreCase(
						"3")) {
					inputs.setInputValue(WEEKDAY_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					System.out.println("3 "
							+ inputs.getInputValue(WEEKDAY_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKDAY_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKDAY_3_TIME,
							inputs.getInputValue(WEEKDAY_4_TIME));
				} else if (inputs.getInputValue(
						JasperUtils.PERIOD_NUMBER_TO_DELETE).equalsIgnoreCase(
						"5")) {
					// 1, 2,3, 4
					inputs.setInputValue(WEEKEND_1_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_2_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_1_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_2_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_1_TIME,
							inputs.getInputValue(WEEKEND_2_TIME));
					System.out.println("1 "
							+ inputs.getInputValue(WEEKEND_2_HEAT_SETPOINT)
							+ " " + WEEKEND_2_TIME);
					inputs.setInputValue(WEEKEND_2_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_3_HEAT_SETPOINT));
					System.out.println("2 "
							+ inputs.getInputValue(WEEKEND_3_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_2_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_3_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_2_TIME,
							inputs.getInputValue(WEEKEND_3_TIME));
					inputs.setInputValue(WEEKEND_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					System.out.println("3 "
							+ inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_3_TIME,
							inputs.getInputValue(WEEKEND_4_TIME));
				} else if (inputs.getInputValue(
						JasperUtils.PERIOD_NUMBER_TO_DELETE).equalsIgnoreCase(
						"6")) {
					inputs.setInputValue(WEEKEND_2_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_3_HEAT_SETPOINT));
					System.out.println("2 "
							+ inputs.getInputValue(WEEKEND_3_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_2_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_3_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_2_TIME,
							inputs.getInputValue(WEEKEND_3_TIME));
					inputs.setInputValue(WEEKEND_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					System.out.println("3 "
							+ inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_3_TIME,
							inputs.getInputValue(WEEKEND_4_TIME));
				} else if (inputs.getInputValue(
						JasperUtils.PERIOD_NUMBER_TO_DELETE).equalsIgnoreCase(
						"7")) {
					System.out.println("3 "
							+ inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_3_HEAT_SETPOINT,
							inputs.getInputValue(WEEKEND_4_HEAT_SETPOINT));
					inputs.setInputValue(WEEKEND_3_COOL_SETPOINT,
							inputs.getInputValue(WEEKEND_4_COOL_SETPOINT));
					inputs.setInputValue(WEEKEND_3_TIME,
							inputs.getInputValue(WEEKEND_4_TIME));
				}

			}
		}
		return flag;
	}

	public static boolean deletePeriodNA(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true, deletedPeriodFlag = true;
		List<WebElement> schedule_period_title, schedule_period_time;
		String expectedPeriodTime = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			schedule_period_title = MobileUtils.getMobElements(fieldObjects,
					testCase, "SchedulePeriodTitle");
			schedule_period_time = MobileUtils.getMobElements(fieldObjects,
					testCase, "SchedulePeriodTime");
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				Dimension dimensions = testCase.getMobileDriver().manage()
						.window().getSize();
				int startx = (dimensions.width * 20) / 100;
				int starty = (dimensions.height * 62) / 100;
				int endx = (dimensions.width * 22) / 100;
				int endy = (dimensions.height * 35) / 100;
				testCase.getMobileDriver().swipe(endx, endy, startx, starty,
						1000);
				List<WebElement> weekdayschedule_period_title = MobileUtils
						.getMobElements(
								testCase,
								"xpath",
								"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView");
				if (Integer.parseInt(inputs
						.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE)) <= 4) {
					for (int i = 1; i <= (weekdayschedule_period_title.size()); i++) {
						if (String
								.valueOf(i)
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils
									.getMobElement(
											testCase,
											"xpath",
											"//android.widget.FrameLayout["
													+ i
													+ "]//*[contains(@content-desc,'_Monday-Friday')]/android.widget.TextView[1]")
									.getText();
							try {
								weekdayschedule_period_title.get(i - 1).click();
								Keyword.ReportStep_Pass(testCase,
										"Selected Period-" + (i));
								break;
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SelectPeriodToDelete] Failed to select Period-"
												+ (i));
							}
						}
					}
				} else {
					dimensions = testCase.getMobileDriver().manage().window()
							.getSize();
					startx = (dimensions.width * 20) / 100;
					starty = (dimensions.height * 62) / 100;
					endx = (dimensions.width * 22) / 100;
					endy = (dimensions.height * 35) / 100;
					testCase.getMobileDriver().swipe(startx, starty, endx,
							endy, 1000);
					List<WebElement> weekendschedule_period_title = MobileUtils
							.getMobElements(
									testCase,
									"xpath",
									"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView");

					for (int i = 5; i <= (weekendschedule_period_title.size() * 2); i++) {
						if (String
								.valueOf(i)
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils
									.getMobElement(
											testCase,
											"xpath",
											"//android.widget.FrameLayout["
													+ (i - 1)
													+ "]//*[contains(@content-desc,'_Saturday-Sunday')]/android.widget.TextView[1]")
									.getText();
							try {
								weekendschedule_period_title.get(i - 5).click();
								Keyword.ReportStep_Pass(testCase,
										"Selected Period-" + (i));
								break;
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SelectPeriodToDelete] Failed to select Period-"
												+ (i));
							}
						}
					}
				}

			} else {
				for (int i = 1; i <= schedule_period_title.size(); i++) {
					if (String.valueOf(i).equalsIgnoreCase(
							inputs.getInputValue(PERIOD_NUMBER_TO_DELETE))) {
						expectedPeriodTime = schedule_period_time.get(i - 1)
								.getText();
						try {
							schedule_period_title.get(i - 1).click();
							Keyword.ReportStep_Pass(
									testCase,
									"Selected Period-"
											+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE));
							break;
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SelectPeriodToDelete] Failed to select Period-"
											+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE));
						}
					}
				}
			}
		} else {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				/*
				 * List<WebElement> weekdayschedule_period_title =
				 * MobileUtils.getMobElements(testCase, "xpath",
				 * "//*[contains(@name,'Monday - Friday_') and contains(@label,'TimeScheduleLabel')]"
				 * ); List<WebElement> weekendschedule_period_title =
				 * MobileUtils.getMobElements(testCase, "xpath",
				 * "//*[contains(@name,'Saturday - Sunday_') and contains(@label,'TimeScheduleLabel')]"
				 * );
				 */

				if (Integer.parseInt(inputs
						.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE)) <= 4) {
					schedule_period_time = MobileUtils
							.getMobElements(testCase, "xpath",
									"//UIATableGroup[@name='Monday - Friday']/following-sibling::UIATableCell");
					for (int i = 1; i <= schedule_period_time.size(); i++) {
						if (String
								.valueOf(i)
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils.getMobElement(
									testCase,
									"xpath",
									"//UIATableGroup[@name='Monday - Friday']/following-sibling::UIATableCell["
											+ i + "]/UIAStaticText[2]")
									.getAttribute("value");
							try {
								schedule_period_time.get(i - 1).click();
								Keyword.ReportStep_Pass(
										testCase,
										"Selected period-"
												+ inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE));
								break;
							} catch (Exception e) {
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to click on Period-"
												+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
												+ " Error message: "
												+ e.getMessage());
							}
						}
					}
				} else {
					schedule_period_time = MobileUtils
							.getMobElements(testCase, "xpath",
									"//UIATableGroup[@name='Saturday - Sunday']/following-sibling::UIATableCell");
					for (int i = 1; i <= schedule_period_time.size(); i++) {
						if (String
								.valueOf(i + 4)
								.equalsIgnoreCase(
										inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
							expectedPeriodTime = MobileUtils.getMobElement(
									testCase,
									"xpath",
									"//UIATableGroup[@name='Saturday - Sunday']/following-sibling::UIATableCell["
											+ i + "]/UIAStaticText[2]")
									.getAttribute("value");
							try {
								schedule_period_time.get(i - 1).click();
								Keyword.ReportStep_Pass(
										testCase,
										"Selected period-"
												+ inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE));
								break;
							} catch (Exception e) {
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to click on Period-"
												+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
												+ " Error message: "
												+ e.getMessage());
							}
						}
					}
				}
			} else {
				schedule_period_time = MobileUtils
						.getMobElements(testCase, "xpath",
								"//UIATableGroup[@name='Everyday']/following-sibling::UIATableCell");
				for (int i = 1; i <= schedule_period_time.size(); i++) {
					if (String
							.valueOf(i)
							.equalsIgnoreCase(
									inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE))) {
						expectedPeriodTime = MobileUtils.getMobElement(
								testCase,
								"xpath",
								"//UIATableGroup[@name='Everyday']/following-sibling::UIATableCell["
										+ i + "]/UIAStaticText[2]")
								.getAttribute("value");
						try {
							schedule_period_time.get(i - 1).click();
							Keyword.ReportStep_Pass(
									testCase,
									"Selected period-"
											+ inputs.getInputValue(JasperUtils.PERIOD_NUMBER_TO_DELETE));
							break;
						} catch (Exception e) {
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to click on Period-"
											+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
											+ " Error message: "
											+ e.getMessage());
						}
					}
				}
			}
		}

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"PeriodDeleteIcon", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"PeriodDeleteIcon")) {
				flag = false;
			} else {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists("XPATH",
							"//*[@text='Delete']", testCase, 5)) {
						if (!MobileUtils.clickOnElement(testCase, "XPATH",
								"//*[@text='Delete']")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to find Confirm Delete button");
					}
				} else {
					if (MobileUtils.isMobElementExists("xpath",
							"//UIACollectionCell[2]/UIAButton[@name='DELETE']",
							testCase, 5)) {
						if (!MobileUtils
								.clickOnElement(testCase, "xpath",
										"//UIACollectionCell[2]/UIAButton[@name='DELETE']")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to find Confirm Delete button");
					}
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to find Delete icon");
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				// TODO

			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"SchedulePeriodTime", 5)) {
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "SchedulePeriodTime");
					for (WebElement elem : schedule_period_time) {
						if (elem.getText().equalsIgnoreCase(expectedPeriodTime)) {
							flag = false;
							deletedPeriodFlag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Deleted period still shown after Deleting");
							break;
						}
					}
				}
			}
		} else {
			if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(JasperUtils.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				// TODO
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"EverydayTime", 5)) {
					schedule_period_time = MobileUtils.getMobElements(
							fieldObjects, testCase, "EverydayTime");
					for (WebElement elem : schedule_period_time) {
						if (elem.getAttribute("value").equalsIgnoreCase(
								expectedPeriodTime)) {
							flag = false;
							deletedPeriodFlag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Deleted period still shown after Deleting");
							break;
						}
					}
				}
			}
		}
		if (deletedPeriodFlag) {
			Keyword.ReportStep_Pass(
					testCase,
					"Successfully deleted the Period-"
							+ inputs.getInputValue(PERIOD_NUMBER_TO_DELETE));
			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("1")) {
					inputs.setInputValue(EVERYDAY_WAKE_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("2")) {
					inputs.setInputValue(EVERYDAY_AWAY_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("3")) {
					inputs.setInputValue(EVERYDAY_HOME_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("4")) {
					inputs.setInputValue(EVERYDAY_SLEEP_TIME, "Tap to set");
				}
			} else {
				if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("1")) {
					inputs.setInputValue(WEEKDAY_WAKE_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("2")) {
					inputs.setInputValue(WEEKDAY_AWAY_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("3")) {
					inputs.setInputValue(WEEKDAY_HOME_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("4")) {
					inputs.setInputValue(WEEKDAY_SLEEP_TIME, "Tap to set");
				}
				if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("5")) {
					inputs.setInputValue(WEEKEND_WAKE_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("6")) {
					inputs.setInputValue(WEEKEND_AWAY_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("7")) {
					inputs.setInputValue(WEEKEND_HOME_TIME, "Tap to set");
				} else if (inputs.getInputValue(PERIOD_NUMBER_TO_DELETE)
						.equalsIgnoreCase("8")) {
					inputs.setInputValue(WEEKEND_SLEEP_TIME, "Tap to set");
				}

			}
		}
		return flag;
	}

	public static boolean endOrCancelGuideMessage(TestCases testCase,
			boolean selectEnd) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (selectEnd) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"VacationEndButton");
		} else if (!selectEnd) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"VacationCancelButton");
		}
		return flag;
	}

	public static String executeADBCommand(TestCases testCase, String cmd) {
		String output = " ";
		try {
			String[] tempArr = cmd.split(" ");
			String[] cmdArray;
			List<String> cmdList = new ArrayList<String>();
			cmdList.add(SuiteConstants.getConstantValue(
					SuiteConstantTypes.PROJECT_SPECIFIC, "LOCAL_ADB_PATH"));
			for (int i = 1; i < tempArr.length; i++) {
				cmdList.add(tempArr[i]);
			}
			cmdArray = cmdList.toArray(new String[cmdList.size()]);
			int n = tempArr.length - 1;
			String[] commandArr = new String[n];
			System.arraycopy(tempArr, 1, commandArr, 0, n);
			Runtime run = Runtime.getRuntime();
			Process pr = null;

			// pr = run.exec(new
			// String[]{"/usr/local/Cellar/android-sdk/24.4.1_1/bin/adb"},commandArr);
			pr = run.exec(cmdArray);
			BufferedReader buf = new BufferedReader(new InputStreamReader(
					pr.getInputStream()));
			String temp;
			while ((temp = buf.readLine()) != null)
				output += temp;
		} catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"IO Exception caused by " + e.getMessage());
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		return output;
	}

	public static String formatDate(TestCases testCase, String dateToFormat) {
		String formattedDate = "";
		try {
			SimpleDateFormat adbDateFormat = new SimpleDateFormat(
					"EEE MMM dd hh:mm:ss z yyyy");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			dateToFormat = dateToFormat.trim();
			Date date = adbDateFormat.parse(dateToFormat);
			formattedDate = vacationDateFormat.format(date);
		} catch (Exception e) {
			formattedDate = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Format Date : Error Occured : " + e.getMessage());
		}
		return formattedDate;
	}

	public static String getAndroidDeviceTime(TestCases testCase) {
		String time = " ";
		String cmd = "adb shell date";
		time = JasperUtils.executeADBCommand(testCase, cmd);
		return time;
	}

	// This method will return the CHIL URL based on the environment set in the
	// requirement file.
	public static String getCHILURL(TestCases testCase, TestCaseInputs inputs) {
		String chapiURL = " ";
		try {
			if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT).equals(
					"Production")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC,
						"CHAPI_URL_PRODUCTION");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("Jasper_QA")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC,
						"CHAPI_URL_JASPER_QA");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("Dogfooding")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC,
						"CHAPI_URL_DOGFOODING");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("Staging")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC,
						"CHAPI_URL_STAGING");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("CHIL Int (Azure)")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_INT");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("Chil Das(QA)")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC,
						"CHAPI_URL_CHIL_DAS_QA");
			} else if (inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT)
					.equals("Chil Das(Test)")) {
				chapiURL = SuiteConstants.getConstantValue(
						SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_DAS_TEST");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return chapiURL;
	}

	public static String getCurrentISTTime(TestCases testCase) {
		String ISTTime = " ";
		try {

			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Date date = new Date();
			vacationDateFormat.setTimeZone(TimeZone.getTimeZone("IST"));
			ISTTime = vacationDateFormat.format(date);
		} catch (Exception e) {
			ISTTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Convert Time to UTC Time : Error Occured : "
							+ e.getMessage());
		}
		return ISTTime;
	}

	public static double getCurrentSetPointInDialer(TestCases testCase) {
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "PrimaryCard");
			Thread.sleep(2000);
			WebElement dialer = MobileUtils.getMobElement(fieldObjects,
					testCase, "Dialer");
			// =========================================Get current SetPoint
			// value in Dialer============================================
			String currentThermostatTemp = "";
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				currentThermostatTemp = dialer.getAttribute("name");
				currentThermostatTemp = currentThermostatTemp.split(",")[1];
			} else {
				currentThermostatTemp = dialer.getAttribute("value");
			}
			return Double.parseDouble(currentThermostatTemp);
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : " + e.getMessage());
			return -1;
		}

	}

	public static String getCurrentUTCTime(TestCases testCase) {
		String UTCTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			ZonedDateTime zone = ZonedDateTime.now(ZoneOffset.UTC);
			UTCTime = vacationDateFormat.format(vacationDateFormat.parse(zone
					.toString()));
		} catch (Exception e) {
			UTCTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Current UTC Time : Error Occured : " + e.getMessage());
		}
		return UTCTime;
	}

	public static JSONArray getDefaultScheduleTempelate(TestCases testCase,
			TestCaseInputs inputs) {
		JSONArray tempelate = new JSONArray();
		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs
						.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return tempelate;
				}

				if (chUtil.isConnected()) {
					if (chUtil.isConnected()) {
						String chapiURL = getCHILURL(testCase, inputs);
						String url = chapiURL + "api/v2/locations/"
								+ locationID + "/DefaultScheduleTemplates";

						HttpURLConnection connection = chUtil.doGetRequest(url);

						try {

							if (connection != null) {

								BufferedReader in = new BufferedReader(
										new InputStreamReader(
												connection.getInputStream()));

								String inputLine;
								StringBuffer html = new StringBuffer();

								while (!in.ready()) {
								}

								while ((inputLine = in.readLine()) != null) {
									html.append(inputLine);
								}

								in.close();

								tempelate = new JSONArray(html.toString()
										.trim());
							} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(
										testCase,
										FailType.FRAMEWORK_CONFIGURATION,
										"Get Location Information : Location not found by name - "
												+ inputs.getInputValue("LOCATION1_NAME"));
							}

						} catch (IOException e) {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get StatLocation Information  : Error occured - "
											+ e.getMessage());
							tempelate = null;
						}
					}

				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Get Stat Information  : Unable to connect to CHAPI.");
				}

			}
		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Stat Information  : Unable to get information for Stat - "
							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
							+ " at location - "
							+ inputs.getInputValue("LOCATION1_NAME")
							+ " : Error occured - " + e.getMessage());
			tempelate = null;
		}

		return tempelate;
	}

	public static HashMap<String, String> getDefaultScheduleValues(
			TestCases testCase, TestCaseInputs inputs, String typeOfSchedule) {
		JSONArray tempelate = getDefaultScheduleTempelate(testCase, inputs);
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String jasperStatType = statInfo.getJasperDeviceType();
		JSONObject timeTempelate = tempelate.getJSONObject(0);
		JSONObject geofenceTempelate = tempelate.getJSONObject(1);
		HashMap<String, String> scheduleValues = new HashMap<String, String>();
		String time24Hours = " ";
		SimpleDateFormat hours24 = new SimpleDateFormat("HH:mm:ss");
		SimpleDateFormat hours12 = new SimpleDateFormat("hh:mm a");
		String time = " ";
		Date date = null;
		if (typeOfSchedule.equalsIgnoreCase("Time")) {
			JSONArray days = timeTempelate.getJSONObject("timedSchedule")
					.getJSONArray("days");
			for (int i = 0; i < days.length(); i++) {
				JSONObject temp = null;
				String coolTemp = "";
				String heatTemp = "";
				String period = "";
				if (days.getJSONObject(i).getString("day").equals("Monday")) {
					temp = days.getJSONObject(i);
					JSONArray periods = temp.getJSONArray("periods");
					for (int j = 0; j < periods.length(); j++) {
						if (jasperStatType.equalsIgnoreCase("NA")) {
							if (periods.getJSONObject(j)
									.getString("periodType").equals("Wake")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Wake";

							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Away")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Away";
							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Home")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Home";
							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Sleep")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Sleep";
							}
							if ((statInfo.getThermostatUnits())
									.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
								if (coolTemp.contains(".0")) {
									coolTemp = coolTemp.split("\\.")[0];
								}
								if (heatTemp.contains(".0")) {
									heatTemp = heatTemp.split("\\.")[0];
								}
							}

							scheduleValues.put("Everyday" + period + "Time",
									time);
							scheduleValues.put(
									"Everyday" + period + "CoolTemp", coolTemp);
							scheduleValues.put(
									"Everyday" + period + "HeatTemp", heatTemp);
							scheduleValues.put("Weekday" + period + "Time",
									time);
							scheduleValues.put("Weekday" + period + "CoolTemp",
									coolTemp);
							scheduleValues.put("Weekday" + period + "HeatTemp",
									heatTemp);
						} else if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (j == 0) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Wake";

							} else if (j == 1) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Away";
							} else if (j == 2) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Home";
							} else if (j == 3) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Sleep";
							}

							if (jasperStatType.toUpperCase().contains("EMEA")) {
								coolTemp = roundOffCelsiusData(
										testCase,
										JasperUtils
												.convertFromFahrenhietToCelsius(
														testCase, coolTemp));
								heatTemp = roundOffCelsiusData(
										testCase,
										JasperUtils
												.convertFromFahrenhietToCelsius(
														testCase, heatTemp));
							}
							scheduleValues.put("Everyday" + period + "Time",
									time);
							scheduleValues.put(
									"Everyday" + period + "CoolTemp", coolTemp);
							scheduleValues.put(
									"Everyday" + period + "HeatTemp", heatTemp);
							scheduleValues.put("Weekday" + period + "Time",
									time);
							scheduleValues.put("Weekday" + period + "CoolTemp",
									coolTemp);
							scheduleValues.put("Weekday" + period + "HeatTemp",
									heatTemp);
						}
					}
				} else if (days.getJSONObject(i).getString("day")
						.equals("Saturday")) {
					temp = days.getJSONObject(i);
					JSONArray periods = temp.getJSONArray("periods");
					for (int j = 0; j < periods.length(); j++) {
						if (jasperStatType.equalsIgnoreCase("NA")) {
							if (periods.getJSONObject(j)
									.getString("periodType").equals("Wake")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Wake";

							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Away")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Away";
							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Home")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Home";
							} else if (periods.getJSONObject(j)
									.getString("periodType").equals("Sleep")) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Sleep";
							}

							if ((statInfo.getThermostatUnits())
									.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
								if (coolTemp.contains(".0")) {
									coolTemp = coolTemp.split("\\.")[0];
								}
								if (heatTemp.contains(".0")) {
									heatTemp = heatTemp.split("\\.")[0];
								}
							}

							scheduleValues.put("Weekend" + period + "Time",
									time);
							scheduleValues.put("Weekend" + period + "CoolTemp",
									coolTemp);
							scheduleValues.put("Weekend" + period + "HeatTemp",
									heatTemp);
						} else {
							if (j == 0) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Wake";

							} else if (j == 1) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Away";
							} else if (j == 2) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Home";
							} else if (j == 3) {
								try {
									time24Hours = periods.getJSONObject(j)
											.getString("startTime");
									date = hours24.parse(time24Hours);
									time = hours12.format(date);
								} catch (Exception e) {
									Keyword.ReportStep_Fail_WithOut_ScreenShot(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Get Default Schedule Values : Error Occured : "
													+ e.getMessage());
								}
								coolTemp = String.valueOf(periods
										.getJSONObject(j).get("coolSetPoint"));
								heatTemp = String.valueOf(periods
										.getJSONObject(j).get("heatSetPoint"));
								period = "Sleep";
							}
							if (jasperStatType.toUpperCase().contains("EMEA")) {
								coolTemp = roundOffCelsiusData(
										testCase,
										JasperUtils
												.convertFromFahrenhietToCelsius(
														testCase, coolTemp));
								heatTemp = roundOffCelsiusData(
										testCase,
										JasperUtils
												.convertFromFahrenhietToCelsius(
														testCase, heatTemp));
							}
							scheduleValues.put("Weekend" + period + "Time",
									time);
							scheduleValues.put("Weekend" + period + "CoolTemp",
									coolTemp);
							scheduleValues.put("Weekend" + period + "HeatTemp",
									heatTemp);
						}
					}
				}
			}
		} else if (typeOfSchedule.equalsIgnoreCase("Geofence")) {
			JSONObject geofenceSchedule = geofenceTempelate
					.getJSONObject("geoFenceSchedule");
			if (jasperStatType.toUpperCase().contains("NA")) {
				if ((statInfo.getThermostatUnits())
						.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
					String temp = String.valueOf(geofenceSchedule
							.getJSONObject("homePeriod").get("coolSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceHomeCoolTemp", temp);

					temp = String.valueOf(geofenceSchedule.getJSONObject(
							"homePeriod").get("heatSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceHomeHeatTemp", temp);

					temp = String.valueOf(geofenceSchedule.getJSONObject(
							"awayPeriod").get("coolSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceAwayCoolTemp", temp);

					temp = String.valueOf(geofenceSchedule.getJSONObject(
							"awayPeriod").get("heatSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceAwayHeatTemp", temp);

					temp = String.valueOf(geofenceSchedule.getJSONObject(
							"sleepMode").get("coolSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceSleepCoolTemp", temp);

					temp = String.valueOf(geofenceSchedule.getJSONObject(
							"sleepMode").get("heatSetPoint"));
					if (temp.contains(".0")) {
						temp = temp.split("\\.")[0];
					}
					scheduleValues.put("GeofenceSleepHeatTemp", temp);
				} else {
					scheduleValues.put(
							"GeofenceHomeCoolTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"homePeriod").get("coolSetPoint")));
					scheduleValues.put(
							"GeofenceHomeHeatTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"homePeriod").get("heatSetPoint")));
					scheduleValues.put(
							"GeofenceAwayCoolTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"awayPeriod").get("coolSetPoint")));
					scheduleValues.put(
							"GeofenceAwayHeatTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"awayPeriod").get("heatSetPoint")));
					scheduleValues.put(
							"GeofenceSleepCoolTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"sleepMode").get("coolSetPoint")));
					scheduleValues.put(
							"GeofenceSleepHeatTemp",
							String.valueOf(geofenceSchedule.getJSONObject(
									"sleepMode").get("heatSetPoint")));
				}

			} else {
				scheduleValues.put(
						"GeofenceHomeCoolTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("homePeriod")
												.get("coolSetPoint")))));
				scheduleValues.put(
						"GeofenceHomeHeatTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("homePeriod")
												.get("heatSetPoint")))));
				scheduleValues.put(
						"GeofenceAwayCoolTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("awayPeriod")
												.get("coolSetPoint")))));
				scheduleValues.put(
						"GeofenceAwayHeatTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("awayPeriod")
												.get("heatSetPoint")))));
				scheduleValues.put(
						"GeofenceSleepCoolTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("sleepMode")
												.get("coolSetPoint")))));
				scheduleValues.put(
						"GeofenceSleepHeatTemp",
						roundOffCelsiusData(testCase, JasperUtils
								.convertFromFahrenhietToCelsius(testCase,
										String.valueOf(geofenceSchedule
												.getJSONObject("sleepMode")
												.get("heatSetPoint")))));
			}

			try {
				time24Hours = geofenceSchedule.getJSONObject("sleepMode")
						.getString("startTime");
				date = hours24.parse(time24Hours);
				time = hours12.format(date);
				scheduleValues.put("GeofenceSleepStartTime", time);
				time24Hours = geofenceSchedule.getJSONObject("sleepMode")
						.getString("endTime");
				date = hours24.parse(time24Hours);
				time = hours12.format(date);
				scheduleValues.put("GeofenceSleepEndTime", time);
			} catch (Exception e) {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Get Default Schedule Values : Error Occured : "
								+ e.getMessage());
			}
		}
		return scheduleValues;
	}

	public static List<String> getDeviceNames(TestCases testCase,
			TestCaseInputs inputs, String locID) {
		JSONArray jsonArray = null;
		List<String> deviceNames = new ArrayList<String>();
		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {
			if (chUtil.getConnection()) {
				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations/" + locID
							+ "/devices";
					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(
									new InputStreamReader(
											connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							jsonArray = new JSONArray(html.toString().trim());

							for (int i = 0; i < jsonArray.length(); i++) {
								String name;
								JSONObject temp = new JSONObject();
								temp = jsonArray.getJSONObject(i);
								name = temp.getString("name");
								deviceNames.add(String.valueOf(name));
							}
							return deviceNames;
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Could not establish a CHAPI connection");
							deviceNames = null;
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(
								testCase,
								FailType.FRAMEWORK_CONFIGURATION,
								"Get Location ID's  : Error occured - "
										+ e.getMessage());
						deviceNames = null;
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Get Location ID's  : Unable to connect to CHAPI.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Location ID's : Unable to get location ID's. Error occured - "
							+ e.getMessage());
			deviceNames = null;
		}
		return deviceNames;
	}

	public static String getDeviceType(TestCases testCase,
			TestCaseInputs inputs, String deviceName) {
		String deviceType = " ";
		inputs.setInputValue("LOCATION1_DEVICE1_NAME", deviceName);
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		deviceType = statInfo.getDeviceType();
		return deviceType;
	}

	public static String getIOSSimulatorTime(TestCases testCase) {
		String time = " ";
		try {
			Calendar cal = Calendar.getInstance();
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			time = vacationDateFormat.format(cal.getTime());
		} catch (Exception e) {
			time = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get IOS Simulator Time : Error Occurred : "
							+ e.getMessage());
		}
		return time;
	}

	public static List<String> getLocationIDS(TestCases testCase,
			TestCaseInputs inputs) {
		JSONArray jsonArray = null;
		List<String> locIDS = new ArrayList<String>();
		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {
			if (chUtil.getConnection()) {
				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations";
					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(
									new InputStreamReader(
											connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							jsonArray = new JSONArray(html.toString().trim());

							for (int i = 0; i < jsonArray.length(); i++) {
								long locID;
								JSONObject temp = new JSONObject();
								temp = jsonArray.getJSONObject(i);
								locID = temp.getLong("locationID");
								locIDS.add(String.valueOf(locID));
							}
							return locIDS;
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Could not establish a CHAPI connection");
							locIDS = null;
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(
								testCase,
								FailType.FRAMEWORK_CONFIGURATION,
								"Get Location ID's  : Error occured - "
										+ e.getMessage());
						locIDS = null;
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Get Location ID's  : Unable to connect to CHAPI.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Location ID's : Unable to get location ID's. Error occured - "
							+ e.getMessage());
			locIDS = null;
		}
		return locIDS;
	}

	// This method will make a GET call on CHIL to get all the location details
	// of the location specified in the inputs.
	public static JSONObject getLocationInformation(TestCases testCase,
			TestCaseInputs inputs) {
		JSONObject jsonObject = null;
		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs
						.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations/" + locationID;
					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(
									new InputStreamReader(
											connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							jsonObject = new JSONObject(html.toString().trim());

						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase,
									FailType.FRAMEWORK_CONFIGURATION,
									"Get Location Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
								FailType.FRAMEWORK_CONFIGURATION,
								"Get StatLocation Information  : Error occured - "
										+ e.getMessage());
						jsonObject = null;
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Get Location Information  : Unable to connect to CHAPI.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Location Information  : Unable to get location. Error occured - "
							+ e.getMessage());
			jsonObject = null;
		}

		return jsonObject;
	}

	public static String getLocationName(TestCases testCase,
			TestCaseInputs inputs, String locID) {
		JSONObject jsonObject = new JSONObject();
		String locName = " ";
		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {
			if (chUtil.getConnection()) {
				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations/" + locID;
					HttpURLConnection connection = chUtil.doGetRequest(url);
					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(
									new InputStreamReader(
											connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							jsonObject = new JSONObject(html.toString().trim());
							locName = jsonObject.getString("name");
							return locName;
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Could not establish a CHAPI connection");
							locName = " ";
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(
								testCase,
								FailType.FRAMEWORK_CONFIGURATION,
								"Get Location Name  : Error occured - "
										+ e.getMessage());
						locName = " ";
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Get Location Name  : Unable to connect to CHAPI.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Location Name : Unable to get location ID's. Error occured - "
							+ e.getMessage());
			locName = " ";
		}
		return locName;
	}

	public static String getRandomSetPointValueBetweenMinandMax(
			TestCases testCase, TestCaseInputs inputs, Double max, Double min) {
		Random rn = new Random();
		Double setPoint = min + (max - min) * rn.nextDouble();
		return String.valueOf(setPoint.intValue());
	}

	// This method will make a GET call on CHIL to get all the device details of
	// the location and device specified in the inputs.
	public static JSONObject getStatInformation(TestCases testCase,
			TestCaseInputs inputs) {
		JSONObject jsonObject = null;

		try (ChapiUtil chUtil = new ChapiUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs
						.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations/" + locationID;

					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(
									new InputStreamReader(
											connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							JSONObject jsonObj = new JSONObject(html.toString()
									.trim());

							JSONArray array = (JSONArray) jsonObj
									.get("devices");

							JSONObject tempJSONObject = null;

							boolean elementFound = false;

							for (int counter = 0; counter < array.length(); counter++) {
								tempJSONObject = array.getJSONObject(counter);

								if (inputs
										.getInputValue("LOCATION1_DEVICE1_NAME")
										.equalsIgnoreCase(
												tempJSONObject
														.getString("userDefinedDeviceName"))) {

									jsonObject = array.getJSONObject(counter);
									elementFound = true;
									break;
								}
							}

							if (elementFound) {
							} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(
										testCase,
										FailType.FRAMEWORK_CONFIGURATION,
										"Get Stat Information : Stat not found by name - "
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
							}
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(
									testCase,
									FailType.FRAMEWORK_CONFIGURATION,
									"Get Stat Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(
								testCase,
								FailType.FRAMEWORK_CONFIGURATION,
								"Get Stat Information  : Error occured - "
										+ e.getMessage());
						jsonObject = null;
					}

				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Get Stat Information  : Unable to connect to CHAPI.");
				}
			}
		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Get Stat Information  : Unable to get information for Stat - "
							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
							+ " at location - "
							+ inputs.getInputValue("LOCATION1_NAME")
							+ " : Error occured - " + e.getMessage());
			jsonObject = null;
		}

		return jsonObject;
	}

	public static int getTimeDiffenceInHoursBetweenFromTimeAndToTime(
			TestCases testCase) {
		int noOfHours = 0;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat date12Format;
			SimpleDateFormat date24Format;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			SimpleDateFormat displayedDateFormat = new SimpleDateFormat(
					"EEE MMM dd, yyyy");
			String fromTime = " ";
			Date displayedFromDateAndTime;
			Date displayedToDateAndTime;
			String toTime = " ";
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				date12Format = new SimpleDateFormat("hh:mm a");
				date24Format = new SimpleDateFormat("HH:mm:ss");
				List<WebElement> fromAndToTime = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToTime");
				List<WebElement> fromAndToDates = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				String displayedFromTime = fromAndToTime.get(0).getText();
				if (displayedFromTime.toUpperCase().contains("AM")
						|| displayedFromTime.toUpperCase().contains("PM")) {
					fromTime = date24Format.format(date12Format
							.parse(displayedFromTime));
				} else {
					fromTime = date24Format.format(date24Format
							.parse(displayedFromTime));
				}
				String displayedFromDate = fromAndToDates.get(0).getText();
				String fromDate = dateFormat.format(displayedDateFormat
						.parse(displayedFromDate));
				displayedFromDateAndTime = vacationDateFormat.parse(fromDate
						+ "T" + fromTime);
				String displayedToTime = fromAndToTime.get(1).getText();
				if (displayedToTime.toUpperCase().contains("AM")
						|| displayedToTime.toUpperCase().contains("PM")) {
					toTime = date24Format.format(date12Format
							.parse(displayedToTime));
				} else {
					toTime = date24Format.format(date24Format
							.parse(displayedToTime));
				}
				String displayedToDate = fromAndToDates.get(1).getText();
				String toDate = dateFormat.format(displayedDateFormat
						.parse(displayedToDate));
				displayedToDateAndTime = vacationDateFormat.parse(toDate + "T"
						+ toTime);
			} else {
				date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String fromDateAndTime = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(0).getAttribute("value");
				String toDateAndTime = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(1).getAttribute("value");
				if ((fromDateAndTime.toUpperCase().contains("AM") || fromDateAndTime
						.toUpperCase().contains("PM"))
						&& (toDateAndTime.toUpperCase().contains("AM") || toDateAndTime
								.toUpperCase().contains("PM"))) {
					displayedFromDateAndTime = date12Format
							.parse(fromDateAndTime);
					displayedToDateAndTime = date12Format.parse(toDateAndTime);
				} else {
					displayedFromDateAndTime = date24Format
							.parse(fromDateAndTime);
					displayedToDateAndTime = date24Format.parse(toDateAndTime);
				}
			}
			long dif = displayedToDateAndTime.getTime()
					- displayedFromDateAndTime.getTime();
			noOfHours = (int) (dif / (60 * 60 * 1000));
		} catch (Exception e) {
			noOfHours = -1;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Time Difference Between To and From Time : Error Occured : "
							+ e.getMessage());
		}
		return noOfHours;
	}

	public static boolean holdSetPointsPermanentlyFromAdHoc(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"AdHocStatus", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"AdHocStatus");
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"PemanentlyHoldButton");
		} else {
			flag = false;
			Keyword.ReportStep_Pass(testCase,
					"Hold Set Points From AdHoc : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	public static boolean holdSetPointsUntilFromAdHoc(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"AdHocStatus", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"AdHocStatus");
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"HoldUntilButton");
		} else {
			flag = false;
			Keyword.ReportStep_Pass(testCase,
					"Hold Set Points From AdHoc : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	public static boolean navigateToDashboard(TestCases testCase) {
		boolean flag = true;
		try {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.isMobElementExists(
								"xpath",
								"//android.widget.ImageButton[@content-desc='Global Drawer']",
								testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,
							"Navigate To Dashboard : User is already on the Dashboard");
					return flag;
				} else {
					while (!MobileUtils
							.isMobElementExists(
									"xpath",
									"//android.widget.ImageButton[@content-desc='Global Drawer']",
									testCase, 2)) {
						if (MobileUtils
								.isMobElementExists(
										"xpath",
										"//android.widget.ImageButton[@content-desc='Global Close']",
										testCase, 2)) {
							MobileUtils
									.clickOnElement(testCase, "xpath",
											"//android.widget.ImageButton[@content-desc='Global Close']");
						} else {
							if (MobileUtils
									.isMobElementExists(
											"xpath",
											"//android.widget.ImageButton[@content-desc='Navigate Up']",
											testCase, 2)) {
								MobileUtils
										.clickOnElement(testCase, "xpath",
												"//android.widget.ImageButton[@content-desc='Navigate Up']");
							}
						}
					}
				}
				if (MobileUtils
						.isMobElementExists(
								"xpath",
								"//android.widget.ImageButton[@content-desc='Global Drawer']",
								testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,
							"Navigate To Dashboard : Successfully navigated to Dashboard");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Navigate To Dashboard : Failed to navigate to Dashboard");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "menu", testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,
							"Navigate To DashBoard : User is already on Dashboard");
					return flag;
				} else {
					while (!MobileUtils.isMobElementExists("name", "menu",
							testCase, 2)) {
						if (MobileUtils.isMobElementExists("name",
								"btn close normal", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "btn close normal");
						} else if (MobileUtils.isMobElementExists("name",
								"nav bar back", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "nav bar back");
						} else if (MobileUtils.isMobElementExists("name",
								"Back", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "Back");
						}
					}
					if (MobileUtils.isMobElementExists("name", "menu",
							testCase, 2)) {
						Keyword.ReportStep_Pass(testCase,
								"Navigate To Dashboard : Successfully navigated to Dashboard");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Navigate To Dashboard : Failed to navigate to Dashboard");
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Navigate To Dashboard : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean navigateToGeofenceCenterSettings(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GeofenceManager");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"SaveCenterButton", 3)) {
			Keyword.ReportStep_Pass(
					testCase,
					"Navigate to Geofence Center Settings : App is already on the geofence center page");
			return flag;
		} else {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"GlobalDrawerButton");
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"LocationOptionOnGlobalDrawer");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"GeofenceCenterButton", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"GeofenceCenterButton");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Navigate to Geofence Center Settings : Failed to navigate to location settings");
			}
		}
		return flag;
	}

	public static boolean navigateToPrimaryCard(TestCases testCase) {
		boolean flag = true;
		Keyword.ReportStep_Pass(testCase, "Navigate To Primary Card");
		try {
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				if (MobileUtils.isMobElementExists("name",
						"icon weather normal", testCase, 2)
						|| MobileUtils.isMobElementExists("name",
								"icon notifications default", testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,
							"Navigate To Primary Card : User is already on the Primary Card or Dashboard");
					return flag;
				} else {
					int i = 0;
					while (!(MobileUtils.isMobElementExists("name",
							"icon weather normal", testCase, 2) || MobileUtils
							.isMobElementExists("name",
									"icon notifications default", testCase, 2))
							&& i < 10) {
						if (MobileUtils.isMobElementExists("name",
								"btn close normal", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "btn close normal");
						} else if (MobileUtils.isMobElementExists("name",
								"nav bar back", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "nav bar back");
						} else if (MobileUtils.isMobElementExists("name",
								"Back", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "Back");
						} else if (MobileUtils.isMobElementExists("name",
								"CANCEL", testCase, 2)) {
							flag = flag
									& MobileUtils.clickOnElement(testCase,
											"name", "CANCEL");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"icon weather normal", testCase, 2)
							|| MobileUtils.isMobElementExists("name",
									"icon notifications default", testCase, 2)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Navigate To Primary Card : Successfully navigated to Primary card or Dashboard");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Navigate To Primary Card : Failed to navigate to Primary card or Dashboard");
					}
					i++;
				}
			} else {
				if (MobileUtils
						.isMobElementExists(
								"xpath",
								"//android.widget.ImageButton[@content-desc='Global Drawer']",
								testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,
							"Navigate To Primary Card : User is already on the Primary Card");
					return flag;
				} else {
					int i = 0;
					while (!MobileUtils
							.isMobElementExists(
									"xpath",
									"//android.widget.ImageButton[@content-desc='Global Drawer']",
									testCase, 2)
							&& i < 10) {
						MobileUtils
								.clickOnElement(testCase, "xpath",
										"//android.widget.ImageButton[@content-desc='Navigate Up']");
						i++;
					}
					if (MobileUtils
							.isMobElementExists(
									"xpath",
									"//android.widget.ImageButton[@content-desc='Global Drawer']",
									testCase, 2)) {
						Keyword.ReportStep_Pass(testCase,
								"Navigate To Primary Card : Successfully navigated to Primary card");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Navigate To Primary Card : Failed to navigate to Primary Card");
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Navigate To Primary Card : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean navigateToPrimaryCardOfMultiStatLocation(
			TestCases testCase, String deviceName) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("id", "toolbar_device_name",
					testCase, 3)
					|| MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ToolbarSubtitle", 3)) {
				String toolbarSubtitleText = "";
				if (MobileUtils.isMobElementExists("id", "toolbar_device_name",
						testCase, 3)) {
					toolbarSubtitleText = MobileUtils.getMobElement(testCase,
							"id", "toolbar_device_name").getAttribute("text");
				} else if (MobileUtils.isMobElementExists(fieldObjects,
						testCase, "ToolbarSubtitle", 3)) {
					toolbarSubtitleText = MobileUtils.getMobElement(
							fieldObjects, testCase, "ToolbarSubtitle")
							.getAttribute("text");
				}

				if (toolbarSubtitleText.toUpperCase().contains("VACATION")) {
					flag = flag
							& JasperUtils.selectDeviceFromDashBoard(testCase,
									deviceName);
				} else {
					if (toolbarSubtitleText.equalsIgnoreCase(deviceName)) {
						if (MobileUtils
								.isMobElementExists(
										"xpath",
										"//android.widget.ImageButton[@content-desc='Global Close']",
										testCase, 2)) {
							Keyword.ReportStep_Pass(testCase,
									"Navigate To Primary Card : User is already on the Primary Card");
							return flag;
						} else {
							int i = 0;
							while (!MobileUtils
									.isMobElementExists(
											"xpath",
											"//android.widget.ImageButton[@content-desc='Global Close']",
											testCase, 2)
									&& i < 10) {
								flag = flag
										& MobileUtils
												.clickOnElement(testCase,
														"xpath",
														"//android.widget.ImageButton[@content-desc='Navigate Up']");
								i++;
							}
							if (MobileUtils
									.isMobElementExists(
											"xpath",
											"//android.widget.ImageButton[@content-desc='Global Close']",
											testCase, 2)) {
								Keyword.ReportStep_Pass(testCase,
										"Navigate To Primary Card : Successfully navigated to Primary card");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Navigate To Primary Card : Failed to navigate to Primary Card");
							}
						}
					} else {
						flag = flag & JasperUtils.navigateToDashboard(testCase);
						flag = flag
								& JasperUtils.selectDeviceFromDashBoard(
										testCase, deviceName);
					}
				}
			} else {

				flag = flag
						& JasperUtils.selectDeviceFromDashBoard(testCase,
								deviceName);
			}
		} else {
			String titleAndsubtitleText = MobileUtils.getMobElement(
					fieldObjects, testCase, "ToolbarSubtitle").getAttribute(
					"value");
			String[] subtitle = titleAndsubtitleText.split("_");
			if (subtitle.length == 1) {
				// Select device from Dashboard
				flag = flag
						& JasperUtils.selectDeviceFromDashBoard(testCase,
								deviceName);
			} else {
				if (subtitle[1].equalsIgnoreCase(deviceName)) {
					// Navigate to Primary Card
					flag = flag & JasperUtils.navigateToPrimaryCard(testCase);
				} else if (subtitle[1].toUpperCase().contains("VACATION")) {
					// Select device from Dashboard
					flag = flag
							& JasperUtils.selectDeviceFromDashBoard(testCase,
									deviceName);
				} else {
					// Navigate to Dashboard
					flag = flag & JasperUtils.navigateToDashboard(testCase);
					// Select device from Dashboard
					flag = flag
							& JasperUtils.selectDeviceFromDashBoard(testCase,
									deviceName);
				}
			}
		}
		return flag;
	}

	public static boolean navigateToSchedulingScreen(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		String toolbarText = "";
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ToolbarTitle", 3)) {
				toolbarText = MobileUtils.getMobElement(fieldObjects, testCase,
						"ToolbarTitle").getText();
			} else {
				flag = flag & JasperUtils.navigateToPrimaryCard(testCase);
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"ScheduleButton");
				return flag;
			}
		} else {
			toolbarText = MobileUtils.getMobElement(fieldObjects, testCase,
					"ToolbarTitle").getAttribute("value");
		}
		if ((MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ScheduleOptionsButton", 3))
				&& (toolbarText.toUpperCase().contains("SCHEDULE"))) {
			Keyword.ReportStep_Pass(testCase,
					"Navigate To Schedule Screen : Application is already on schedule screen");
			return flag;
		} else {
			flag = flag & JasperUtils.navigateToPrimaryCard(testCase);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleButton");
		}
		return flag;
	}

	public static boolean navigateToSchedulingScreenMultiStat(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if ((MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ScheduleOptionsButton", 3))
				&& (MobileUtils
						.getMobElement(fieldObjects, testCase, "ToolbarTitle")
						.getText().toUpperCase().contains("SCHEDULE"))) {
			Keyword.ReportStep_Pass(testCase,
					"Navigate To Schedule Screen : Application is already on schedule screen");
			return flag;
		} else {
			flag = flag
					& JasperUtils.navigateToPrimaryCardOfMultiStatLocation(
							testCase,
							inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleButton");
		}
		return flag;
	}

	public static boolean navigateToVacationSetPointsSettings(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"UpdateVacationSettingsText", 3)) {
			Keyword.ReportStep_Pass(
					testCase,
					"Navigate To Vacation SetPoints Settings : App is already on set point settings page");
		} else {
			flag = flag & JasperUtils.navigateToVacationSettings(testCase);
			flag = flag & JasperUtils.toggleVacationSwitch(testCase, true);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ComfortConfigButton");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils
								.clickOnElement(
										testCase,
										"xpath",
										"//android.widget.TextView[@text='"
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
												+ "']");
			} else {
				flag = flag
						& MobileUtils
								.clickOnElement(
										testCase,
										"xpath",
										"//UIAStaticText[@name='"
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
												+ "']");
			}
			flag = flag & toggleUpdateVacationSettingsSwitch(testCase, true);
		}
		return flag;
	}

	public static boolean navigateToVacationSettings(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"VacationSwitchText", 3)) {
			Keyword.ReportStep_Pass(testCase,
					"Navaigate to Vacation Settings : App is already on vaction settings page");
			return flag;
		} else {

			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"GlobalDrawerButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"VacationOptionOnGlobalDrawer", 5)) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"VacationOptionOnGlobalDrawer");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Navigate to Vacation Settings : Vacation option not available after clicking on global drawer button");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"VacationSwitchText", 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Navigate to Vacation Settings : Successfully navigated to vacation settings page");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Navigate to Vacation Settings : Failed to navigate to vacation settings page");
			}
		}
		return flag;
	}

	// This method read data from a JSON file and stores each JSONObject in the
	// file in a JSONArray.
	@SuppressWarnings("resource")
	public static JSONArray readDataFromJSONFile(String fileName) {
		BufferedReader br;
		JSONArray arr = new JSONArray();
		try {
			br = new BufferedReader(new FileReader(GlobalVariables.TestDataPath
					+ fileName));
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();
			while (line != null) {
				sb.append(line);
				sb.append(System.lineSeparator());
				line = br.readLine();
			}
			String jsonArr = sb.toString();
			arr = new JSONArray(jsonArr);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return arr;
	}

	public static boolean resumeScheduleFromAdHoc(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"AdHocStatus", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"AdHocStatus");
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ResumeScheduleButton");
		} else {
			flag = false;
			Keyword.ReportStep_Pass(testCase,
					"Resume Schedule : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	public static boolean rotateDialer(TestCases testCase,
			TestCaseInputs inputs, Double targetTemp) {
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		HashMap<String, String> setPoints = new HashMap<String, String>();
		boolean flag = true;
		double currentTemp = 0, currentNewTemp = 0;
		String systemMode = "";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			ThermostatInformation statInfo = new ThermostatInformation(
					testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo
						.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Rotate Dialer : Target Temp : " + targetTemp
								+ " is out of range" + maxSetPoint + "-"
								+ minSetPoint);
				return false;
			} else {
				try {
					WebElement dialer = MobileUtils.getMobElement(fieldObjects,
							testCase, "Dialer");
					TouchAction actions = new TouchAction(
							testCase.getMobileDriver());
					currentTemp = getCurrentSetPointInDialer(testCase);
					int startX = dialer.getLocation().getX();
					int middleX = (startX + (dialer.getSize().getWidth() / 2));
					int startY = dialer.getLocation().getY();
					int middleY = (startY + (dialer.getSize().getHeight() / 2));
					double tempMove;
					if (testCase.getPlatform().toUpperCase().contains("IOS")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("IOS_EXTRA_LARGE")) {
							tempMove = dialer.getSize().getWidth() / (9);
						} else {
							tempMove = dialer.getSize().getWidth() / (6);
						}
					} else {
						tempMove = dialer.getSize().getWidth() / (8.5);
					}
					int MoveToX = (int) tempMove;
					if (currentTemp != targetTemp) {
						if (targetTemp > currentTemp) {
							MoveToX *= -1;
						}
						while (currentTemp != targetTemp) {
							try {
								if (targetTemp > currentTemp) {
									if (MoveToX > 0) {
										MoveToX *= -1;
									}
								} else if (currentTemp > targetTemp) {
									if (MoveToX < 0) {
										MoveToX *= -1;
									}
								}
								actions.press(middleX, middleY).waitAction()
										.moveTo(MoveToX, 0).waitAction()
										.release().perform();
								Thread.sleep(1000);
								try {
									currentTemp = getCurrentSetPointInDialer(testCase);
								} catch (Exception e) {
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Error Occured : " + e.getMessage());
								}
							} catch (Exception e) {
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Rotate Dialer : Error Occured : "
												+ e.getMessage());
								flag = false;
							}
							if (!flag) {
								break;
							}
						}
					}

					currentNewTemp = getCurrentSetPointInDialer(testCase);

					if (currentNewTemp == targetTemp) {
						Keyword.ReportStep_Pass(testCase,
								"Rotate Dialer : Successfully set dialer set points to : "
										+ currentNewTemp);
						return flag;
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Rotate Dialer : Failed to set dialer set points to: "
										+ targetTemp);
					}
				} catch (NoSuchElementException e) {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Rotate Dialer : Could not locate dialer");
				}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Rotate Dialer : Error Occured : " + e.getMessage());
			flag = false;
		}
		return flag;
	}

	// This method will round off the Celsius value to the nearest 0.5
	public static String roundOffCelsiusData(TestCases testCase,
			String celsiusTemp) {
		Double temp = Double.parseDouble(celsiusTemp);
		return String.valueOf((Math.round(temp * 2) / 2.0));
	}

	public static String roundOffTimeToTheNearest10minutes(TestCases testCase,
			String time) {
		String roundOffTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(time));
			int minutes = c.get(Calendar.MINUTE);
			int mod = minutes % 10;
			int diff = 10 - mod;
			c.add(Calendar.MINUTE, diff);
			c.set(Calendar.SECOND, 0);
			roundOffTime = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			roundOffTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error Occured : " + e.getMessage());
		}
		return roundOffTime;
	}

	public static String roundOffTimeToTheNearest15minutes(TestCases testCase,
			String time) {
		String roundOffTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(time));
			int minutes = c.get(Calendar.MINUTE);
			int mod = minutes % 15;
			int diff = 15 - mod;
			c.add(Calendar.MINUTE, diff);
			c.set(Calendar.SECOND, 0);
			roundOffTime = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			roundOffTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error Occured : " + e.getMessage());
		}
		return roundOffTime;
	}

	public static boolean selectDeviceFromDashBoard(TestCases testCase,
			String deviceToBeSelected) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			if (MobileUtils.clickOnElement(testCase, "xpath",
					"//UIAStaticText[@value='" + deviceToBeSelected + "']")) {
				Keyword.ReportStep_Pass(testCase,
						"Select Device From DashBoard : Successfully selected device : "
								+ deviceToBeSelected);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Select Device From Dashboard : Failed to select device : "
								+ deviceToBeSelected);
			}
		} else {
			boolean f = false;
			List<WebElement> devices = MobileUtils.getMobElements(fieldObjects,
					testCase, "DashBoardDevices");
			for (WebElement element : devices) {
				WebElement ele = element;
				if (ele.getText().equals(deviceToBeSelected)) {
					ele.click();
					f = true;
					break;
				}
			}
			if (f) {
				Keyword.ReportStep_Pass(testCase,
						"Select Device From DashBoard : Successfully selected device : "
								+ deviceToBeSelected);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Select Device From Dashboard : Failed to select device : "
								+ deviceToBeSelected);
			}
		}
		return flag;
	}

	public static boolean selectLocationFromDashBoard(TestCases testCase,
			String locationToBeSelected) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		WebElement element = null;
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"LocationSpinner", 5)) {
			element = MobileUtils.getMobElement(fieldObjects, testCase,
					"LocationSpinner");
		}
		if (element != null) {
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				fieldObjects = MobileUtils.loadObjectFile(testCase,
						"PrimaryCard");
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"LocationAndStatNameIOS", 5)) {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"LocationAndStatNameIOS")
							.getAttribute("value").split("_")[0]
							.equalsIgnoreCase(locationToBeSelected)) {
						Keyword.ReportStep_Pass(testCase,
								"Select Location From DashBoard : User is already in location : "
										+ locationToBeSelected);
					} else {
						fieldObjects = MobileUtils.loadObjectFile(testCase,
								"HomeScreen");
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase, "LocationSpinner");

						if (MobileUtils.clickOnElement(testCase, "name",
								locationToBeSelected)) {
							Keyword.ReportStep_Pass(testCase,
									"Select Location From DashBoard : Successfully selected location : "
											+ locationToBeSelected);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Select Location From DashBoard : Failed to select location : "
											+ locationToBeSelected);
						}
					}
				}

				/*
				 * if
				 * (element.getAttribute("value").equals(locationToBeSelected))
				 * { Keyword.ReportStep_Pass(testCase,
				 * "Select Location From DashBoard : User is already in location : "
				 * + locationToBeSelected); }
				 */
			} else {
				if (element.getText().equalsIgnoreCase(locationToBeSelected)) {
					Keyword.ReportStep_Pass(testCase,
							"Select Location From DashBoard : User is already in location : "
									+ locationToBeSelected);
				} else {
					boolean f = false;
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "LocationSpinner");
					List<WebElement> locNames = MobileUtils.getMobElements(
							fieldObjects, testCase, "LocationDropDown");
					for (WebElement ele : locNames) {
						if (ele.getText()
								.equalsIgnoreCase(locationToBeSelected)) {
							ele.click();
							f = true;
							break;
						}
					}
					if (f) {
						Keyword.ReportStep_Pass(testCase,
								"Select Location From DashBoard : Successfully selected location : "
										+ locationToBeSelected);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Select Location From DashBoard : Failed to select location : "
										+ locationToBeSelected);
					}
				}
			}
		}
		return flag;
	}

	public static boolean setCoolStepper(TestCases testCase,
			TestCaseInputs inputs, String targetCoolTemp) {
		boolean flag = true;
		String coolSetPoint = "";
		WebElement coolUp = null;
		WebElement coolDown = null;
		int coolScroller = 0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			coolSetPoint = MobileUtils
					.getMobElement(fieldObjects, testCase,
							"CoolSetPointChooser")
					.findElement(By.id("scheduling_period_temp_point"))
					.getText();
			coolUp = MobileUtils.getMobElement(fieldObjects, testCase,
					"CoolSetPointChooser").findElement(
					By.id("scheduling_temp_chooser_up"));
			coolDown = MobileUtils.getMobElement(fieldObjects, testCase,
					"CoolSetPointChooser").findElement(
					By.id("scheduling_temp_chooser_down"));
		} else {
			int size = MobileUtils.getMobElements(fieldObjects, testCase,
					"CoolSetPoints").size();

			if (inputs.getInputValue(GEOFENCE_PERIOD).equalsIgnoreCase(
					GEOFENCE_AWAY)
					&& (size > 1)) {
				coolSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "CoolSetPoints")
						.get(1).getAttribute("value");
				coolUp = MobileUtils.getMobElements(fieldObjects, testCase,
						"CoolIncrement").get(1);
				coolDown = MobileUtils.getMobElements(fieldObjects, testCase,
						"CoolDecrement").get(1);
			} else {
				coolSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "CoolSetPoints").getAttribute("value");
				coolUp = MobileUtils.getMobElement(fieldObjects, testCase,
						"CoolIncrement");
				coolDown = MobileUtils.getMobElement(fieldObjects, testCase,
						"CoolDecrement");
			}
		}
		if (inputs.getInputValue(JasperUtils.UNITS).equals(
				GlobalVariables.FAHRENHEIT)) {
			Double temp = Double.parseDouble(coolSetPoint);
			coolScroller = temp.intValue() - Integer.parseInt(targetCoolTemp);
		} else {
			Double scroller = (Double.parseDouble(coolSetPoint) - Double
					.parseDouble(targetCoolTemp)) * 2;
			coolScroller = scroller.intValue();
		}
		flag = flag
				& setValueToScroller(testCase, coolScroller, coolUp, coolDown);
		return flag;
	}

	public static boolean setDateToCalendar(TestCases testCase, String date) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			try {

				WebElement displayedDate = MobileUtils.getMobElements(testCase,
						"xpath", "//android.view.View").get(1);
				String currentDate = displayedDate.getAttribute("name");
				SimpleDateFormat dateFormat = new SimpleDateFormat(
						"dd MMMMM yyyy");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				Date d1 = dateFormat.parse(currentDate);
				Calendar c1 = Calendar.getInstance();
				c1.setTime(d1);
				int displayedYear = c1.get(Calendar.YEAR);
				int displayedMonth = c1.get(Calendar.MONTH);
				String dateToSet = dateFormat.format(vacationDateFormat
						.parse(date));
				Keyword.ReportStep_Pass(testCase,
						"Set Date To Calendar : Setting date to " + dateToSet);
				Calendar c = Calendar.getInstance();
				c.setTime(vacationDateFormat.parse(date));
				int yearToSet = c.get(Calendar.YEAR);
				int monthToSet = c.get(Calendar.MONTH);
				WebElement ele = MobileUtils.getMobElement(testCase, "id",
						"animator");
				Dimension d = ele.getSize();
				Point p = ele.getLocation();
				int startx = 0;
				int starty = 0;
				int endx = 0;
				int endy = 0;
				while (yearToSet != displayedYear) {
					if (yearToSet < displayedYear) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + d.getHeight() - 20;
					} else if (yearToSet > displayedYear) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + d.getHeight() - 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + 20;
					}
					testCase.getMobileDriver().swipe(startx, starty, endx,
							endy, 2000);
					displayedDate = MobileUtils.getMobElements(testCase,
							"xpath", "//android.view.View").get(1);
					currentDate = displayedDate.getAttribute("name");
					d1 = dateFormat.parse(currentDate);
					c1 = Calendar.getInstance();
					c1.setTime(d1);
					displayedYear = c1.get(Calendar.YEAR);
					displayedMonth = c1.get(Calendar.MONTH);
				}
				while (monthToSet != displayedMonth) {
					if (monthToSet < displayedMonth) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + d.getHeight() - 20;
					} else if (monthToSet > displayedMonth) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + d.getHeight() - 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + 20;
					}
					testCase.getMobileDriver().swipe(startx, starty, endx,
							endy, 2000);
					displayedDate = MobileUtils.getMobElements(testCase,
							"xpath", "//android.view.View").get(1);
					currentDate = displayedDate.getAttribute("name");
					d1 = dateFormat.parse(currentDate);
					c1 = Calendar.getInstance();
					c1.setTime(d1);
					displayedMonth = c1.get(Calendar.MONTH);
				}
				try {
					WebElement dateToSelect = testCase
							.getMobileDriver()
							.findElement(
									By.xpath("//android.view.View[contains(@content-desc,'"
											+ dateToSet + "')]"));
					dateToSelect.click();
					Keyword.ReportStep_Pass(testCase,
							"Set Date To Calendar : Successfully set date to "
									+ dateToSet);
				} catch (NoSuchElementException e) {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Set Date To Calendar : Unable to find date in Calendar");
				}
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"OkButton");
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Set Date To Calendar : Error Occured : "
								+ e.getMessage());
			}
		}
		return flag;
	}

	public static boolean setFromAndToDate(TestCases testCase,
			String fromDateToBeSet, String toDateToBeSet) {
		boolean flag = true;
		try {
			flag = flag & JasperUtils.setFromDate(testCase, fromDateToBeSet);
			flag = flag & JasperUtils.setToDate(testCase, toDateToBeSet);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To And From Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setFromAndToDateAndTime(TestCases testCase,
			String fromDateAndTimeToBeSet, String toDateAndTimeToBeSet) {
		boolean flag = true;
		try {
			flag = flag
					& JasperUtils.setFromDateAndTime(testCase,
							fromDateAndTimeToBeSet);
			flag = flag
					& JasperUtils.setToDateAndTime(testCase,
							toDateAndTimeToBeSet);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To And From Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setFromDate(TestCases testCase, String fromDateToBeSet) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			Keyword.ReportStep_Pass(testCase, "Setting from date to : "
					+ fromDateToBeSet);
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				List<WebElement> fromAndToDates = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				WebElement fromDate = fromAndToDates.get(0);
				fromDate.click();
				flag = flag
						& JasperUtils.setDateToCalendar(testCase,
								fromDateToBeSet);
			} else {
				SimpleDateFormat dateFormat = new SimpleDateFormat(
						"EEE, MMM dd");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				String dateToBeSet = dateFormat.format(vacationDateFormat
						.parse(fromDateToBeSet));
				flag = flag
						& MobileUtils.setValueInPicker(testCase, fieldObjects,
								"DatePicker", dateToBeSet);
			}

		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set From Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setFromDateAndTime(TestCases testCase,
			String fromDateAndTime) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			try {
				MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(0).click();
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set From Date And Time : Failed to click on from date and time");
			}
		}
		flag = flag & JasperUtils.setFromDate(testCase, fromDateAndTime);
		flag = flag & JasperUtils.setFromTime(testCase, fromDateAndTime);
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			try {
				MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(0).click();
				flag = flag & true;
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set From Date And Time : Failed to click on from date and time");
			}
		}
		return flag;
	}

	public static boolean setFromTime(TestCases testCase, String time) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		Keyword.ReportStep_Pass(testCase,
				"Set From Time : Setting from time to " + time);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			List<WebElement> fromAndToTime = MobileUtils.getMobElements(
					fieldObjects, testCase, "FromAndToTime");
			WebElement fromTime = fromAndToTime.get(0);
			fromTime.click();
		}
		flag = flag & JasperUtils.setVacationTime(testCase, time);
		return flag;
	}

	public static boolean setGeofenceSchedulePeriodSetPoints(
			TestCases testCase, TestCaseInputs inputs,
			HashMap<String, String> targetSetPoints,
			boolean validateMinMaxSetPoints) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		String coolTemp = " ";
		String heatTemp = " ";
		try {
			if (validateMinMaxSetPoints) {
				HashMap<String, String> minMaxSetPoints = statInfo
						.getDeviceMaxMinSetPoints();
				if (allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp, targetHeatTemp;
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							targetHeatTemp = temp.intValue();
							targetCoolTemp += 1;
							targetHeatTemp += 1;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 1));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT,
										String.valueOf(targetCoolTemp - 1));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 1));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT,
										String.valueOf(targetCoolTemp - 1));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 1));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT,
										String.valueOf(targetCoolTemp - 1));
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							targetCoolTemp -= 1;
							targetHeatTemp -= 1;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 1));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT,
										String.valueOf(targetCoolTemp + 1));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 1));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT,
										String.valueOf(targetCoolTemp + 1));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 1));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT,
										String.valueOf(targetCoolTemp + 1));
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT,
										String.valueOf(targetCoolTemp));
							}
						} else {
							HashMap<String, String> targetHeatCoolPoints = new HashMap<String, String>();
							// Double maxHeat =
							// Double.parseDouble(statInfo.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, minCool, minHeat);
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_HOME_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_HOME_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_AWAY_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_AWAY_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_COOL_SETPOINT));
							}
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetHeatCoolPoints, false);
						}
					} else {
						Double targetCoolTemp = Double
								.parseDouble(minMaxSetPoints.get("MaxCool"));
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints.get("MaxHeat"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp += 0.5;
							targetHeatTemp += 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetHeatTemp = Double.parseDouble(targetSetPoints
									.get("MaxHeat"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetHeatTemp = Double.parseDouble(targetSetPoints
									.get("MinHeat"));
							targetCoolTemp -= 0.5;
							targetHeatTemp -= 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetHeatTemp = Double.parseDouble(targetSetPoints
									.get("MinHeat"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
						} else {
							HashMap<String, String> targetHeatCoolPoints = new HashMap<String, String>();
							Double maxHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxHeat, minHeat);
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_HOME_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_HOME_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_AWAY_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_AWAY_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT, heatTemp);
								targetHeatCoolPoints
										.put("targetHeatTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_HEAT_SETPOINT));
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT, coolTemp);
								targetHeatCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_COOL_SETPOINT));
							}
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetHeatCoolPoints, false);
						}
					}
				} else if (!allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp;
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp = temp.intValue();
							targetCoolTemp += 1;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							targetCoolTemp -= 1;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
						} else {
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							HashMap<String, String> targetCoolPoints = new HashMap<String, String>();
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_HOME_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_AWAY_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_COOL_SETPOINT));
							}
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetCoolPoints, false);
						}
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp += 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MaxCool"));
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MinCool"));
							targetCoolTemp -= 0.5;
							heatTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MinCool"));
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
						} else {
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							HashMap<String, String> targetCoolPoints = new HashMap<String, String>();
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_HOME_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_AWAY_COOL_SETPOINT));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_COOL_SETPOINT, coolTemp);
								targetCoolPoints
										.put("targetCoolTemp",
												inputs.getInputValue(GEOFENCE_SLEEP_COOL_SETPOINT));
							}
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetCoolPoints, false);
						}
					}
				} else if (allowedModes.contains("Heat")
						&& !allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxHeat"));
						int targetHeatTemp = temp.intValue();
						targetHeatTemp += 1;

						heatTemp = String.valueOf(targetHeatTemp);
						flag = flag
								& setHeatStepper(testCase, inputs, heatTemp);
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "AboveMaximum");

						temp = Double.parseDouble(minMaxSetPoints
								.get("MaxHeat"));
						targetHeatTemp = temp.intValue();
						heatTemp = String.valueOf(targetHeatTemp);
						flag = flag
								& setHeatStepper(testCase, inputs, heatTemp);
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "Maximum");

						temp = Double.parseDouble(minMaxSetPoints
								.get("MinHeat"));
						targetHeatTemp = temp.intValue();
						targetHeatTemp -= 1;
						heatTemp = String.valueOf(targetHeatTemp);
						flag = flag
								& setHeatStepper(testCase, inputs, heatTemp);
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "BelowMinimum");

						temp = Double.parseDouble(minMaxSetPoints
								.get("MinHeat"));
						targetHeatTemp = temp.intValue();
						heatTemp = String.valueOf(targetHeatTemp);
						flag = flag
								& setHeatStepper(testCase, inputs, heatTemp);
						flag = flag
								& verifyHeatStepperValue(testCase, inputs,
										heatTemp, "Minimum");

					} else {
						Double targetHeatTemp = Double.parseDouble(statInfo
								.getDeviceMaxMinSetPoints().get("MaxHeat"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetHeatTemp += 0.5;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 0.5));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 0.5));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp - 0.5));
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetHeatTemp = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT, heatTemp);
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT, heatTemp);
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT, heatTemp);
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetHeatTemp = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							targetHeatTemp -= 0.5;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 0.5));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 0.5));
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT,
										String.valueOf(targetHeatTemp + 0.5));
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetHeatTemp = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
							if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_HOME)) {
								inputs.setInputValue(
										GEOFENCE_HOME_HEAT_SETPOINT, heatTemp);
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_AWAY)) {
								inputs.setInputValue(
										GEOFENCE_AWAY_HEAT_SETPOINT, heatTemp);
							} else if (inputs.getInputValue(GEOFENCE_PERIOD)
									.equalsIgnoreCase(GEOFENCE_SLEEP)) {
								inputs.setInputValue(
										GEOFENCE_SLEEP_HEAT_SETPOINT, heatTemp);
							}
						} else {
							if (inputs.getInputValue(TYPE_OF_SCHEDULE)
									.equalsIgnoreCase(GEOFENCE_BASED_SCHEDULE)) {
								HashMap<String, String> targetHeatPoints = new HashMap<String, String>();
								Double maxHeat = Double.parseDouble(statInfo
										.getDeviceMaxMinSetPoints().get(
												"MaxHeat"));
								Double minHeat = Double.parseDouble(statInfo
										.getDeviceMaxMinSetPoints().get(
												"MinHeat"));
								heatTemp = JasperUtils
										.getRandomSetPointValueBetweenMinandMax(
												testCase, inputs, maxHeat,
												minHeat);
								String tempGeofencePeriod = "";
								if (inputs.getInputValue(GEOFENCE_PERIOD)
										.equalsIgnoreCase(GEOFENCE_HOME)) {
									inputs.setInputValue(
											GEOFENCE_HOME_HEAT_SETPOINT,
											heatTemp);
									targetHeatPoints
											.put("targetHeatTemp",
													inputs.getInputValue(GEOFENCE_HOME_HEAT_SETPOINT));
									tempGeofencePeriod = "Home";
								} else if (inputs
										.getInputValue(GEOFENCE_PERIOD)
										.equalsIgnoreCase(GEOFENCE_AWAY)) {
									inputs.setInputValue(
											GEOFENCE_AWAY_HEAT_SETPOINT,
											heatTemp);
									targetHeatPoints
											.put("targetHeatTemp",
													inputs.getInputValue(GEOFENCE_AWAY_HEAT_SETPOINT));
									tempGeofencePeriod = "Away";
								} else if (inputs
										.getInputValue(GEOFENCE_PERIOD)
										.equalsIgnoreCase(GEOFENCE_SLEEP)) {
									inputs.setInputValue(
											GEOFENCE_SLEEP_HEAT_SETPOINT,
											heatTemp);
									targetHeatPoints
											.put("targetHeatTemp",
													inputs.getInputValue(GEOFENCE_SLEEP_HEAT_SETPOINT));
									tempGeofencePeriod = "Sleep";
								}
								flag = flag
										& JasperUtils
												.setGeofenceSchedulePeriodSetPoints(
														testCase, inputs,
														tempGeofencePeriod,
														targetHeatPoints);
							}
						}
					}
				}
			} else {
				if (allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp = Integer.parseInt(targetSetPoints
								.get("targetCoolTemp"));
						int targetHeatTemp = Integer.parseInt(targetSetPoints
								.get("targetHeatTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
						heatTemp = String.valueOf(targetHeatTemp);
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
						heatTemp = String.valueOf(targetHeatTemp);
					}
					flag = flag & setCoolStepper(testCase, inputs, coolTemp);
					flag = flag
							& verifyCoolStepperValue(testCase, inputs,
									coolTemp, "");
					flag = flag & setHeatStepper(testCase, inputs, heatTemp);
					flag = flag
							& verifyHeatStepperValue(testCase, inputs,
									heatTemp, "");
				} else if (allowedModes.contains("Heat")
						&& !allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetHeatTemp = Integer.parseInt(targetSetPoints
								.get("targetHeatTemp"));
						heatTemp = String.valueOf(targetHeatTemp);
					} else {
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						heatTemp = String.valueOf(targetHeatTemp);
					}
					flag = flag & setHeatStepper(testCase, inputs, heatTemp);
					flag = flag
							& verifyHeatStepperValue(testCase, inputs,
									heatTemp, "");
				} else if (!allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp = Integer.parseInt(targetSetPoints
								.get("targetCoolTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
					}
					flag = flag & setCoolStepper(testCase, inputs, coolTemp);
					flag = flag
							& verifyCoolStepperValue(testCase, inputs,
									coolTemp, "");
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Set Schedule Period Set Points : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean setGeofenceSchedulePeriodSetPoints(
			TestCases testCase, TestCaseInputs inputs, String periodName,
			HashMap<String, String> targetSetPoints) {
		boolean flag = true;
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			flag = flag
					& JasperUtils.setTimeSchedulePeriodSetPoints(testCase,
							inputs, targetSetPoints, false);
		} else {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "ScheduleScreen");
			try {
				ThermostatInformation statInfo = new ThermostatInformation(
						testCase, inputs);
				List<String> allowedModes = statInfo.getAllowedModes();
				String coolSetPoint = " ";
				String heatSetPoint = " ";
				WebElement coolUp = null;
				WebElement heatUp = null;
				WebElement coolDown = null;
				WebElement heatDown = null;
				int coolScroller = 0;
				int heatScroller = 0;
				int size = 0;

				if (allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					String coolTemp = " ";
					String heatTemp = " ";
					if (periodName.equals("Home") || periodName.equals("Sleep")) {
						flag = flag
								& JasperUtils.setTimeSchedulePeriodSetPoints(
										testCase, inputs, targetSetPoints,
										false);
						return flag;
					} else if (periodName.equals("Away")) {
						size = MobileUtils.getMobElements(fieldObjects,
								testCase, "CoolSetPoints").size();
						if (size > 1) {
							coolSetPoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"CoolSetPoints").get(1)
									.getAttribute("value");
							heatSetPoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"HeatSetPoints").get(1)
									.getAttribute("value");
							coolUp = MobileUtils.getMobElements(fieldObjects,
									testCase, "CoolIncrement").get(1);
							coolDown = MobileUtils.getMobElements(fieldObjects,
									testCase, "CoolDecrement").get(1);
							heatUp = MobileUtils.getMobElements(fieldObjects,
									testCase, "HeatIncrement").get(1);
							heatDown = MobileUtils.getMobElements(fieldObjects,
									testCase, "HeatDecrement").get(1);

						} else {
							coolSetPoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"CoolSetPoints").get(0)
									.getAttribute("value");
							heatSetPoint = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"HeatSetPoints").get(0)
									.getAttribute("value");
							coolUp = MobileUtils.getMobElements(fieldObjects,
									testCase, "CoolIncrement").get(0);
							coolDown = MobileUtils.getMobElements(fieldObjects,
									testCase, "CoolDecrement").get(0);
							heatUp = MobileUtils.getMobElements(fieldObjects,
									testCase, "HeatIncrement").get(0);
							heatDown = MobileUtils.getMobElements(fieldObjects,
									testCase, "HeatDecrement").get(0);
						}
					}

					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp = Integer.parseInt(targetSetPoints
								.get("targetCoolTemp"));
						int targetHeatTemp = Integer.parseInt(targetSetPoints
								.get("targetHeatTemp"));

						Double temp = Double.parseDouble(coolSetPoint);
						coolScroller = temp.intValue() - targetCoolTemp;
						temp = Double.parseDouble(heatSetPoint);
						heatScroller = temp.intValue() - targetHeatTemp;
						coolTemp = String.valueOf(targetCoolTemp);
						heatTemp = String.valueOf(targetHeatTemp);
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						Double scroller = (Double.parseDouble(coolSetPoint) - targetCoolTemp) * 2;
						coolScroller = scroller.intValue();
						scroller = (Double.parseDouble(heatSetPoint) - targetHeatTemp) * 2;
						heatScroller = scroller.intValue();
						coolTemp = String.valueOf(targetCoolTemp);
						heatTemp = String.valueOf(targetHeatTemp);
					}

					if (coolScroller < 0) {
						coolScroller *= -1;
						for (int j = 0; j < coolScroller; j++) {
							TouchAction t1 = new TouchAction(
									testCase.getMobileDriver());
							t1.tap(coolUp.getLocation().getX() + 20,
									heatUp.getLocation().getY() + 20).perform();
						}
					} else if (coolScroller > 0) {
						for (int j = 0; j < coolScroller; j++) {
							coolDown.click();
						}
					}
					size = MobileUtils.getMobElements(fieldObjects, testCase,
							"CoolSetPoints").size();
					if (periodName.equals("Away") && (size > 1)) {
						coolSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"CoolSetPoints").get(1)
								.getAttribute("value");
					} else {
						coolSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"CoolSetPoints").get(0)
								.getAttribute("value");
					}
					flag = flag
							& verifyCoolStepperValue(testCase, inputs,
									coolTemp, "");
					if (heatScroller < 0) {
						heatScroller *= -1;
						for (int j = 0; j < heatScroller; j++) {
							TouchAction t1 = new TouchAction(
									testCase.getMobileDriver());
							t1.tap(heatUp.getLocation().getX() + 20,
									heatUp.getLocation().getY() + 20).perform();
						}
					} else if (heatScroller > 0) {
						for (int j = 0; j < heatScroller; j++) {
							heatDown.click();
						}
					}
					size = MobileUtils.getMobElements(fieldObjects, testCase,
							"HeatSetPoints").size();
					if (periodName.equals("Away") && (size > 1)) {
						heatSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HeatSetPoints").get(1)
								.getAttribute("value");
					} else {
						heatSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HeatSetPoints").get(0)
								.getAttribute("value");
					}
					flag = flag
							& verifyHeatStepperValue(testCase, inputs,
									heatTemp, "");
				}

				else if (allowedModes.contains("Heat")
						&& !allowedModes.contains("Cool")) {
					String heatTemp = " ";
					size = MobileUtils.getMobElements(fieldObjects, testCase,
							"HeatSetPoints").size();

					if (periodName.equalsIgnoreCase("Away") && (size > 1)) {
						heatSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HeatSetPoints").get(1)
								.getAttribute("value");
					} else {
						heatSetPoint = MobileUtils.getMobElement(fieldObjects,
								testCase, "HeatSetPoints")
								.getAttribute("value");
					}
					heatUp = MobileUtils.getMobElement(fieldObjects, testCase,
							"HeatIncrement");
					heatDown = MobileUtils.getMobElement(fieldObjects,
							testCase, "HeatDecrement");

					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetHeatTemp = Integer.parseInt(targetSetPoints
								.get("targetHeatTemp"));
						Double temp = Double.parseDouble(heatSetPoint);
						heatScroller = temp.intValue() - targetHeatTemp;
						heatTemp = String.valueOf(targetHeatTemp);
					} else {
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						Double scroller = (Double.parseDouble(heatSetPoint) - targetHeatTemp) * 2;
						heatScroller = scroller.intValue();
						heatTemp = String.valueOf(targetHeatTemp);
					}

					if (heatScroller < 0) {
						heatScroller *= -1;
						for (int j = 0; j < heatScroller; j++) {

							TouchAction t1 = new TouchAction(
									testCase.getMobileDriver());
							t1.tap(heatUp.getLocation().getX() + 20,
									heatUp.getLocation().getY() + 20).perform();

						}
					} else if (heatScroller > 0) {
						for (int j = 0; j < heatScroller; j++) {
							heatDown.click();
						}
					}

					if (periodName.equalsIgnoreCase("Away") && (size > 1)) {
						heatSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HeatSetPoints").get(1)
								.getAttribute("value");
					} else {
						heatSetPoint = MobileUtils.getMobElement(fieldObjects,
								testCase, "HeatSetPoints")
								.getAttribute("value");
					}

					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double temp = Double.parseDouble(heatSetPoint);
						heatSetPoint = String.valueOf(temp.intValue());
					}
					if (heatSetPoint.equals(heatTemp)) {
						Keyword.ReportStep_Pass(testCase,
								"Set Schedule Period Set Points : Heat Set Point Successfully set to : "
										+ heatSetPoint);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Schedule Period Set Points : Failed to set heat set point to : "
										+ heatTemp);
					}
				} else if (!allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					String coolTemp = " ";
					size = MobileUtils.getMobElements(fieldObjects, testCase,
							"CoolSetPoints").size();
					if (periodName.equalsIgnoreCase("Away") && (size > 1)) {
						coolSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"CoolSetPoints").get(1)
								.getAttribute("value");
					} else {
						coolSetPoint = MobileUtils.getMobElement(fieldObjects,
								testCase, "CoolSetPoints")
								.getAttribute("value");
					}
					coolUp = MobileUtils.getMobElement(fieldObjects, testCase,
							"CoolIncrement");
					coolDown = MobileUtils.getMobElement(fieldObjects,
							testCase, "CoolDecrement");

					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp = Integer.parseInt(targetSetPoints
								.get("targetCoolTemp"));
						Double temp = Double.parseDouble(coolSetPoint);
						coolScroller = temp.intValue() - targetCoolTemp;
						coolTemp = String.valueOf(targetCoolTemp);
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						Double scroller = (Double.parseDouble(heatSetPoint) - targetCoolTemp) * 2;
						coolScroller = scroller.intValue();
						coolTemp = String.valueOf(targetCoolTemp);
					}
					if (coolScroller < 0) {
						coolScroller *= -1;
						for (int j = 0; j < coolScroller; j++) {

							TouchAction t1 = new TouchAction(
									testCase.getMobileDriver());
							t1.tap(coolUp.getLocation().getX() + 20,
									coolUp.getLocation().getY() + 20).perform();

						}
					} else if (coolScroller > 0) {
						for (int j = 0; j < coolScroller; j++) {
							coolDown.click();
						}
					}

					if (periodName.equalsIgnoreCase("Away") && (size > 1)) {
						coolSetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"CoolSetPoints").get(1)
								.getAttribute("value");
					} else {
						coolSetPoint = MobileUtils.getMobElement(fieldObjects,
								testCase, "CoolSetPoints")
								.getAttribute("value");
					}

					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double temp = Double.parseDouble(coolSetPoint);
						coolSetPoint = String.valueOf(temp.intValue());
					}
					if (coolSetPoint.equals(coolTemp)) {
						Keyword.ReportStep_Pass(testCase,
								"Set Schedule Period Set Points : Cool Set Point Successfully set to : "
										+ coolSetPoint);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Schedule Period Set Points : Failed to set cool set point to : "
										+ coolTemp);
					}
				}

			}

			catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Set Schedule Period Set Points : Error Occured : "
								+ e.getMessage());
			}
		}
		return flag;
	}

	public static boolean setHeatStepper(TestCases testCase,
			TestCaseInputs inputs, String targetHeatTemp) {
		boolean flag = true;
		String heatSetPoint = " ";
		WebElement heatUp = null;
		WebElement heatDown = null;
		int heatScroller = 0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			heatSetPoint = MobileUtils
					.getMobElement(fieldObjects, testCase,
							"HeatSetPointChooser")
					.findElement(By.id("scheduling_period_temp_point"))
					.getText();
			heatUp = MobileUtils.getMobElement(fieldObjects, testCase,
					"HeatSetPointChooser").findElement(
					By.id("scheduling_temp_chooser_up"));
			heatDown = MobileUtils.getMobElement(fieldObjects, testCase,
					"HeatSetPointChooser").findElement(
					By.id("scheduling_temp_chooser_down"));
		} else {
			int size = MobileUtils.getMobElements(fieldObjects, testCase,
					"HeatSetPoints").size();
			if (inputs.getInputValue(GEOFENCE_PERIOD).equalsIgnoreCase(
					GEOFENCE_AWAY)
					&& (size > 1)) {
				heatSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "HeatSetPoints")
						.get(1).getAttribute("value");
				heatUp = MobileUtils.getMobElements(fieldObjects, testCase,
						"HeatIncrement").get(1);
				heatDown = MobileUtils.getMobElements(fieldObjects, testCase,
						"HeatDecrement").get(1);
			} else {
				heatSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "HeatSetPoints").getAttribute("value");
				heatUp = MobileUtils.getMobElement(fieldObjects, testCase,
						"HeatIncrement");
				heatDown = MobileUtils.getMobElement(fieldObjects, testCase,
						"HeatDecrement");
			}
		}
		if (inputs.getInputValue(JasperUtils.UNITS).equals(
				GlobalVariables.FAHRENHEIT)) {
			Double temp = Double.parseDouble(heatSetPoint);
			heatScroller = temp.intValue() - Integer.parseInt(targetHeatTemp);
		} else {
			Double scroller = (Double.parseDouble(heatSetPoint) - Double
					.parseDouble(targetHeatTemp)) * 2;
			heatScroller = scroller.intValue();
		}
		flag = flag
				& setValueToScroller(testCase, heatScroller, heatUp, heatDown);
		return flag;
	}

	public static boolean setHoldUntilTime(TestCases testCase,
			TestCaseInputs inputs, String day, String timeIn12Hours) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		try {
			SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
			Date date = new Date();
			Calendar c1 = Calendar.getInstance();
			date = time12Format.parse(timeIn12Hours);
			c1.setTime(date);
			int hourToSet;
			int minutesToSet = c1.get(Calendar.MINUTE);
			String ampm = "";
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				if (minutesToSet % 10 != 0) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Set Hold Until Time : Invalid time. Please provide minutes time to the nearest 10 minutes for EMEA");
					return flag;
				}
			} else if (statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
				if (minutesToSet % 15 != 0) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Set Hold Until Time : Invalid time. Please provide minutes time to the nearest 15 minutes for NA");
					return flag;
				}
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl day to : "
								+ day);
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl time to : "
								+ timeIn12Hours);
				WebElement dayPicker = MobileUtils.getMobElement(testCase,
						"xpath", "//android.widget.NumberPicker[@index='0']");
				WebElement ele = dayPicker.findElement(By
						.id("numberpicker_input"));
				if (ele.getText().equalsIgnoreCase(day)) {
					Keyword.ReportStep_Pass(testCase,
							"Set Hold Until Time : Selected day is set to "
									+ day);
				} else {
					ele = MobileUtils
							.getMobElement(testCase, "xpath",
									"//android.widget.NumberPicker[@index='0']/android.widget.Button");
					try {
						TouchAction t1 = new TouchAction(
								testCase.getMobileDriver());
						t1.longPress(ele).perform();
						Keyword.ReportStep_Pass(testCase,
								"Set Hold Until Time : Selected day is set to "
										+ day);
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Set Hold Until Time : Failed to set day to "
										+ day + ". Error : " + e.getMessage());
					}
				}
				if (!MobileUtils.isMobElementExists("xpath",
						"//android.widget.NumberPicker[@index='3']", testCase,
						3)) {
					hourToSet = c1.get(Calendar.HOUR_OF_DAY);
				} else {
					hourToSet = c1.get(Calendar.HOUR);
					if (hourToSet == 0) {
						hourToSet = 12;
					}
				}

				WebElement hourPicker = MobileUtils.getMobElement(testCase,
						"xpath", "//android.widget.NumberPicker[@index='1']");
				int displayedHour = Integer.parseInt(hourPicker.findElement(
						By.id("numberpicker_input")).getAttribute("text"));
				WebElement minutePicker = MobileUtils.getMobElement(testCase,
						"xpath", "//android.widget.NumberPicker[@index='2']");

				WebElement buttonToTap;
				TouchAction t1 = new TouchAction(testCase.getMobileDriver());
				if (displayedHour == hourToSet) {
					Keyword.ReportStep_Pass(testCase,
							"Set Hold Until Time : Successfully set hours to : "
									+ hourToSet);
				} else if (displayedHour > hourToSet) {
					buttonToTap = MobileUtils
							.getMobElement(testCase, "xpath",
									"//android.widget.NumberPicker[@index='1']/android.widget.Button[@index='0']");
					while (displayedHour != hourToSet) {
						t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer.parseInt(hourPicker
								.findElement(By.id("numberpicker_input"))
								.getAttribute("text"));
					}
				} else if (displayedHour < hourToSet) {
					if (MobileUtils
							.isMobElementExists(
									"xpath",
									"//android.widget.NumberPicker[@index='1']/android.widget.Button[@index='1']",
									testCase, 3)) {
						buttonToTap = MobileUtils
								.getMobElement(testCase, "xpath",
										"//android.widget.NumberPicker[@index='1']/android.widget.Button[@index='1']");
						t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer.parseInt(hourPicker
								.findElement(By.id("numberpicker_input"))
								.getAttribute("text"));
					}
					buttonToTap = MobileUtils
							.getMobElement(testCase, "xpath",
									"//android.widget.NumberPicker[@index='1']/android.widget.Button[@index='2']");
					while (displayedHour != hourToSet) {
						t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer.parseInt(hourPicker
								.findElement(By.id("numberpicker_input"))
								.getAttribute("text"));
					}
				}

				int displayedMinutes = Integer.parseInt(minutePicker
						.findElement(By.id("numberpicker_input")).getAttribute(
								"text"));
				if (displayedMinutes == minutesToSet) {
					Keyword.ReportStep_Pass(testCase,
							"Set Hold Until Time : Successfully set minutes to : "
									+ minutesToSet);
				} else if (displayedMinutes > minutesToSet) {
					int count = 7;
					buttonToTap = MobileUtils
							.getMobElement(testCase, "xpath",
									"//android.widget.NumberPicker[@index='2']/android.widget.Button[@index='0']");
					while (displayedMinutes != minutesToSet) {
						t1.longPress(buttonToTap, 1).perform();
						displayedMinutes = Integer.parseInt(minutePicker
								.findElement(By.id("numberpicker_input"))
								.getAttribute("text"));
						count--;
						if (count == 0) {
							break;
						}
					}
				} else if (displayedMinutes < minutesToSet) {
					int count = 7;
					buttonToTap = MobileUtils
							.getMobElement(testCase, "xpath",
									"//android.widget.NumberPicker[@index='2']/android.widget.Button[@index='2']");
					while (displayedMinutes != minutesToSet) {
						t1.longPress(buttonToTap, 1).perform();
						displayedMinutes = Integer.parseInt(minutePicker
								.findElement(By.id("numberpicker_input"))
								.getAttribute("text"));
						count--;
						if (count == 0) {
							break;
						}
					}
				}

				if (MobileUtils.isMobElementExists("xpath",
						"//android.widget.NumberPicker[@index='3']", testCase,
						3)) {
					try {
						int temp = c1.get(Calendar.AM_PM);
						if (temp == Calendar.AM) {
							ampm = "AM";
						} else {
							ampm = "PM";
						}
						WebElement AMPMPicker = MobileUtils.getMobElement(
								testCase, "xpath",
								"//android.widget.NumberPicker[@index='3']");
						ele = AMPMPicker.findElement(By
								.id("numberpicker_input"));
						if (ele.getText().equalsIgnoreCase(ampm)) {
							Keyword.ReportStep_Pass(testCase,
									"Set Hold Until Time : AMPM is set to "
											+ ampm);
						} else {
							ele = MobileUtils
									.getMobElement(testCase, "xpath",
											"//android.widget.NumberPicker[@index='3']/android.widget.Button");
							try {
								t1.longPress(ele).perform();
								Keyword.ReportStep_Pass(testCase,
										"Set Hold Until Time : AMPM is set to "
												+ ampm);
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set Hold Until Time : Failed to set AMPM to "
												+ ampm + ". Error : "
												+ e.getMessage());
							}
						}
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE, "Error Occured : "
										+ e.getMessage());
					}
				}
			} else {
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl day to : "
								+ day);
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl time to : "
								+ timeIn12Hours);
				if (MobileUtils.isMobElementExists("xpath",
						"//UIAPickerWheel[4]", testCase, 3)) {
					hourToSet = c1.get(Calendar.HOUR);
					if (hourToSet == 0) {
						hourToSet = 12;
					}
					int temp = c1.get(Calendar.AM_PM);
					if (temp == Calendar.AM) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
				} else {
					hourToSet = c1.get(Calendar.HOUR_OF_DAY);
				}

				// flag = flag & MobileUtils.setValueToElement(testCase,
				// "xpath", "//UIAPickerWheel[1]", day);

				String currentDisplayedDay = MobileUtils.getMobElement(
						testCase, "xpath", "//UIAPickerWheel[1]").getAttribute(
						"value");
				SimpleDateFormat IOSDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				SimpleDateFormat timePickerDateFormat = new SimpleDateFormat(
						"EEE, MMM d");
				String displayedDate;
				if (currentDisplayedDay.equals("Today")) {
					String currentTime = JasperUtils
							.getIOSSimulatorTime(testCase);
					displayedDate = timePickerDateFormat.format(IOSDateFormat
							.parse(currentTime));
				} else {
					displayedDate = currentDisplayedDay;
				}
				if (!displayedDate.equalsIgnoreCase(day)) {
					WebElement dayPicker = MobileUtils.getMobElement(testCase,
							"xpath", "//UIAPickerWheel[1]");
					Point p1 = dayPicker.getLocation();
					Dimension d1 = dayPicker.getSize();
					int x = p1.getX();
					int y;
					TouchAction t1 = new TouchAction(testCase.getMobileDriver());
					if (currentDisplayedDay.equalsIgnoreCase("Today")) {
						y = p1.getY() + d1.getHeight() / 2 + 20;
					} else {
						y = p1.getY() + d1.getHeight() / 2 - 20;
					}
					t1.tap(x, y).perform();
				}
				if (MobileUtils.isMobElementExists("xpath",
						"//UIAPickerWheel[4]", testCase, 3)) {
					flag = flag
							& MobileUtils.setValueToElement(testCase, "xpath",
									"//UIAPickerWheel[4]", ampm);
				}
				flag = flag
						& MobileUtils.setValueToElement(testCase, "xpath",
								"//UIAPickerWheel[2]",
								String.valueOf(hourToSet));
				String min;
				if (minutesToSet == 0) {
					min = "00";
				} else {
					min = String.valueOf(minutesToSet);
				}
				flag = flag
						& MobileUtils.setValueToElement(testCase, "xpath",
								"//UIAPickerWheel[3]", min);
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setPeriodTime(TestCases testCase, String time,
			String locatorValueinObjectDefinition, boolean isValidTime,
			boolean verifySetPeriodTime) {
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		boolean flag = true;
		try {
			String timeToSet = " ";
			String time24hours = " ";
			String hours = time.split(":")[0];
			String minutes = time.split(":")[1].split(" ")[0];
			String ampm = time.split(":")[1].split(" ")[1];
			String invalidTime = " ";
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					locatorValueinObjectDefinition)) {
				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					if (locatorValueinObjectDefinition
							.equalsIgnoreCase("TimeChooser")) {
						/*
						 * MobileUtils.getMobElements(testCase, "NAME",
						 * "TimeSchedule_Time").get(0) .click();
						 */
						if (!MobileUtils.clickOnElement(testCase, "name",
								"Start")) {
							flag = false;
						}
					} else if (locatorValueinObjectDefinition
							.equalsIgnoreCase("TimeChooserEndTime")) {
						if (!MobileUtils.getMobElement(testCase, "NAME", "End")
								.getAttribute("value")
								.equalsIgnoreCase("false")) {
							/*
							 * MobileUtils.getMobElements(testCase, "NAME",
							 * "TimeSchedule_Time").get(1) .click();
							 */
							if (!MobileUtils.clickOnElement(testCase, "name",
									"End")) {
								flag = false;
							}
						} else {
							if (!MobileUtils.clickOnElement(testCase, "name",
									"Start")) {
								flag = false;
							}
							return flag;
						}
					} else {
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase,
										locatorValueinObjectDefinition);
					}
				} else {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									locatorValueinObjectDefinition)
							.getAttribute("enabled").equalsIgnoreCase("true")) {
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase,
										locatorValueinObjectDefinition);
					} else {
						Keyword.ReportStep_Pass(testCase,
								locatorValueinObjectDefinition + " is disabled");
						return flag;
					}
				}
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
				time24hours = date24Format.format(date12Format.parse(time));
				if (MobileUtils.isMobElementExists("id", "ampm_label",
						testCase, 3, false)
						|| MobileUtils.isMobElementExists("id", "am_label",
								testCase, 3, false)
						|| MobileUtils.isMobElementExists("id", "pm_label",
								testCase, 3, false)) {
					if (ampm.equalsIgnoreCase("AM")) {
						ampm = "A.M.";
					} else {
						ampm = "P.M.";
					}
					timeToSet = hours + ":" + minutes + ampm;
					invalidTime = hours + ":" + "25" + ampm;
				} else {
					timeToSet = time24hours;
					invalidTime = time24hours.split(":")[0] + ":25";
				}
				if (isValidTime) {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"TimePicker", 5)) {
						if (MobileUtils.setValueToElement(fieldObjects,
								testCase, "TimePicker", timeToSet)) {
							Keyword.ReportStep_Pass(testCase,
									"Set Period Time : Successfully set time "
											+ timeToSet + " to time picker");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Set Period Time : Failed to set time "
											+ timeToSet + " to time picker");
						}
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase, "OkButton");
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"TimePicker", 5)) {
						if (!MobileUtils.setValueToElement(fieldObjects,
								testCase, "TimePicker", invalidTime)) {
							Keyword.ReportStep_Pass(testCase,
									"Set Period Time : Failed to set time "
											+ invalidTime + " to time picker");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Set Period Time : Successfully set time "
											+ timeToSet + " to time picker");
						}
						if (MobileUtils.setValueToElement(fieldObjects,
								testCase, "TimePicker", timeToSet)) {
							Keyword.ReportStep_Pass(testCase,
									"Set Period Time : Successfully set time "
											+ timeToSet + " to time picker");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Set Period Time : Failed to set time "
											+ timeToSet + " to time picker");
						}
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase, "OkButton");
					}
				}
				if (verifySetPeriodTime) {
					flag = flag
							& verifySetPeriodTime(testCase, time,
									locatorValueinObjectDefinition);
				}

			} else {
				int i = Integer.parseInt(hours);
				hours = Integer.toString(i);
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"TimeHours", 5)) {
					flag = flag
							& MobileUtils.setValueInPicker(testCase,
									fieldObjects, "TimeHours", hours);
				}
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"TimeMinutes", 5)) {
					flag = flag
							& MobileUtils.setValueInPicker(testCase,
									fieldObjects, "TimeMinutes", minutes);
				}
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"TimeAMPM", 5)) {
					flag = flag
							& MobileUtils.setValueInPicker(testCase,
									fieldObjects, "TimeAMPM", ampm);
				}
				if (locatorValueinObjectDefinition
						.equalsIgnoreCase("TimeChooser")) {
					if (!MobileUtils.clickOnElement(testCase, "name", "Start")) {
						flag = false;
					}
				} else if (locatorValueinObjectDefinition
						.equalsIgnoreCase("TimeChooserEndTime")) {
					if (!MobileUtils.clickOnElement(testCase, "name", "End")) {
						flag = false;
					}
				}
				if (verifySetPeriodTime) {
					flag = flag
							& verifySetPeriodTime(testCase, time,
									locatorValueinObjectDefinition);
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set Period Time : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setTimeSchedulePeriodSetPoints(TestCases testCase,
			TestCaseInputs inputs, HashMap<String, String> targetSetPoints,
			boolean validateMinMaxSetPoints) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		String coolTemp = " ";
		String heatTemp = " ";
		try {
			if (validateMinMaxSetPoints) {
				HashMap<String, String> minMaxSetPoints = statInfo
						.getDeviceMaxMinSetPoints();
				if (allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp, targetHeatTemp;
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							targetHeatTemp = temp.intValue();
							targetCoolTemp += 1;
							targetHeatTemp += 1;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");

							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");

							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							targetCoolTemp -= 1;
							targetHeatTemp -= 1;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");

							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");

							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else {
							HashMap<String, String> setPoints = new HashMap<String, String>();
							Double maxHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxHeat, minHeat);
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							}
							setPoints.put("targetHeatTemp", heatTemp);
							setPoints.put("targetCoolTemp", coolTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													setPoints, false);
						}
					} else {
						Double targetCoolTemp = Double
								.parseDouble(minMaxSetPoints.get("MaxCool"));
						Double targetHeatTemp = Double
								.parseDouble(minMaxSetPoints.get("MaxHeat"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp += 0.5;
							targetHeatTemp += 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 0.5));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetCoolTemp -= 0.5;
							targetHeatTemp -= 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 0.5));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							coolTemp = String.valueOf(targetCoolTemp);
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else {
							Double maxHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxHeat, minHeat);
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							}
							targetSetPoints.put("targetHeatTemp", heatTemp);
							targetSetPoints.put("targetCoolTemp", coolTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetSetPoints, false);
						}
					}
				} else if (!allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetCoolTemp;
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp = temp.intValue();
							targetCoolTemp += 1;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxCool"));
							targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							targetCoolTemp -= 1;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinCool"));
							targetCoolTemp = temp.intValue();
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							}
						} else {
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							HashMap<String, String> targetCoolPoints = new HashMap<String, String>();
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
							}
							targetCoolPoints.put("targetCoolTemp", coolTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetCoolPoints, false);
						}
					} else {
						Double targetCoolTemp = Double
								.parseDouble(minMaxSetPoints.get("MaxCool"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetCoolTemp += 0.5;
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "AboveMaximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp - 0.5));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MaxCool"));
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Maximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MinCool"));
							targetCoolTemp -= 0.5;
							heatTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "BelowMinimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp + 0.5));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetCoolTemp = Double.parseDouble(targetSetPoints
									.get("MinCool"));
							coolTemp = String.valueOf(targetCoolTemp);
							flag = flag
									& setCoolStepper(testCase, inputs, coolTemp);
							flag = flag
									& verifyCoolStepperValue(testCase, inputs,
											coolTemp, "Minimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(targetCoolTemp));
								}
							}
						} else {
							Double maxCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxCool"));
							Double minCool = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinCool"));
							coolTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxCool, minCool);
							HashMap<String, String> targetCoolPoints = new HashMap<String, String>();
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_COOL_SETPOINT,
											String.valueOf(coolTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_COOL_SETPOINT,
											String.valueOf(coolTemp));
								}
							}
							targetCoolPoints.put("targetCoolTemp", coolTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetCoolPoints, false);
						}
					}
				} else if (allowedModes.contains("Heat")
						&& !allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						int targetHeatTemp;
						Double temp = Double.parseDouble(minMaxSetPoints
								.get("MaxHeat"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetHeatTemp = temp.intValue();
							targetHeatTemp += 1;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp - 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							targetHeatTemp -= 1;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp + 1));
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							temp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp = temp.intValue();
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(targetHeatTemp));
								}
							}
						} else {
							Double maxHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxHeat, minHeat);
							HashMap<String, String> targetHeatPoints = new HashMap<String, String>();
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_WAKE)) {
									inputs.setInputValue(
											EVERYDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_AWAY)) {
									inputs.setInputValue(
											EVERYDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_HOME)) {
									inputs.setInputValue(
											EVERYDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(EVERYDAY_SLEEP)) {
									inputs.setInputValue(
											EVERYDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							} else if (inputs.getInputValue(
									TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
									WEEKDAY_AND_WEEKEND_SCHEDULE)) {
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_WAKE)) {
									inputs.setInputValue(
											WEEKDAY_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_AWAY)) {
									inputs.setInputValue(
											WEEKDAY_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_HOME)) {
									inputs.setInputValue(
											WEEKDAY_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKDAY_SLEEP)) {
									inputs.setInputValue(
											WEEKDAY_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
								if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_WAKE)) {
									inputs.setInputValue(
											WEEKEND_WAKE_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_AWAY)) {
									inputs.setInputValue(
											WEEKEND_AWAY_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_HOME)) {
									inputs.setInputValue(
											WEEKEND_HOME_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								} else if (inputs.getInputValue(PERIOD_NAME_NA)
										.equalsIgnoreCase(WEEKEND_SLEEP)) {
									inputs.setInputValue(
											WEEKEND_SLEEP_HEAT_SETPOINT,
											String.valueOf(heatTemp));
								}
							}
							targetHeatPoints.put("targetHeatTemp", heatTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetHeatPoints, false);
						}
					} else {

						Double targetHeatTemp = Double
								.parseDouble(minMaxSetPoints.get("MaxHeat"));
						if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(ABOVE_MAXIMUM)) {
							targetHeatTemp += 0.5;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "AboveMaximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_1)) {
										inputs.setInputValue(
												EVERYDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_2)) {
										inputs.setInputValue(
												EVERYDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_3)) {
										inputs.setInputValue(
												EVERYDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_4)) {
										inputs.setInputValue(
												EVERYDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(EVERYDAY_WAKE)) {
										inputs.setInputValue(
												EVERYDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_AWAY)) {
										inputs.setInputValue(
												EVERYDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_HOME)) {
										inputs.setInputValue(
												EVERYDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_SLEEP)) {
										inputs.setInputValue(
												EVERYDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
								}
							} else {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("1")) {
										inputs.setInputValue(
												WEEKDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("2")) {
										inputs.setInputValue(
												WEEKDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("3")) {
										inputs.setInputValue(
												WEEKDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("4")) {
										inputs.setInputValue(
												WEEKDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("5")) {
										inputs.setInputValue(
												WEEKEND_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("6")) {
										inputs.setInputValue(
												WEEKEND_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("7")) {
										inputs.setInputValue(
												WEEKEND_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("8")) {
										inputs.setInputValue(
												WEEKEND_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKDAY_WAKE)) {
										inputs.setInputValue(
												WEEKDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_AWAY)) {
										inputs.setInputValue(
												WEEKDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_HOME)) {
										inputs.setInputValue(
												WEEKDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_SLEEP)) {
										inputs.setInputValue(
												WEEKDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKEND_WAKE)) {
										inputs.setInputValue(
												WEEKEND_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_AWAY)) {
										inputs.setInputValue(
												WEEKEND_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_HOME)) {
										inputs.setInputValue(
												WEEKEND_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_SLEEP)) {
										inputs.setInputValue(
												WEEKEND_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp - 0.5));
									}
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MAXIMUM)) {
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MaxHeat"));
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Maximum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_1)) {
										inputs.setInputValue(
												EVERYDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_2)) {
										inputs.setInputValue(
												EVERYDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_3)) {
										inputs.setInputValue(
												EVERYDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_4)) {
										inputs.setInputValue(
												EVERYDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(EVERYDAY_WAKE)) {
										inputs.setInputValue(
												EVERYDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_AWAY)) {
										inputs.setInputValue(
												EVERYDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_HOME)) {
										inputs.setInputValue(
												EVERYDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_SLEEP)) {
										inputs.setInputValue(
												EVERYDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								}
							} else {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("1")) {
										inputs.setInputValue(
												WEEKDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("2")) {
										inputs.setInputValue(
												WEEKDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("3")) {
										inputs.setInputValue(
												WEEKDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("4")) {
										inputs.setInputValue(
												WEEKDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("5")) {
										inputs.setInputValue(
												WEEKEND_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("6")) {
										inputs.setInputValue(
												WEEKEND_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("7")) {
										inputs.setInputValue(
												WEEKEND_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("8")) {
										inputs.setInputValue(
												WEEKEND_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKDAY_WAKE)) {
										inputs.setInputValue(
												WEEKDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_AWAY)) {
										inputs.setInputValue(
												WEEKDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_HOME)) {
										inputs.setInputValue(
												WEEKDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_SLEEP)) {
										inputs.setInputValue(
												WEEKDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKEND_WAKE)) {
										inputs.setInputValue(
												WEEKEND_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_AWAY)) {
										inputs.setInputValue(
												WEEKEND_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_HOME)) {
										inputs.setInputValue(
												WEEKEND_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_SLEEP)) {
										inputs.setInputValue(
												WEEKEND_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(BELOW_MINIMUM)) {
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							targetHeatTemp -= 0.5;
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "BelowMinimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_1)) {
										inputs.setInputValue(
												EVERYDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_2)) {
										inputs.setInputValue(
												EVERYDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_3)) {
										inputs.setInputValue(
												EVERYDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_4)) {
										inputs.setInputValue(
												EVERYDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(EVERYDAY_WAKE)) {
										inputs.setInputValue(
												EVERYDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_AWAY)) {
										inputs.setInputValue(
												EVERYDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_HOME)) {
										inputs.setInputValue(
												EVERYDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_SLEEP)) {
										inputs.setInputValue(
												EVERYDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
								}
							} else {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("1")) {
										inputs.setInputValue(
												WEEKDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("2")) {
										inputs.setInputValue(
												WEEKDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("3")) {
										inputs.setInputValue(
												WEEKDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("4")) {
										inputs.setInputValue(
												WEEKDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("5")) {
										inputs.setInputValue(
												WEEKEND_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("6")) {
										inputs.setInputValue(
												WEEKEND_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("7")) {
										inputs.setInputValue(
												WEEKEND_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("8")) {
										inputs.setInputValue(
												WEEKEND_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKDAY_WAKE)) {
										inputs.setInputValue(
												WEEKDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_AWAY)) {
										inputs.setInputValue(
												WEEKDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_HOME)) {
										inputs.setInputValue(
												WEEKDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_SLEEP)) {
										inputs.setInputValue(
												WEEKDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKEND_WAKE)) {
										inputs.setInputValue(
												WEEKEND_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_AWAY)) {
										inputs.setInputValue(
												WEEKEND_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_HOME)) {
										inputs.setInputValue(
												WEEKEND_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_SLEEP)) {
										inputs.setInputValue(
												WEEKEND_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp + 0.5));
									}
								}
							}
						} else if (inputs.getInputValue(SETPOINT_RANGE)
								.equalsIgnoreCase(AT_MINIMUM)) {
							targetHeatTemp = Double.parseDouble(minMaxSetPoints
									.get("MinHeat"));
							heatTemp = String.valueOf(targetHeatTemp);
							flag = flag
									& setHeatStepper(testCase, inputs, heatTemp);
							flag = flag
									& verifyHeatStepperValue(testCase, inputs,
											heatTemp, "Minimum");
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_1)) {
										inputs.setInputValue(
												EVERYDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_2)) {
										inputs.setInputValue(
												EVERYDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_3)) {
										inputs.setInputValue(
												EVERYDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_4)) {
										inputs.setInputValue(
												EVERYDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(EVERYDAY_WAKE)) {
										inputs.setInputValue(
												EVERYDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_AWAY)) {
										inputs.setInputValue(
												EVERYDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_HOME)) {
										inputs.setInputValue(
												EVERYDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_SLEEP)) {
										inputs.setInputValue(
												EVERYDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								}
							} else {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("1")) {
										inputs.setInputValue(
												WEEKDAY_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("2")) {
										inputs.setInputValue(
												WEEKDAY_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("3")) {
										inputs.setInputValue(
												WEEKDAY_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("4")) {
										inputs.setInputValue(
												WEEKDAY_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("5")) {
										inputs.setInputValue(
												WEEKEND_1_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("6")) {
										inputs.setInputValue(
												WEEKEND_2_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("7")) {
										inputs.setInputValue(
												WEEKEND_3_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("8")) {
										inputs.setInputValue(
												WEEKEND_4_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKDAY_WAKE)) {
										inputs.setInputValue(
												WEEKDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_AWAY)) {
										inputs.setInputValue(
												WEEKDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_HOME)) {
										inputs.setInputValue(
												WEEKDAY_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_SLEEP)) {
										inputs.setInputValue(
												WEEKDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKEND_WAKE)) {
										inputs.setInputValue(
												WEEKEND_WAKE_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_AWAY)) {
										inputs.setInputValue(
												WEEKEND_AWAY_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_HOME)) {
										inputs.setInputValue(
												WEEKEND_HOME_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_SLEEP)) {
										inputs.setInputValue(
												WEEKEND_SLEEP_HEAT_SETPOINT,
												String.valueOf(targetHeatTemp));
									}
								}
							}
						} else {
							Double maxHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MaxHeat"));
							Double minHeat = Double.parseDouble(statInfo
									.getDeviceMaxMinSetPoints().get("MinHeat"));
							heatTemp = JasperUtils
									.getRandomSetPointValueBetweenMinandMax(
											testCase, inputs, maxHeat, minHeat);
							HashMap<String, String> targetHeatPoints = new HashMap<String, String>();
							if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
									.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_1)) {
										inputs.setInputValue(
												EVERYDAY_1_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_2)) {
										inputs.setInputValue(
												EVERYDAY_2_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_3)) {
										inputs.setInputValue(
												EVERYDAY_3_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase(EVERYDAY_4)) {
										inputs.setInputValue(
												EVERYDAY_4_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(EVERYDAY_WAKE)) {
										inputs.setInputValue(
												EVERYDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_AWAY)) {
										inputs.setInputValue(
												EVERYDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_HOME)) {
										inputs.setInputValue(
												EVERYDAY_HOME_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											EVERYDAY_SLEEP)) {
										inputs.setInputValue(
												EVERYDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
								}
							} else {
								if (inputs.getInputValue(JASPER_STAT_TYPE)
										.equalsIgnoreCase("EMEA")) {
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("1")) {
										inputs.setInputValue(
												WEEKDAY_1_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("2")) {
										inputs.setInputValue(
												WEEKDAY_2_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("3")) {
										inputs.setInputValue(
												WEEKDAY_3_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("4")) {
										inputs.setInputValue(
												WEEKDAY_4_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
									if (inputs
											.getInputValue(PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("5")) {
										inputs.setInputValue(
												WEEKEND_1_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("6")) {
										inputs.setInputValue(
												WEEKEND_2_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("7")) {
										inputs.setInputValue(
												WEEKEND_3_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NUMBER_EMEA)
											.equalsIgnoreCase("8")) {
										inputs.setInputValue(
												WEEKEND_4_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
								} else {
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKDAY_WAKE)) {
										inputs.setInputValue(
												WEEKDAY_WAKE_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_AWAY)) {
										inputs.setInputValue(
												WEEKDAY_AWAY_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_HOME)) {
										inputs.setInputValue(
												WEEKDAY_HOME_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKDAY_SLEEP)) {
										inputs.setInputValue(
												WEEKDAY_SLEEP_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
									if (inputs.getInputValue(PERIOD_NAME_NA)
											.equalsIgnoreCase(WEEKEND_WAKE)) {
										inputs.setInputValue(
												WEEKEND_WAKE_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_AWAY)) {
										inputs.setInputValue(
												WEEKEND_AWAY_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_HOME)) {
										inputs.setInputValue(
												WEEKEND_HOME_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									} else if (inputs.getInputValue(
											PERIOD_NAME_NA).equalsIgnoreCase(
											WEEKEND_SLEEP)) {
										inputs.setInputValue(
												WEEKEND_SLEEP_HEAT_SETPOINT,
												String.valueOf(heatTemp));
									}
								}
							}
							targetHeatPoints.put("targetHeatTemp", heatTemp);
							flag = flag
									& JasperUtils
											.setTimeSchedulePeriodSetPoints(
													testCase, inputs,
													targetHeatPoints, false);
						}

					}
				}
			} else {
				if (allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						double tempCool = targetCoolTemp.doubleValue();
						int tempCoolValue = (int) tempCool;
						double tempHeat = targetHeatTemp.doubleValue();
						int tempHeatValue = (int) tempHeat;
						coolTemp = String.valueOf(Integer
								.valueOf(tempCoolValue));
						heatTemp = String.valueOf(Integer
								.valueOf(tempHeatValue));
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
						heatTemp = String.valueOf(targetHeatTemp);
					}

					/*
					 * if(statInfo.getThermostatUnits().equalsIgnoreCase(
					 * GlobalVariables.FAHRENHEIT)){
					 * if(coolTemp.contains(".0")){
					 * coolTemp=coolTemp.split("\\.")[0]; }
					 * if(heatTemp.contains(".0")){
					 * heatTemp=heatTemp.split("\\.")[0]; } }
					 */

					flag = flag & setCoolStepper(testCase, inputs, coolTemp);
					flag = flag
							& verifyCoolStepperValue(testCase, inputs,
									coolTemp, "");
					flag = flag & setHeatStepper(testCase, inputs, heatTemp);
					flag = flag
							& verifyHeatStepperValue(testCase, inputs,
									heatTemp, "");
				} else if (allowedModes.contains("Heat")
						&& !allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						double tempHeat = targetHeatTemp.doubleValue();
						int tempHeatValue = (int) tempHeat;
						heatTemp = String.valueOf(Integer
								.valueOf(tempHeatValue));
					} else {
						Double targetHeatTemp = Double
								.parseDouble(targetSetPoints
										.get("targetHeatTemp"));
						heatTemp = String.valueOf(targetHeatTemp);
					}
					/*
					 * if(heatTemp.contains(".0")){
					 * heatTemp=heatTemp.split("\\.")[0]; }
					 */
					flag = flag & setHeatStepper(testCase, inputs, heatTemp);
					flag = flag
							& verifyHeatStepperValue(testCase, inputs,
									heatTemp, "");
				} else if (!allowedModes.contains("Heat")
						&& allowedModes.contains("Cool")) {
					if (inputs.getInputValue(JasperUtils.UNITS).equals(
							GlobalVariables.FAHRENHEIT)) {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						double tempCool = targetCoolTemp.doubleValue();
						int tempCoolValue = (int) tempCool;
						coolTemp = String.valueOf(Integer
								.valueOf(tempCoolValue));
					} else {
						Double targetCoolTemp = Double
								.parseDouble(targetSetPoints
										.get("targetCoolTemp"));
						coolTemp = String.valueOf(targetCoolTemp);
					}
					/*
					 * if(coolTemp.contains(".0")){
					 * coolTemp=coolTemp.split("\\.")[0]; }
					 */
					flag = flag & setCoolStepper(testCase, inputs, coolTemp);
					flag = flag
							& verifyCoolStepperValue(testCase, inputs,
									coolTemp, "");
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Set Schedule Period Set Points : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean setTimeSchedulePeriodTimeAndSetPoints(
			TestCases testCase, TestCaseInputs inputs,
			HashMap<String, String> periodTimeandSetPoint, WebElement element) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String jasperStatType = statInfo.getJasperDeviceType();
		try {
			String elementDesc = element.getAttribute("name");
			element.click();
			Keyword.ReportStep_Pass(testCase, "Successfully click on : "
					+ elementDesc);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set Period Time and Set Points : Failed to select "
							+ periodTimeandSetPoint.get("periodName"));
			return false;
		}
		if (jasperStatType.equalsIgnoreCase("NA")) {
			flag = flag
					& JasperUtils.setPeriodTime(testCase,
							periodTimeandSetPoint.get("Time"), "TimeChooser",
							true, true);
		} else if (jasperStatType.equalsIgnoreCase("EMEA")) {
			flag = flag
					& JasperUtils.setPeriodTime(testCase,
							periodTimeandSetPoint.get("StartTime"),
							"TimeChooser", true, true);
			flag = flag
					& JasperUtils.setPeriodTime(testCase,
							periodTimeandSetPoint.get("EndTime"),
							"TimeChooserEndTime", true, true);
		}
		HashMap<String, String> targetSetPoints = new HashMap<String, String>();
		List<String> allowedModes = statInfo.getAllowedModes();
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			Keyword.ReportStep_Pass(
					testCase,
					"Set Period Set Points : Setting "
							+ periodTimeandSetPoint.get("periodName")
							+ " cool set points to "
							+ periodTimeandSetPoint.get("CoolSetPoint"));
			Keyword.ReportStep_Pass(
					testCase,
					"Set Period Set Points : Setting "
							+ periodTimeandSetPoint.get("periodName")
							+ " heat set points to "
							+ periodTimeandSetPoint.get("HeatSetPoint"));
			targetSetPoints.put("targetCoolTemp",
					periodTimeandSetPoint.get("CoolSetPoint"));
			targetSetPoints.put("targetHeatTemp",
					periodTimeandSetPoint.get("HeatSetPoint"));
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			Keyword.ReportStep_Pass(
					testCase,
					"Setting " + periodTimeandSetPoint.get("periodName")
							+ " heat set points to "
							+ periodTimeandSetPoint.get("HeatSetPoint"));
			targetSetPoints.put("targetHeatTemp",
					periodTimeandSetPoint.get("HeatSetPoint"));
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			Keyword.ReportStep_Pass(
					testCase,
					"Setting " + periodTimeandSetPoint.get("periodName")
							+ " cool set points to "
							+ periodTimeandSetPoint.get("CoolSetPoint"));
			targetSetPoints.put("targetCoolTemp",
					periodTimeandSetPoint.get("CoolSetPoint"));
		}
		flag = flag
				& JasperUtils.setTimeSchedulePeriodSetPoints(testCase, inputs,
						targetSetPoints, false);
		return flag;
	}

	public static boolean setToDate(TestCases testCase, String toDateToBeSet) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			Keyword.ReportStep_Pass(testCase, "Setting to date to : "
					+ toDateToBeSet);
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				List<WebElement> fromAndToDates = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				WebElement toDate = fromAndToDates.get(1);
				toDate.click();
				flag = flag
						& JasperUtils
								.setDateToCalendar(testCase, toDateToBeSet);
			} else {
				SimpleDateFormat dateFormat = new SimpleDateFormat(
						"EEE, MMM dd");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				String dateToBeSet = dateFormat.format(vacationDateFormat
						.parse(toDateToBeSet));
				flag = flag
						& MobileUtils.setValueInPicker(testCase, fieldObjects,
								"DatePicker", dateToBeSet);
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setToDateAndTime(TestCases testCase,
			String toDateAndTime) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			try {
				MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(1).click();
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set To Date And Time : Failed to click on To date and time");
			}
		}
		flag = flag & JasperUtils.setToDate(testCase, toDateAndTime);
		flag = flag & JasperUtils.setToTime(testCase, toDateAndTime);
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			try {
				MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(1).click();
				flag = flag & true;
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set To Date And Time : Failed to click on to date and time");
			}
		}
		return flag;
	}

	public static boolean setToTime(TestCases testCase, String time) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		Keyword.ReportStep_Pass(testCase, "Set To Time : Setting to time to "
				+ time);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			List<WebElement> fromAndToTime = MobileUtils.getMobElements(
					fieldObjects, testCase, "FromAndToTime");
			WebElement toTime = fromAndToTime.get(1);
			toTime.click();
		}
		flag = flag & JasperUtils.setVacationTime(testCase, time);
		return flag;
	}

	public static boolean setVacationSetPoints(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		String coolTemp = " ";
		String heatTemp = " ";
		try {
			inputs.setInputValue(JasperUtils.UNITS,
					statInfo.getThermostatUnits());
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				coolTemp = inputs
						.getInputValue(JasperUtils.VACATION_COOL_SETPOINTS);
				heatTemp = inputs
						.getInputValue(JasperUtils.VACATION_HEAT_SETPOINTS);
				Keyword.ReportStep_Pass(testCase,
						"Set Vacation Set Points : Setting cool set points to : "
								+ coolTemp);
				flag = flag
						& JasperUtils
								.setCoolStepper(testCase, inputs, coolTemp);
				flag = flag
						& JasperUtils.verifyCoolStepperValue(testCase, inputs,
								coolTemp, "");
				Keyword.ReportStep_Pass(testCase,
						"Set Vacation Set Points : Setting heat set points to : "
								+ heatTemp);
				flag = flag
						& JasperUtils
								.setHeatStepper(testCase, inputs, heatTemp);
				flag = flag
						& JasperUtils.verifyHeatStepperValue(testCase, inputs,
								heatTemp, "");
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				coolTemp = inputs
						.getInputValue(JasperUtils.VACATION_COOL_SETPOINTS);
				Keyword.ReportStep_Pass(testCase,
						"Set Vacation Set Points : Setting cool set points to : "
								+ coolTemp);
				flag = flag
						& JasperUtils
								.setCoolStepper(testCase, inputs, coolTemp);
				flag = flag
						& JasperUtils.verifyCoolStepperValue(testCase, inputs,
								coolTemp, "");
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				heatTemp = inputs
						.getInputValue(JasperUtils.VACATION_HEAT_SETPOINTS);
				Keyword.ReportStep_Pass(testCase,
						"Set Vacation Set Points : Setting heat set points to : "
								+ heatTemp);
				flag = flag
						& JasperUtils
								.setHeatStepper(testCase, inputs, heatTemp);
				flag = flag
						& JasperUtils.verifyHeatStepperValue(testCase, inputs,
								heatTemp, "");
			}
		} catch (Exception e) {

		}
		return flag;
	}

	public static boolean setVacationTime(TestCases testCase, String time) {
		boolean flag = true;
		try {
			String time24hours = " ";
			String time12hours = " ";
			String timeToSet = " ";
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			time24hours = date24Format.format(vacationDateFormat.parse(time));
			time12hours = date12Format.format(vacationDateFormat.parse(time));
			String hours = time12hours.split(":")[0];
			String minutes = time12hours.split(":")[1].split(" ")[0];
			String ampm = time12hours.split(":")[1].split(" ")[1];
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("id", "ampm_label",
						testCase, 3)
						|| MobileUtils.isMobElementExists("id", "am_label",
								testCase, 3)
						|| MobileUtils.isMobElementExists("id", "pm_label",
								testCase, 3)) {
					if (ampm.equalsIgnoreCase("AM")) {
						ampm = "A.M.";
					} else {
						ampm = "P.M.";
					}
					timeToSet = hours + ":" + minutes + ampm;
				} else {
					timeToSet = time24hours;
				}
				Keyword.ReportStep_Pass(testCase,
						"Set Vacation Time : Setting time to " + timeToSet);
				if (MobileUtils.setValueToElement(fieldObjects, testCase,
						"TimePicker", timeToSet)) {
					Keyword.ReportStep_Pass(testCase,
							"Set Vacation Time : Successfully set time "
									+ timeToSet + " to time picker");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Set Vacation Time : Failed to set time "
									+ timeToSet + " to time picker");
				}
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"OkButton");
			} else {
				if (MobileUtils.isMobElementExists("xpath",
						"//UIAPickerWheel[4]", testCase, 3)) {
					if (ampm.equalsIgnoreCase("AM")) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
					timeToSet = hours + ":" + minutes + ampm;
					hours = String.valueOf(Integer.parseInt(hours));
					flag = flag
							& MobileUtils.setValueInPicker(testCase, "xpath",
									"//UIAPickerWheel[2]", hours);
					flag = flag
							& MobileUtils.setValueInPicker(testCase, "xpath",
									"//UIAPickerWheel[3]", minutes);
					flag = flag
							& MobileUtils.setValueInPicker(testCase, "xpath",
									"//UIAPickerWheel[4]", ampm);
				} else {
					timeToSet = time24hours;
					hours = time24hours.split(":")[0];
					minutes = time24hours.split(":")[1];
					flag = flag
							& MobileUtils.setValueInPicker(testCase, "xpath",
									"//UIAPickerWheel[2]", hours);
					flag = flag
							& MobileUtils.setValueInPicker(testCase, "xpath",
									"//UIAPickerWheel[3]", minutes);
				}

			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set Vacation Time : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setValueToScroller(TestCases testCase, int scroller,
			WebElement upButton, WebElement downButton) {
		boolean flag = true;
		if (scroller < 0) {
			scroller *= -1;
			for (int j = 0; j < scroller; j++) {
				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					TouchAction t1 = new TouchAction(testCase.getMobileDriver());
					t1.tap(upButton.getLocation().getX() + 20,
							upButton.getLocation().getY() + 20).perform();
				} else {
					upButton.click();
				}
			}
		} else if (scroller > 0) {
			for (int j = 0; j < scroller; j++) {
				downButton.click();
			}
		}
		return flag;
	}

	public static boolean toggleUpdateVacationSettingsSwitch(
			TestCases testCase, boolean turnOn) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (turnOn) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"UpdateVacationSettingsSwitch").getText()
						.equalsIgnoreCase("ON")) {
					Keyword.ReportStep_Pass(
							testCase,
							"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is already in ON state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "UpdateVacationSettingsSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"UpdateVacationSettingsSwitch").getText()
							.equalsIgnoreCase("ON")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch toggled to ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is not turned on in vacation settings after clicking on vacation switch");
					}
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"UpdateVacationSettingsSwitch")
						.getAttribute("value").equalsIgnoreCase("1")) {
					Keyword.ReportStep_Pass(
							testCase,
							"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is already in ON state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "UpdateVacationSettingsSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"UpdateVacationSettingsSwitch")
							.getAttribute("value").equalsIgnoreCase("1")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch toggled to ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is not turned on in vacation settings after clicking on vacation switch");
					}
				}
			}
		} else if (!turnOn) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"UpdateVacationSettingsSwitch").getText()
						.equalsIgnoreCase("OFF")) {
					Keyword.ReportStep_Pass(
							testCase,
							"Toggle Update Vacation Switch (OFF) : Update Vacation switch is already in OFF state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "UpdateVacationSettingsSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"UpdateVacationSettingsSwitch").getText()
							.equalsIgnoreCase("OFF")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Toggle Update Vacation Settings Switch (OFF) : Update Vacation switch toggled to OFF state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Update Vacation Settings Switch (OFF) : Update Vacation switch is not toggled to off state after clicking on vacation switch");
					}
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"UpdateVacationSettingsSwitch")
						.getAttribute("value").equalsIgnoreCase("0")) {
					Keyword.ReportStep_Pass(
							testCase,
							"Toggle Update Vacation Switch (OFF) : Update Vacation switch is already in OFF state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "UpdateVacationSettingsSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"UpdateVacationSettingsSwitch")
							.getAttribute("value").equalsIgnoreCase("0")) {
						Keyword.ReportStep_Pass(
								testCase,
								"Toggle Update Vacation Settings Switch (OFF) : Update Vacation switch toggled to OFF state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Update Vacation Settings Switch (OFF) : Update Vacation switch is not toggled to off state after clicking on vacation switch");
					}
				}
			}
		}
		return flag;
	}

	public static boolean toggleVacationSwitch(TestCases testCase,
			boolean turnOn) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (turnOn) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getText().equalsIgnoreCase("ON")) {
					Keyword.ReportStep_Pass(testCase,
							"Toggle Vacation Switch (ON) : Vacation switch is already in ON state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "VacationSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getText()
							.equalsIgnoreCase("ON")) {
						Keyword.ReportStep_Pass(testCase,
								"Toggle Vacation Switch (ON) : Vacation switch toggled to ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Vacation Switch(ON) : Vacation switch is not turned on in vacation settings after clicking on vacation switch");
					}
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getAttribute("value").equalsIgnoreCase("1")) {
					Keyword.ReportStep_Pass(testCase,
							"Toggle Vacation Switch (ON) : Vacation switch is already in ON state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "VacationSwitch");
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getAttribute("value")
							.equalsIgnoreCase("1")) {
						Keyword.ReportStep_Pass(testCase,
								"Toggle Vacation Switch (ON) : Vacation switch toggled to ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Toggle Vacation Switch(ON) : Vacation switch is not turned on in vacation settings after clicking on vacation switch");
					}
				}
			}
		} else if (!turnOn) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getText().equalsIgnoreCase("OFF")) {
					Keyword.ReportStep_Pass(testCase,
							"Toggle Vacation Switch (OFF) : Vacation switch is already in OFF state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "VacationSwitch");
				}
			} else {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase, "VacationSwitch")
						.getAttribute("value").equalsIgnoreCase("0")) {
					Keyword.ReportStep_Pass(testCase,
							"Toggle Vacation Switch (OFF) : Vacation switch is already in OFF state");
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "VacationSwitch");
				}
			}
		}
		return flag;
	}

	public static boolean turnOffSchedule(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ScheduleOptionsButton", 10)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton");
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOffButton");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Schedule Options button does not exist hence cannot turn off schedule");
		}
		return flag;
	}

	public static boolean turnOffVacationFromPrimaryCard(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"AdHocStatus");
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"EndVacationButton");
		return flag;
	}

	public static boolean turnOnSchedule(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ScheduleOffOverlay", 5)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOffOverlay");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Turn On Schedule : Schedule Off Overlay not present");
		}
		return flag;
	}

	public static boolean updateGeofenceCenterToDeviceCurrentLocation(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GeofenceManager");
		flag = flag & navigateToGeofenceCenterSettings(testCase);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"FindLocationButton");
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"UpdateButton");
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"SaveCenterButton");
		return flag;
	}

	public static boolean verifyAdHocHoldPermanentlyStatus(TestCases testCase,
			TestCaseInputs inputs, String overrideSetPoints) {
		boolean flag = true;
		FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
				testCase.getMobileDriver());
		fWait.pollingEvery(2, TimeUnit.SECONDS);
		fWait.withTimeout(30, TimeUnit.SECONDS);
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		Double overrideTemp = Double.parseDouble(overrideSetPoints);
		String status;
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			status = "Hold " + overrideTemp + "\u00B0 Permanently";
		} else {
			if (statInfo.getThermostatUnits().equalsIgnoreCase(
					GlobalVariables.FAHRENHEIT)) {
				status = "Hold " + overrideTemp.intValue()
						+ "\u00B0 Permanently";
			} else {
				status = "Hold " + overrideTemp + "\u00B0 Permanently";
			}
		}

		try {
			Boolean isEventReceived = fWait
					.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
						public Boolean apply(AppiumDriver<MobileElement> driver) {
							String adHocStatus = "";
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "AdHocStatus", 3)) {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									adHocStatus = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"AdHocStatus").getAttribute("text");
								} else {
									adHocStatus = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"AdHocStatus")
											.getAttribute("label");
								}
							}
							if (status.equalsIgnoreCase(adHocStatus)) {
								return true;
							} else {
								return false;
							}
						}
					});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Ad hoc status is not correctly displayed in the primary card with overridden set points");
		}

		if (flag) {
			Keyword.ReportStep_Pass(
					testCase,
					"Verify Ad Hoc Hold Permanently Status : Ad hoc status is correctly displayed in the primary card with overridden set points");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Ad hoc status is not correctly displayed in the primary card with overridden set points");
		}
		return flag;
	}

	public static boolean verifyAutoChangeOverLogic(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		List<WebElement> schedule_heatsetpoints, schedule_coolsetpoints;
		String tempHeatSetPointApp = "", tempCoolSetPointApp = "";

		flag = flag & viewScheduleOnPrimaryCard(testCase);
		if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
				JasperUtils.GEOFENCE_BASED_SCHEDULE)) {
			// ============================================ANDROID============================================================
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_heating_point", testCase, 5)) {
					schedule_heatsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_heating_point");
					schedule_coolsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_cooling_point");
					// =================================Geofence HOME
					// Period====================================
					tempHeatSetPointApp = schedule_heatsetpoints.get(0)
							.getText();
					if (schedule_heatsetpoints.get(0).getText().contains(".0")) {
						tempHeatSetPointApp = schedule_heatsetpoints.get(0)
								.getText().split("\\.")[0];
					}
					tempCoolSetPointApp = schedule_coolsetpoints.get(0)
							.getText();
					if (schedule_coolsetpoints.get(0).getText().contains(".0")) {
						tempCoolSetPointApp = schedule_coolsetpoints.get(0)
								.getText().split("\\.")[0];
					}
					if (Integer.valueOf(tempCoolSetPointApp) >= Integer
							.valueOf(tempHeatSetPointApp)) {
						Keyword.ReportStep_Pass(testCase,
								"[HomeSettings] Home set points are following Auto changeover logic");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[HomeSettings] Home set points are not following Auto changeover logic with Cool temperature: "
										+ Integer.valueOf(tempCoolSetPointApp)
										+ " and Heat temperature: "
										+ Integer.valueOf(tempHeatSetPointApp));
					}
					// =================================Geofence SLEEP
					// Period===============================
					if (inputs.getInputValue(
							JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
							.equalsIgnoreCase("Yes")) {
						tempHeatSetPointApp = schedule_heatsetpoints.get(1)
								.getText();
						if (schedule_heatsetpoints.get(1).getText()
								.contains(".0")) {
							tempHeatSetPointApp = schedule_heatsetpoints.get(1)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointApp = schedule_coolsetpoints.get(1)
								.getText();
						if (schedule_coolsetpoints.get(1).getText()
								.contains(".0")) {
							tempCoolSetPointApp = schedule_coolsetpoints.get(1)
									.getText().split("\\.")[0];
						}
						if (Integer.valueOf(tempCoolSetPointApp) >= Integer
								.valueOf(tempHeatSetPointApp)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep set points are following Auto changeover logic");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep set points are not following Auto changeover logic with Cool temperature: "
											+ Integer
													.valueOf(tempCoolSetPointApp)
											+ " and Heat temperature: "
											+ Integer
													.valueOf(tempHeatSetPointApp));
						}

						tempHeatSetPointApp = schedule_heatsetpoints.get(2)
								.getText();
						if (schedule_heatsetpoints.get(2).getText()
								.contains(".0")) {
							tempHeatSetPointApp = schedule_heatsetpoints.get(2)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointApp = schedule_coolsetpoints.get(2)
								.getText();
						if (schedule_coolsetpoints.get(2).getText()
								.contains(".0")) {
							tempCoolSetPointApp = schedule_coolsetpoints.get(2)
									.getText().split("\\.")[0];
						}
						if (Integer.valueOf(tempCoolSetPointApp) >= Integer
								.valueOf(tempHeatSetPointApp)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away set points are following Auto changeover logic");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away set points are not following Auto changeover logic with Cool temperature: "
											+ Integer
													.valueOf(tempCoolSetPointApp)
											+ " and Heat temperature: "
											+ Integer
													.valueOf(tempHeatSetPointApp));
						}
					} else {
						tempHeatSetPointApp = schedule_heatsetpoints.get(1)
								.getText();
						if (schedule_heatsetpoints.get(1).getText()
								.contains(".0")) {
							tempHeatSetPointApp = schedule_heatsetpoints.get(1)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointApp = schedule_coolsetpoints.get(1)
								.getText();
						if (schedule_coolsetpoints.get(1).getText()
								.contains(".0")) {
							tempCoolSetPointApp = schedule_coolsetpoints.get(1)
									.getText().split("\\.")[0];
						}
						if (Integer.valueOf(tempCoolSetPointApp) >= Integer
								.valueOf(tempHeatSetPointApp)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away set points are following Auto changeover logic");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away set points are not following Auto changeover logic with Cool temperature: "
											+ Integer
													.valueOf(tempCoolSetPointApp)
											+ " and Heat temperature: "
											+ Integer
													.valueOf(tempHeatSetPointApp));
						}
					}

				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Geofence schedule set points in solution card");
				}
			}
			// ================================================IOS================================================================
			else {
				if (MobileUtils.isMobElementExists("name",
						"Geofence_Home_HeatTemperature", testCase, 5)) {
					tempHeatSetPointApp = MobileUtils.getMobElement(testCase,
							"name", "Geofence_Home_HeatTemperature")
							.getAttribute("value");
					if (tempHeatSetPointApp.contains(".0")) {
						tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
					}
				}
				if (MobileUtils.isMobElementExists("name",
						"Geofence_Home_CoolTemperature", testCase, 5)) {
					tempCoolSetPointApp = MobileUtils.getMobElement(testCase,
							"name", "Geofence_Home_CoolTemperature")
							.getAttribute("value");
					if (tempCoolSetPointApp.contains(".0")) {
						tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
					}
				}
				if (Integer.valueOf(tempCoolSetPointApp) >= Integer
						.valueOf(tempHeatSetPointApp)) {
					Keyword.ReportStep_Pass(testCase,
							"[HomeSettings] Home set points are following Auto changeover logic");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"[HomeSettings] Home set points are not following Auto changeover logic with Cool temperature: "
									+ Integer.valueOf(tempCoolSetPointApp)
									+ " and Heat temperature: "
									+ Integer.valueOf(tempHeatSetPointApp));
				}

				if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
						.equalsIgnoreCase("Yes")) {
					tempHeatSetPointApp = MobileUtils.getMobElement(testCase,
							"name", "Geofence_Sleep_HeatTemperature")
							.getAttribute("value");
					if (tempHeatSetPointApp.contains(".0")) {
						tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
					}
					tempCoolSetPointApp = MobileUtils.getMobElement(testCase,
							"name", "Geofence_Sleep_CoolTemperature")
							.getAttribute("value");
					if (tempCoolSetPointApp.contains(".0")) {
						tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
					}
					if (Integer.valueOf(tempCoolSetPointApp) >= Integer
							.valueOf(tempHeatSetPointApp)) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep set points are following Auto changeover logic");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep set points are not following Auto changeover logic with Cool temperature: "
										+ Integer.valueOf(tempCoolSetPointApp)
										+ " and Heat temperature: "
										+ Integer.valueOf(tempHeatSetPointApp));
					}
				}

				tempHeatSetPointApp = MobileUtils.getMobElement(testCase,
						"name", "Geofence_Away_HeatTemperature").getAttribute(
						"value");
				if (tempHeatSetPointApp.contains(".0")) {
					tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
				}
				tempCoolSetPointApp = MobileUtils.getMobElement(testCase,
						"name", "Geofence_Away_CoolTemperature").getAttribute(
						"value");
				if (tempCoolSetPointApp.contains(".0")) {
					tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
				}
				if (Integer.valueOf(tempCoolSetPointApp) >= Integer
						.valueOf(tempHeatSetPointApp)) {
					Keyword.ReportStep_Pass(testCase,
							"[AwaySettings] Away set points are following Auto changeover logic");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"[AwaySettings] Away set points are not following Auto changeover logic with Cool temperature: "
									+ Integer.valueOf(tempCoolSetPointApp)
									+ " and Heat temperature: "
									+ Integer.valueOf(tempHeatSetPointApp));
				}
			}
		} else if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
				TIME_BASED_SCHEDULE)) {
			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {

			} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {

			}
		}
		try {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				testCase.getMobileDriver()
						.findElement(
								By.xpath("//*[@content-desc='Navigate Up']"))
						.click();
			} else {
				if (MobileUtils.isMobElementExists("name", "btn close normal",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"btn close normal")) {
						flag = false;
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to navigate back to Primary Card: Error message-"
							+ e.getMessage());
		}

		return flag;
	}

	public static boolean verifyAppRedirectedToScheduleScreen(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeOption", 5)) {
			Keyword.ReportStep_Pass(testCase,
					"App is successfuly redirected to schedule selection screen");

			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"BackButton", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"BackButton")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Back button");
				}
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"BackButton", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"BackButton")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Back button");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "btn close normal",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"btn close normal")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Close button");
				}
				if (MobileUtils.isMobElementExists("name", "btn close normal",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"btn close normal")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Close button");
				}

			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"App is not redirected to schedule selection screen");
		}
		return flag;
	}

	public static boolean verifyAvailableSystemModes(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"SystemModeButton");
		if (allowedModes.contains("Auto") && allowedModes.contains("Cool")
				&& allowedModes.contains("Heat")
				&& allowedModes.contains("Off")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AutoModeOption", 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Auto mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Auto mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CoolModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Cool mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Cool mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HeatModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Heat mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Heat mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"OffModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Off mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Off mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CancelOption");
		} else if (!allowedModes.contains("Auto")
				&& allowedModes.contains("Cool")
				&& allowedModes.contains("Heat")
				&& allowedModes.contains("Off")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AutoModeOption", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Auto mode displayed in UI allowed modes but not available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CoolModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Cool mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Cool mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HeatModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Heat mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Heat mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"OffModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Off mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Off mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CancelOption");
		} else if (!allowedModes.contains("Auto")
				&& !allowedModes.contains("Cool")
				&& allowedModes.contains("Heat")
				&& allowedModes.contains("Off")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AutoModeOption", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Auto mode displayed in UI allowed modes but not available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CoolModeOption", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Cool mode displayed in UI allowed modes but not available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HeatModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Heat mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Heat mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"OffModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Off mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Off mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CancelOption");
		} else if (!allowedModes.contains("Auto")
				&& allowedModes.contains("Cool")
				&& !allowedModes.contains("Heat")
				&& allowedModes.contains("Off")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AutoModeOption", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Auto mode displayed in UI allowed modes but not available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CoolModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Cool mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Cool mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HeatModeOption", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Heat mode displayed in UI allowed modes but not available in CHIL allowed modes");
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"OffModeOption", 3)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Available System Modes : Off mode displayed in allowed modes in both UI and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Available System Modes : Off mode not displayed in UI allowed modes but available in CHIL allowed modes");
			}
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CancelOption");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Available System Modes : Invalid allowed modes on CHIL : "
							+ allowedModes);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"CancelOption");
		}
		return flag;
	}

	public static boolean verifyCoolStepperValue(TestCases testCase,
			TestCaseInputs inputs, String coolTemp,
			String verifyMinimumOrMaximum) {
		boolean flag = true;
		String coolSetPoint = "";
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		String jasperStatType = statInfo.getJasperDeviceType();
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			coolSetPoint = MobileUtils
					.getMobElement(fieldObjects, testCase,
							"CoolSetPointChooser")
					.findElement(By.id("scheduling_period_temp_point"))
					.getText();
		} else {
			int size = MobileUtils.getMobElements(fieldObjects, testCase,
					"CoolSetPoints").size();
			if (inputs.getInputValue(GEOFENCE_PERIOD).equalsIgnoreCase(
					GEOFENCE_AWAY)
					&& (size > 1)) {
				coolSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "CoolSetPoints")
						.get(1).getAttribute("value");
			} else {
				coolSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "CoolSetPoints").getAttribute("value");
			}
		}
		HashMap<String, String> minMaxSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		if (verifyMinimumOrMaximum.equalsIgnoreCase("AboveMaximum")) {
			String setPoints = minMaxSetPoints.get("MaxCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Cool Stepper Value : Cool Set Point set to max set point after trying to set it to a value above maximum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to max set point after trying to set it to a value above maximum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Maximum")) {
			String setPoints = minMaxSetPoints.get("MaxCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point set to max set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to max set point");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("BelowMinimum")) {
			String setPoints = minMaxSetPoints.get("MinCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Cool Stepper Value : Cool Set Point set to min set point after trying to set it to a value below minimum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to min set point after trying to set it to a value below minimum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Minimum")) {
			String setPoints = minMaxSetPoints.get("MinCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point set to min set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to min set point");
			}
		} else {
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(coolSetPoint);
				coolSetPoint = String.valueOf(temp.intValue());
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point is set to : "
								+ coolSetPoint);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool set point is not set to : "
								+ coolTemp);
			}
		}
		return flag;
	}

	public static boolean verifyCoolStepperValue(TestCases testCase,
			TestCaseInputs inputs, String coolSetPoint, String coolTemp,
			String verifyMinimumOrMaximum) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, String> minMaxSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		String jasperStatType = statInfo.getJasperDeviceType();
		if (verifyMinimumOrMaximum.equalsIgnoreCase("AboveMaximum")) {
			String setPoints = minMaxSetPoints.get("MaxCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Cool Stepper Value : Cool Set Point set to max set point after trying to set it to a value above maximum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to max set point after trying to set it to a value above maximum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Maximum")) {
			String setPoints = minMaxSetPoints.get("MaxCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point set to max set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to max set point");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("BelowMinimum")) {
			String setPoints = minMaxSetPoints.get("MinCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Cool Stepper Value : Cool Set Point set to min set point after trying to set it to a value below minimum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to min set point after trying to set it to a value below minimum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Minimum")) {
			String setPoints = minMaxSetPoints.get("MinCool");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				coolTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					coolTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point set to min set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Cool Set Point not set to min set point");
			}
		} else {
			if (inputs.getInputValue(JasperUtils.UNITS).equals(
					GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(coolSetPoint);
				coolSetPoint = String.valueOf(temp.intValue());
			}
			if (coolSetPoint.equals(coolTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Cool Stepper Value : Cool Set Point Successfully set to : "
								+ coolSetPoint);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Cool Stepper Value : Failed to set cool set point to : "
								+ coolTemp);
			}
		}
		return flag;
	}

	public static boolean verifyCreatedSchedule(TestCases testCase,
			TestCaseInputs inputs, String scheduleType) {
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*********************** Verifying created Schedule **************************");
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		List<String> allowedModes = statInfo.getAllowedModes();
		WebElement element = null;
		String heatSetPoints = "";
		String coolSetPoints = "";
		String time = "";
		String time12hours = "";
		String time24hours = "";
		if (scheduleType.equals("Time")) {
			if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE).equals("NA")) {
				if (inputs.getInputValue(JasperUtils.TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase("Everyday")) {
					try {
						WebElement everydayHeader = null;
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							everydayHeader = testCase.getMobileDriver()
									.findElement(
											By.xpath("//*[@text='Everyday']"));
						} else {
							everydayHeader = testCase.getMobileDriver()
									.findElement(By.name("Everyday"));
						}
						if (everydayHeader != null) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Created Schedule : Everyday header title present");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Everyday header title not found");
						}
					} catch (NoSuchElementException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Created Schedule : Everyday header title not found");
					}
					String[] modes = { "Wake", "Away", "Home", "Sleep" };
					for (String mode : modes) {
						if (mode.equals("Wake")) {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Wake_Everyday']"));
							} else {
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "EverydayWake");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.EVERYDAY_WAKE_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT);
						} else if (mode.equals("Away")) {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Away_Everyday']"));
							} else {
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "EverydayAway");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.EVERYDAY_AWAY_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT);
						} else if (mode.equals("Home")) {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Home_Everyday']"));
							} else {
								element = MobileUtils.getMobElement(
										fieldObjects, testCase, "EverydayHome");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.EVERYDAY_HOME_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT);
						} else if (mode.equals("Sleep")) {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@content-desc='Sleep_Everyday']"));
							} else {
								element = MobileUtils
										.getMobElement(fieldObjects, testCase,
												"EverydaySleep");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.EVERYDAY_SLEEP_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT);
						}
						WebElement el = null;
						String appPeriodName;
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							el = element.findElement(By
									.id("scheduling_period_title"));
							time = element.findElement(
									By.id("scheduling_period_time")).getText();
							appPeriodName = el.getText();
						} else {
							el = element.findElement(By
									.name("Everyday_" + mode));
							time = element
									.findElement(By.name("Everyday_Time"))
									.getAttribute("value");
							appPeriodName = el.getAttribute("value");
						}
						if (appPeriodName.equals(mode)) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Created Schedule : " + mode
											+ " text displayed correctly");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : " + mode
											+ " text not displayed correctly");
						}
						if (time.replaceAll("\\.", "").toUpperCase()
								.contains(time12hours)
								|| time.replaceAll("\\.", "").toUpperCase()
										.contains(time24hours)) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Created Schedule : Displayed "
											+ mode + " time is correct");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : "
											+ mode
											+ " time is not correctly displayed");
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							String coolTemp = "";
							String heatTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_heating_point"));
								heatTemp = el.getText();
								el = element.findElement(By
										.id("scheduling_period_cooling_point"));
								coolTemp = el.getText();
							} else {
								el = element.findElement(By.name("Everyday_"
										+ mode + "_HeatTemperature"));
								heatTemp = el.getAttribute("value");
								el = element.findElement(By.name("Everyday_"
										+ mode + "_CoolTemperature"));
								coolTemp = el.getAttribute("value");
							}
							if (heatTemp.equals(heatSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " heat set points displayed correctly. Set Points : "
												+ heatSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " heat set points not displayed correctly");
							}
							if (coolTemp.equals(coolSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " cool set points displayed correctly. Set Points : "
												+ coolSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " cool set points not displayed correctly");
							}
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							String coolTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_cooling_point"));
								coolTemp = el.getText();
							} else {
								el = element.findElement(By.name("Everyday_"
										+ mode + "_CoolTemperature"));
								coolTemp = el.getAttribute("value");
							}
							if (coolTemp.equals(coolSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " cool set points displayed correctly. Set Points : "
												+ coolSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " cool set points not displayed correctly");
							}
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							String heatTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_heating_point"));
								heatTemp = el.getText();
							} else {
								el = element.findElement(By.name("Everyday_"
										+ mode + "_HeatTemperature"));
								heatTemp = el.getAttribute("value");
							}
							if (heatTemp.equals(heatSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " heat set points displayed correctly. Set Points : "
												+ heatSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " heat set points not displayed correctly");
							}
						}
					}
				} else if (inputs.getInputValue(
						JasperUtils.TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
						"Weekday and Weekend")) {
					try {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@text='Monday-Friday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Monday - Friday"));
						}
					} catch (NoSuchElementException e) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 22) / 100;
								int starty = (dimensions.height * 35) / 100;
								int endx = (dimensions.width * 20) / 100;
								int endy = (dimensions.height * 62) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@text='Monday-Friday']"));
							} else {
								testCase.getMobileDriver().scrollTo(
										"Monday - Friday");
								element = testCase
										.getMobileDriver()
										.findElement(By.name("Monday - Friday"));
							}
							if (element != null) {
								Keyword.ReportStep_Pass(testCase,
										"Verify Created Schedule : Monday-Friday header text displayed correctly");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : Monday-Friday header text not displayed correctly");
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Monday-Friday header text not displayed");
						}
					}
					try {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							element = testCase.getMobileDriver().findElement(
									By.xpath("//*[@text='Saturday-Sunday']"));
						} else {
							element = testCase.getMobileDriver().findElement(
									By.name("Saturday - Sunday"));
						}
					} catch (NoSuchElementException e) {
						try {
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								Dimension dimensions = testCase
										.getMobileDriver().manage().window()
										.getSize();
								int startx = (dimensions.width * 20) / 100;
								int starty = (dimensions.height * 62) / 100;
								int endx = (dimensions.width * 22) / 100;
								int endy = (dimensions.height * 35) / 100;
								testCase.getMobileDriver().swipe(startx,
										starty, endx, endy, 1000);
								element = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//*[@text='Saturday-Sunday']"));
							} else {
								testCase.getMobileDriver().scrollTo(
										"Saturday - Sunday");
								element = testCase.getMobileDriver()
										.findElement(
												By.name("Saturday - Sunday"));
							}

							if (element != null) {
								Keyword.ReportStep_Pass(testCase,
										"Verify Created Schedule : Saturday-Sunday header text displayed correctly");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : Saturday-Sunday header text not displayed correctly");
							}
						} catch (NoSuchElementException e1) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Saturday-Sunday header text not displayed");
						}
					}

					String[] modes = { "Wake_Weekday", "Away_Weekday",
							"Home_Weekday", "Sleep_Weekday", "Wake_Weekend",
							"Away_Weekend", "Home_Weekend", "Sleep_Weekend" };
					for (String mode : modes) {
						if (mode.equals("Wake_Weekday")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Wake_Monday-Friday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekdayWake");
								}
							} catch (NoSuchElementException e) {
								try {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										Dimension dimensions = testCase
												.getMobileDriver().manage()
												.window().getSize();
										int startx = (dimensions.width * 22) / 100;
										int starty = (dimensions.height * 35) / 100;
										int endx = (dimensions.width * 20) / 100;
										int endy = (dimensions.height * 62) / 100;
										testCase.getMobileDriver().swipe(
												startx, starty, endx, endy,
												1000);
										element = testCase
												.getMobileDriver()
												.findElement(
														By.xpath("//*[@content-desc='Wake_Monday-Friday']"));
									} else {
										testCase.getMobileDriver().scrollTo(
												"Monday - Friday_Wake");
										element = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"WeekdayWake");
									}

									if (element == null) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Verify Created Schedule :  Scheduling period Weekday Wake not present");
									}
								} catch (NoSuchElementException e1) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Verify Created Schedule : Scheduling period Weekday Wake not present");
								}
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKDAY_WAKE_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_WAKE_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_WAKE_HEAT_SETPOINT);

						} else if (mode.equals("Away_Weekday")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Away_Monday-Friday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekdayAway");
								}
							} catch (NoSuchElementException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : Scheduling period Weekday Away not present");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKDAY_AWAY_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_AWAY_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_AWAY_HEAT_SETPOINT);

						} else if (mode.equals("Home_Weekday")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Home_Monday-Friday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekdayHome");
								}
							} catch (NoSuchElementException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : Scheduling period Weekday Home not present");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKDAY_HOME_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_HOME_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_HOME_HEAT_SETPOINT);

						} else if (mode.equals("Sleep_Weekday")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Sleep_Monday-Friday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekdaySleep");
								}
							} catch (NoSuchElementException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : Scheduling period Weekday Sleep not present");
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKDAY_SLEEP_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_SLEEP_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKDAY_SLEEP_HEAT_SETPOINT);

						} else if (mode.equals("Wake_Weekend")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekendWake");
								}
							} catch (NoSuchElementException e) {
								try {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										Dimension dimensions = testCase
												.getMobileDriver().manage()
												.window().getSize();
										int startx = (dimensions.width * 20) / 100;
										int starty = (dimensions.height * 62) / 100;
										int endx = (dimensions.width * 22) / 100;
										int endy = (dimensions.height * 35) / 100;
										testCase.getMobileDriver().swipe(
												startx, starty, endx, endy,
												1000);
										element = testCase
												.getMobileDriver()
												.findElement(
														By.xpath("//*[@content-desc='Wake_Saturday-Sunday']"));
									} else {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Wake");
										element = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"WeekendWake");
									}

									if (element == null) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Verify Created Schedule :  Scheduling period Weekend Wake not present");
									}
								} catch (NoSuchElementException e1) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Verify Created Schedule : Scheduling period Weekend Wake not present");
								}
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKEND_WAKE_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_WAKE_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_WAKE_HEAT_SETPOINT);
						} else if (mode.equals("Away_Weekend")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekendAway");
								}
							} catch (NoSuchElementException e) {
								try {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										Dimension dimensions = testCase
												.getMobileDriver().manage()
												.window().getSize();
										int startx = (dimensions.width * 20) / 100;
										int starty = (dimensions.height * 62) / 100;
										int endx = (dimensions.width * 22) / 100;
										int endy = (dimensions.height * 35) / 100;
										testCase.getMobileDriver().swipe(
												startx, starty, endx, endy,
												1000);
										element = testCase
												.getMobileDriver()
												.findElement(
														By.xpath("//*[@content-desc='Away_Saturday-Sunday']"));
									} else {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Away");
										element = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"WeekendAway");
									}

									if (element == null) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Verify Created Schedule :  Scheduling period Weekend Away not present");
									}
								} catch (NoSuchElementException e1) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Verify Created Schedule : Scheduling period Weekend Away not present");
								}
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKEND_AWAY_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_AWAY_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_AWAY_HEAT_SETPOINT);

						} else if (mode.equals("Home_Weekend")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekendHome");
								}
							} catch (NoSuchElementException e) {
								try {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										Dimension dimensions = testCase
												.getMobileDriver().manage()
												.window().getSize();
										int startx = (dimensions.width * 20) / 100;
										int starty = (dimensions.height * 62) / 100;
										int endx = (dimensions.width * 22) / 100;
										int endy = (dimensions.height * 35) / 100;
										testCase.getMobileDriver().swipe(
												startx, starty, endx, endy,
												1000);
										element = testCase
												.getMobileDriver()
												.findElement(
														By.xpath("//*[@content-desc='Home_Saturday-Sunday']"));
									} else {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Home");
										element = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"WeekendHome");
									}
									if (element == null) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Verify Created Schedule :  Scheduling period Weekend Home not present");
									}
								} catch (NoSuchElementException e1) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Verify Created Schedule : Scheduling period Weekend Home not present");
								}
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKEND_HOME_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_HOME_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_HOME_HEAT_SETPOINT);
						} else if (mode.equals("Sleep_Weekend")) {
							try {
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									element = testCase
											.getMobileDriver()
											.findElement(
													By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
								} else {
									element = MobileUtils.getMobElement(
											fieldObjects, testCase,
											"WeekendSleep");
								}
							} catch (NoSuchElementException e) {
								try {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										Dimension dimensions = testCase
												.getMobileDriver().manage()
												.window().getSize();
										int startx = (dimensions.width * 20) / 100;
										int starty = (dimensions.height * 62) / 100;
										int endx = (dimensions.width * 22) / 100;
										int endy = (dimensions.height * 35) / 100;
										testCase.getMobileDriver().swipe(
												startx, starty, endx, endy,
												1000);
										element = testCase
												.getMobileDriver()
												.findElement(
														By.xpath("//*[@content-desc='Sleep_Saturday-Sunday']"));
									} else {
										testCase.getMobileDriver().scrollTo(
												"Saturday - Sunday_Sleep");
										element = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"WeekendSleep");
									}

									if (element == null) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Verify Created Schedule :  Scheduling period Weekend Sleep not present");
									}
								} catch (NoSuchElementException e1) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Verify Created Schedule : Scheduling period Weekend Sleep not present");
								}
							}
							try {
								time12hours = inputs
										.getInputValue(JasperUtils.WEEKEND_SLEEP_TIME);
								SimpleDateFormat date12Format = new SimpleDateFormat(
										"hh:mm a");
								SimpleDateFormat date24Format = new SimpleDateFormat(
										"HH:mm");
								time24hours = date24Format.format(date12Format
										.parse(time12hours));
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule: Error Occured : "
												+ e.getMessage());
							}
							coolSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_SLEEP_COOL_SETPOINT);
							heatSetPoints = inputs
									.getInputValue(JasperUtils.WEEKEND_SLEEP_HEAT_SETPOINT);
						}
						String temp = mode.split("_")[0];
						String day = " ";
						if (mode.split("_")[1].equals("Weekday")) {
							day = "Monday - Friday";
						} else {
							day = "Saturday - Sunday";
						}
						WebElement el = null;
						String appPeriodName;
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							el = element.findElement(By
									.id("scheduling_period_title"));
							time = element.findElement(
									By.id("scheduling_period_time")).getText();
							appPeriodName = el.getText();
						} else {
							el = element.findElement(By.name(day + "_" + temp));
							time = element.findElement(By.name(day + "_Time"))
									.getAttribute("value");
							appPeriodName = el.getAttribute("value");
						}
						if (appPeriodName.equals(temp)) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Created Schedule : " + mode
											+ " text displayed correctly");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : " + mode
											+ " text not displayed correctly");
						}
						if (time.replaceAll("\\.", "").toUpperCase()
								.contains(time12hours)
								|| time.replaceAll("\\.", "").toUpperCase()
										.contains(time24hours)) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Created Schedule : Displayed "
											+ mode + " time is correct");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : "
											+ mode
											+ " time is not correctly displayed");
						}

						if (allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							String coolTemp = "";
							String heatTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_heating_point"));
								heatTemp = el.getText();
								el = element.findElement(By
										.id("scheduling_period_cooling_point"));
								coolTemp = el.getText();
							} else {
								el = element.findElement(By.name(day + "_"
										+ temp + "_HeatTemperature"));
								heatTemp = el.getAttribute("value");
								el = element.findElement(By.name(day + "_"
										+ temp + "_CoolTemperature"));
								coolTemp = el.getAttribute("value");
							}
							if (heatTemp.equals(heatSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " heat set points displayed correctly. Set Points : "
												+ heatSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " heat set points not displayed correctly");
							}
							if (coolTemp.equals(coolSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " cool set points displayed correctly. Set Points : "
												+ coolSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " cool set points not displayed correctly");
							}
						} else if (!allowedModes.contains("Heat")
								&& allowedModes.contains("Cool")) {
							String coolTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_cooling_point"));
								coolTemp = el.getText();
							} else {
								el = element.findElement(By.name(day + "_"
										+ temp + "_CoolTemperature"));
								coolTemp = el.getAttribute("value");
							}
							if (coolTemp.equals(coolSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " cool set points displayed correctly. Set Points : "
												+ coolSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " cool set points not displayed correctly");
							}
						} else if (allowedModes.contains("Heat")
								&& !allowedModes.contains("Cool")) {
							String heatTemp = "";
							if (testCase.getPlatform().toUpperCase()
									.contains("ANDROID")) {
								el = element.findElement(By
										.id("scheduling_period_heating_point"));
								heatTemp = el.getText();
							} else {
								el = element.findElement(By.name(day + "_"
										+ temp + "_HeatTemperature"));
								heatTemp = el.getAttribute("value");
							}
							if (heatTemp.equals(heatSetPoints)) {
								Keyword.ReportStep_Pass(
										testCase,
										"Verify Created Scehdule : "
												+ mode
												+ " heat set points displayed correctly. Set Points : "
												+ heatSetPoints);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Verify Created Schedule : "
												+ mode
												+ " heat set points not displayed correctly");
							}
						}
					}
				}
			} else if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE)
					.equals("EMEA")) {
				Keyword.ReportStep_Pass(testCase, "Stat is EMEA");
			}
		} else if (scheduleType.equals("Geofence")) {
			// Home
			try {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					element = testCase.getMobileDriver().findElement(
							By.xpath("//*[@text='When I" + "\u2019"
									+ "m Home']"));
				} else {
					element = testCase.getMobileDriver().findElement(
							By.name("When I'm Home"));
				}
				Keyword.ReportStep_Pass(testCase,
						"Verify Created Schedule : When I'm Home header displayed correctly");
			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Created Schedule : When I'm Home header not displayed");
			}
			try {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					element = testCase.getMobileDriver().findElement(
							By.xpath("//*[@text='When I" + "\u2019"
									+ "m Away']"));
				} else {
					element = testCase.getMobileDriver().findElement(
							By.name("When I'm Away"));
				}
				Keyword.ReportStep_Pass(testCase,
						"Verify Created Schedule : When I'm Away header displayed correctly");
			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Created Schedule : When I'm Away header not displayed");
			}
			String periodName = "";
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

				element = testCase.getMobileDriver().findElement(
						By.xpath("//*[@content-desc='Home_When I" + "\u2019"
								+ "m Home']"));
				periodName = element.findElement(
						By.id("scheduling_period_title")).getText();

			} else {
				element = MobileUtils.getMobElement(fieldObjects, testCase,
						"GeofenceHome");
				periodName = element.findElement(By.id("Geofence_Home"))
						.getAttribute("label");
				if (periodName.equalsIgnoreCase("Use My Home Settings")) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Created Schedule : Use My Home Settings text displayed correctly");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Use My Home Settings text not displayed correctly");
				}
			}

			coolSetPoints = inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT);
			heatSetPoints = inputs
					.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
			if (coolSetPoints.contains(".0")) {
				coolSetPoints = coolSetPoints.split("\\.")[0];
			}
			if (heatSetPoints.contains(".0")) {
				heatSetPoints = heatSetPoints.split("\\.")[0];
			}
			String coolTemp = " ";
			String heatTemp = " ";
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					heatTemp = element.findElement(
							By.id("scheduling_period_heating_point")).getText();
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
					coolTemp = element.findElement(
							By.id("scheduling_period_cooling_point")).getText();
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				} else {
					heatTemp = element.findElement(
							By.name("Geofence_Home_HeatTemperature"))
							.getAttribute("value");
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
					coolTemp = element.findElement(
							By.name("Geofence_Home_CoolTemperature"))
							.getAttribute("value");
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				}
				if (heatTemp.equals(heatSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Home heat set points displayed correctly. Set Points : "
									+ heatSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Home heat set points not displayed correctly");
				}
				if (coolTemp.equals(coolSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Home cool set points displayed correctly. Set Points : "
									+ coolSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Home cool set points not displayed correctly");
				}
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					coolTemp = element.findElement(
							By.id("scheduling_period_cooling_point")).getText();
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				} else {
					coolTemp = element.findElement(
							By.name("Geofence_Home_CoolTemperature"))
							.getAttribute("value");
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				}
				if (coolTemp.equals(coolSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Home cool set points displayed correctly. Set Points : "
									+ coolSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Home cool set points not displayed correctly");
				}
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					heatTemp = element.findElement(
							By.id("scheduling_period_heating_point")).getText();
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
				} else {
					heatTemp = element.findElement(
							By.name("Geofence_Home_HeatTemperature"))
							.getAttribute("value");
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
				}

				if (heatTemp.equals(heatSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Home heat set points displayed correctly. Set Points : "
									+ heatSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Home heat set points not displayed correctly");
				}
			}
			// Away
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

				element = testCase.getMobileDriver().findElement(
						By.xpath("//*[@content-desc='Away_When I" + "\u2019"
								+ "m Away']"));
				periodName = element.findElement(
						By.id("scheduling_period_title")).getText();

			} else {
				element = MobileUtils.getMobElement(fieldObjects, testCase,
						"GeofenceAway");
				periodName = element.findElement(By.name("Geofence_Away"))
						.getAttribute("label");
				if (periodName.equalsIgnoreCase("Use My Away Settings")) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Created Schedule : Use My Away Settings text displayed correctly");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Use My Away Settings text not displayed correctly");
				}
			}

			coolSetPoints = inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT);
			heatSetPoints = inputs
					.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
			if (coolSetPoints.contains(".0")) {
				coolSetPoints = coolSetPoints.split("\\.")[0];
			}
			if (heatSetPoints.contains(".0")) {
				heatSetPoints = heatSetPoints.split("\\.")[0];
			}
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					heatTemp = element.findElement(
							By.id("scheduling_period_heating_point")).getText();
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
					coolTemp = element.findElement(
							By.id("scheduling_period_cooling_point")).getText();
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				} else {
					heatTemp = element.findElement(
							By.name("Geofence_Away_HeatTemperature"))
							.getAttribute("value");
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
					coolTemp = element.findElement(
							By.name("Geofence_Away_CoolTemperature"))
							.getAttribute("value");
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				}

				if (heatTemp.equals(heatSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Away heat set points displayed correctly. Set Points : "
									+ heatSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Away heat set points not displayed correctly");
				}
				if (coolTemp.equals(coolSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Away cool set points displayed correctly. Set Points : "
									+ coolSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Away cool set points not displayed correctly");
				}
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					coolTemp = element.findElement(
							By.id("scheduling_period_cooling_point")).getText();
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				} else {
					coolTemp = element.findElement(
							By.name("Geofence_Away_CoolTemperature"))
							.getAttribute("value");
					if (coolTemp.contains(".0")) {
						coolTemp = coolTemp.split("\\.")[0];
					}
				}
				if (coolTemp.equals(coolSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Away cool set points displayed correctly. Set Points : "
									+ coolSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Away cool set points not displayed correctly");
				}
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					heatTemp = element.findElement(
							By.id("scheduling_period_heating_point")).getText();
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
				} else {
					heatTemp = element.findElement(
							By.name("Geofence_Away_HeatTemperature"))
							.getAttribute("value");
					if (heatTemp.contains(".0")) {
						heatTemp = heatTemp.split("\\.")[0];
					}
				}
				if (heatTemp.equals(heatSetPoints)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Created Scehdule : Away heat set points displayed correctly. Set Points : "
									+ heatSetPoints);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Away heat set points not displayed correctly");
				}
			}

			// Sleep

			if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				String desc = "";
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

					element = testCase.getMobileDriver().findElement(
							By.xpath("//*[@content-desc='Sleep_When I"
									+ "\u2019" + "m Home']"));
					desc = element
							.findElement(By.id("scheduling_period_title"))
							.getText();

				} else {
					element = MobileUtils.getMobElement(fieldObjects, testCase,
							"CreateSleepSettings");
					desc = element.getAttribute("name");
					if (desc.equalsIgnoreCase("Create Sleep Settings")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Created Schedule : Create Sleep Settings text displayed correctly");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Created Schedule : Create Sleep Settings text not displayed correctly");
					}
				}

			} else {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

					element = testCase.getMobileDriver().findElement(
							By.xpath("//*[@content-desc='Sleep_When I"
									+ "\u2019" + "m Home']"));
					periodName = element.findElement(
							By.id("scheduling_period_title")).getText();

				} else {
					element = MobileUtils.getMobElement(fieldObjects, testCase,
							"GeofenceSleep");
					periodName = element.findElement(By.name("Geofence_Sleep"))
							.getAttribute("label");
					if (periodName.equalsIgnoreCase("Use My Sleep Settings")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Created Schedule : Use My Sleep Settings text displayed correctly");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Created Schedule : Use My Sleep Settings text not displayed correctly");
					}
				}

				try {
					String time12hoursString, time24hoursString;
					time12hours = inputs
							.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME);
					SimpleDateFormat date12Format = new SimpleDateFormat(
							"hh:mm a");
					SimpleDateFormat date24Format = new SimpleDateFormat(
							"HH:mm");
					time24hours = date24Format.format(date12Format
							.parse(time12hours));
					time12hoursString = time12hours + " - ";
					time24hoursString = time24hours + " - ";
					time12hours = inputs
							.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME);
					date12Format = new SimpleDateFormat("hh:mm a");
					date24Format = new SimpleDateFormat("HH:mm");
					time24hours = date24Format.format(date12Format
							.parse(time12hours));
					time12hoursString = time12hoursString + time12hours;
					time24hoursString = time24hoursString + time24hours;
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						time = element.findElement(
								By.id("scheduling_period_startEnd_time"))
								.getText();
					} else {
						time = element.findElement(
								By.name("Geofence_SleepTimeInterval"))
								.getAttribute("value");
					}
					time = time.replaceAll("\\.", "");
					if ((time.split("-")[0].toUpperCase().contains(
							time12hoursString.split("-")[0]) || time.split("-")[0]
							.toUpperCase().contains(
									time24hoursString.split("-")[0]))
							&& (time.split("-")[1].toUpperCase().contains(
									time12hoursString.split("-")[0]) || time
									.split("-")[1].toUpperCase().contains(
									time24hoursString.split("-")[1]))) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Created Schedule : Displayed sleep start and end time is correct");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Created Schedule : Displayed sleep start and end time is not correctly displayed");
					}
					coolSetPoints = inputs
							.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT);
					heatSetPoints = inputs
							.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
					if (coolSetPoints.contains(".0")) {
						coolSetPoints = coolSetPoints.split("\\.")[0];
					}
					if (heatSetPoints.contains(".0")) {
						heatSetPoints = heatSetPoints.split("\\.")[0];
					}

					if (allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							heatTemp = element.findElement(
									By.id("scheduling_period_heating_point"))
									.getText();
							if (heatTemp.contains(".0")) {
								heatTemp = heatTemp.split("\\.")[0];
							}
							coolTemp = element.findElement(
									By.id("scheduling_period_cooling_point"))
									.getText();
							if (coolTemp.contains(".0")) {
								coolTemp = coolTemp.split("\\.")[0];
							}
						} else {
							heatTemp = element.findElement(
									By.name("Geofence_Sleep_HeatTemperature"))
									.getAttribute("value");
							if (heatTemp.contains(".0")) {
								heatTemp = heatTemp.split("\\.")[0];
							}
							coolTemp = element.findElement(
									By.name("Geofence_Sleep_CoolTemperature"))
									.getAttribute("value");
							if (coolTemp.contains(".0")) {
								coolTemp = coolTemp.split("\\.")[0];
							}
						}

						if (heatTemp.equals(heatSetPoints)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Created Scehdule : Sleep heat set points displayed correctly. Set Points : "
											+ heatSetPoints);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Sleep heat set points not displayed correctly");
						}
						if (coolTemp.equals(coolSetPoints)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Created Scehdule : Sleep cool set points displayed correctly. Set Points : "
											+ coolSetPoints);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Sleep cool set points not displayed correctly");
						}
					} else if (!allowedModes.contains("Heat")
							&& allowedModes.contains("Cool")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							coolTemp = element.findElement(
									By.id("scheduling_period_cooling_point"))
									.getText();
							if (coolTemp.contains(".0")) {
								coolTemp = coolTemp.split("\\.")[0];
							}
						} else {
							coolTemp = element.findElement(
									By.name("Geofence_Sleep_CoolTemperature"))
									.getAttribute("value");
							if (coolTemp.contains(".0")) {
								coolTemp = coolTemp.split("\\.")[0];
							}
						}
						if (coolTemp.equals(coolSetPoints)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Created Scehdule : Sleep cool set points displayed correctly. Set Points : "
											+ coolSetPoints);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Sleep cool set points not displayed correctly");
						}
					} else if (allowedModes.contains("Heat")
							&& !allowedModes.contains("Cool")) {
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							heatTemp = element.findElement(
									By.id("scheduling_period_heating_point"))
									.getText();
							if (heatTemp.contains(".0")) {
								heatTemp = heatTemp.split("\\.")[0];
							}
						} else {
							heatTemp = element.findElement(
									By.name("Geofence_Sleep_HeatTemperature"))
									.getAttribute("value");
							if (heatTemp.contains(".0")) {
								heatTemp = heatTemp.split("\\.")[0];
							}
						}
						if (heatTemp.equals(heatSetPoints)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Created Scehdule : Sleep heat set points displayed correctly. Set Points : "
											+ heatSetPoints);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Created Schedule : Sleep heat set points not displayed correctly");
						}
					}
				} catch (Exception e) {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Created Schedule : Error occured : "
									+ e.getMessage());
				}
			}
		}
		Keyword.ReportStep_Pass(
				testCase,
				"*********************** Completed created schedule verification **************************");
		return flag;
	}

	public static boolean verifyDashBoardDevices(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "HomeScreen");
			LocationInformation locInfo = new LocationInformation(testCase,
					inputs);
			String locID = String.valueOf(locInfo.getLocationID());
			List<WebElement> devices;
			List<String> deviceNames = JasperUtils.getDeviceNames(testCase,
					inputs, locID);
			String chilDeviceID = " ", chilDeviceClass = " ", chilDeviceType = " ", chilDeviceSystemMode = " ", chilDeviceIndoorTemp = " ", chilDeviceCurrentSetPoints = " ";
			String appDeviceID = " ", appDeviceClass = " ", appDeviceType = " ", appDeviceSystemMode = " ", appDeviceIndoorTemp = " ", appDeviceCurrentSetPoints = " ";
			for (String devName : deviceNames) {
				inputs.setInputValue("LOCATION1_DEVICE1_NAME", devName);
				ThermostatInformation statInfo = new ThermostatInformation(
						testCase, inputs);
				if (!statInfo.isStatOnline()) {
					Keyword.ReportStep_Pass(testCase,
							"Verify DashBoard Devices : Stat " + devName
									+ " is offline");
				} else {
					chilDeviceID = statInfo.getDeviceID();
					chilDeviceClass = statInfo.getDeviceClass();
					chilDeviceType = statInfo.getDeviceType();
					chilDeviceSystemMode = statInfo.getThermoStatMode();
					if (!chilDeviceSystemMode.equalsIgnoreCase("Off")) {
						chilDeviceIndoorTemp = statInfo.getIndoorTemperature();
						chilDeviceCurrentSetPoints = statInfo
								.getCurrentSetPoints();
					}
					if (testCase.getPlatform().toUpperCase().contains("IOS")) {
						devices = MobileUtils.getMobElements(testCase, "xpath",
								"//UIACollectionCell");
						for (WebElement ele : devices) {
							if (ele.findElement(By.name("titleName"))
									.getAttribute("value").equals(devName)) {
								appDeviceID = ele.getAttribute("name");
								appDeviceClass = ele.getAttribute("label")
										.split(",")[0];
								appDeviceType = ele.getAttribute("label")
										.split(",")[1];
								appDeviceSystemMode = ele.getAttribute("value");
								if (!appDeviceSystemMode
										.equalsIgnoreCase("Off")) {
									appDeviceIndoorTemp = ele.findElement(
											By.name("indoorTemperatureValue"))
											.getAttribute("value");
									appDeviceCurrentSetPoints = ele
											.findElement(
													By.name("setPointValue"))
											.getAttribute("value");
								}
							}
						}
					} else {
						devices = MobileUtils.getMobElements(fieldObjects,
								testCase, "DashBoardDevices");
						for (WebElement element : devices) {
							WebElement ele = element.findElement(By.id("name"));
							if (ele.getText().equals(devName)) {
								appDeviceID = element.getAttribute("name")
										.split(",")[2];
								appDeviceClass = element.getAttribute("name")
										.split(",")[0];
								appDeviceType = element.getAttribute("name")
										.split(",")[1];
								appDeviceSystemMode = element.getAttribute(
										"name").split(",")[3];
								if (appDeviceSystemMode.contains("Auto")) {
									appDeviceSystemMode = "Auto";
								}
								if (!appDeviceSystemMode
										.equalsIgnoreCase("Off")) {
									appDeviceIndoorTemp = element.findElement(
											By.id("indoortemp")).getText();
									appDeviceCurrentSetPoints = element
											.findElement(By.id("setpoint"))
											.getText();
								}

							}
						}
					}
					if (chilDeviceID.equalsIgnoreCase(appDeviceID)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify DashBoard Devices : Device ID is same on both app and CHIL for device : "
										+ appDeviceID);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify DashBoard Devices : Device ID is not same on app and CHIL. App Device ID : "
										+ appDeviceID
										+ " , CHIL Device ID : "
										+ chilDeviceID);
					}
					if (chilDeviceClass.equalsIgnoreCase(appDeviceClass)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify DashBoard Devices : Device class is same on both app and CHIL for device : "
										+ appDeviceID);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify DashBoard Devices : Device class is not same on app and CHIL. App Device Class : "
										+ appDeviceClass
										+ " , CHIL Device Class : "
										+ chilDeviceClass);
					}
					if (chilDeviceType.equalsIgnoreCase(appDeviceType)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify DashBoard Devices : Device type is same on both app and CHIL for device : "
										+ appDeviceID);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify DashBoard Devices : Device type is not same on app and CHIL. App Device Type : "
										+ appDeviceType
										+ " , CHIL Device Type : "
										+ chilDeviceType);
					}
					if (chilDeviceSystemMode
							.equalsIgnoreCase(appDeviceSystemMode)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify DashBoard Devices : Device system mode is same on both app and CHIL for device : "
										+ appDeviceID);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify DashBoard Devices : Device system mode is not same on app and CHIL. App System Mode : "
										+ appDeviceSystemMode
										+ " , CHIL System Mode  : "
										+ chilDeviceSystemMode);
					}
					if (!appDeviceSystemMode.equalsIgnoreCase("Off")) {
						if (chilDeviceIndoorTemp
								.equalsIgnoreCase(appDeviceIndoorTemp)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify DashBoard Devices : Device Indoor Temp is same on both app and CHIL for device : "
											+ appDeviceID);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify DashBoard Devices : Device Indoor Temperature is not same on app and CHIL. App Indoor Temp : "
											+ appDeviceIndoorTemp
											+ " , CHIL Indoor Temp : "
											+ chilDeviceIndoorTemp);
						}
						if (chilDeviceCurrentSetPoints
								.equalsIgnoreCase(appDeviceCurrentSetPoints)) {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify DashBoard Devices : Device Set Points are same on both app and CHIL for device : "
											+ appDeviceID);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify DashBoard Devices : Device set points are not same on app and CHIL. App Set Points : "
											+ appDeviceCurrentSetPoints
											+ " , CHIL Set Points : "
											+ chilDeviceCurrentSetPoints);
						}
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"[Verify DashBoard Devices] Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyDialerTemperature(TestCases testCase,
			TestCaseInputs inputs, Double expectedTemp) {
		boolean flag = true;
		FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
				testCase.getMobileDriver());
		fWait.pollingEvery(5, TimeUnit.SECONDS);
		fWait.withTimeout(30, TimeUnit.SECONDS);
		try {
			Boolean isEventReceived = fWait
					.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
						public Boolean apply(AppiumDriver<MobileElement> driver) {
							Double currentSetPoint = getCurrentSetPointInDialer(testCase);
							if (currentSetPoint - expectedTemp == 0.0) {
								Keyword.ReportStep_Pass(testCase,
										"Verify Dialer Set Points : Dialer set points is set to : "
												+ expectedTemp);
								return true;
							} else {
								return false;
							}
						}
					});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Dialer Set Points : Dialer set points did not change to : "
							+ expectedTemp + " after waiting for 30 seconds");
		}
		return flag;
	}

	public static boolean verifyDisplayedScheduleOnPrimaryCard(
			TestCases testCase, TestCaseInputs inputs, String scheduleType) {
		List<WebElement> schedule_setpoints, schedule_heatsetpoints, schedule_periodtimes, schedule_periodtimes_weekday;
		WebElement homeHeatSetPointIOS, sleepHeatSetPointIOS, awayHeatSetPointIOS;
		String tempHeatSetPointApp = "", tempCoolSetPointApp = "", tempHeatSetPointFromInputs = "", SleepStartEndTime = "", SleepStartTime = "", SleepEndTime = "";
		String dateString = "", tempTime = "", tempTimeInputs = "";
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (scheduleType.equalsIgnoreCase("time")) {
			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Verifying time based schedule on Primary Card **************************");

			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					if (MobileUtils.isMobElementExists("xpath",
							"//*[@text='Everyday']", testCase, 5)) {
						try {
							testCase.getMobileDriver().findElement(
									By.xpath("//*[@text='Everyday']"));
							Keyword.ReportStep_Pass(testCase,
									"Verify Displayed Schedule : Everyday text displayed on schedule screen");
							schedule_periodtimes = MobileUtils.getMobElements(
									fieldObjects, testCase,
									"SchedulePeriodTime");
							schedule_heatsetpoints = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"SchedulePeriodHeatSetPoint");
							if (inputs.getInputValue(JASPER_STAT_TYPE)
									.equalsIgnoreCase("EMEA")) {
								for (int i = 1; i <= schedule_periodtimes
										.size(); i++) {
									Keyword.ReportStep_Pass(
											testCase,
											"*********************** Verifying schedule period time and schedule period heat set points against set values **************************");
									dateString = schedule_periodtimes
											.get(i - 1).getText()
											.replaceAll("\\.", "");
									tempTime = dateString;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (i == 1) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_1_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_1_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_1_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_1_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 1's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 1's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									} else if (i == 2) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_2_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_2_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_2_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_2_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 2's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 2's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									} else if (i == 3) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_3_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_3_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_3_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_3_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 3's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 3's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									} else if (i == 4) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_4_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_4_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_4_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_4_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 4's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 4's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									} else if (i == 5) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_5_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_5_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_5_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_5_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 5's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 5's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									} else if (i == 6) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(EVERYDAY_6_HEAT_SETPOINT);
										if (inputs.getInputValue(
												EVERYDAY_6_HEAT_SETPOINT)
												.contains(".0")) {
											tempHeatSetPointFromInputs = inputs
													.getInputValue(
															EVERYDAY_6_HEAT_SETPOINT)
													.split("\\.")[0];
										}
										tempHeatSetPointApp = schedule_heatsetpoints
												.get(i - 1).getText();
										if (schedule_heatsetpoints.get(i - 1)
												.getText().contains(".0")) {
											tempHeatSetPointApp = schedule_heatsetpoints
													.get(i - 1).getText()
													.split("\\.")[0];
										}
										tempTimeInputs = inputs
												.getInputValue(EVERYDAY_6_TIME);
										try {
											if (!tempTimeInputs.contains("m")
													&& !tempTimeInputs
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(tempTimeInputs
																.split("\\s+")[0]);
												tempTimeInputs = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										if (tempTimeInputs
												.equalsIgnoreCase(tempTime)
												&& tempHeatSetPointFromInputs
														.equalsIgnoreCase(tempHeatSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period 6's expected time and heat set point are shown correctly: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs);
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period 6's expected time and heat set point: "
															+ tempTimeInputs
															+ " "
															+ tempHeatSetPointFromInputs
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp);
										}
									}
								}
							} else if (inputs.getInputValue(JASPER_STAT_TYPE)
									.equalsIgnoreCase("NA")) {
								/*
								 * schedule_coolsetpoints =
								 * MobileUtils.getMobElements(fieldObjects,
								 * testCase, "SchedulePeriodCoolSetPoint");
								 */
								List<WebElement> schedule_everydaytitle = MobileUtils
										.getMobElements(fieldObjects, testCase,
												"EverydayTitleList");
								for (int i = 0; i < schedule_periodtimes.size(); i++) {
									Keyword.ReportStep_Pass(
											testCase,
											"*********************** Verifying schedule period time and schedule period heat set points against set values **************************");
									dateString = MobileUtils
											.getFieldValue(
													testCase,
													"xpath",
													"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
															+ schedule_everydaytitle
																	.get(i)
																	.getText()
															+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
											.replaceAll("\\.", "");
									tempTime = dateString;
									if (i == 0) {
										if (!MobileUtils
												.getFieldValue(
														testCase,
														"xpath",
														"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																+ schedule_everydaytitle
																		.get(i)
																		.getText()
																+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
												.equalsIgnoreCase("Tap to set")) {

											try {
												if (!dateString.contains("m")
														&& !dateString
																.contains("M")) {
													final SimpleDateFormat sdf = new SimpleDateFormat(
															"H:mm");
													final Date dateObj1 = sdf
															.parse(dateString
																	.split("\\s+")[0]);
													tempTime = new SimpleDateFormat(
															"hh:mm aa")
															.format(dateObj1);
												}
											} catch (NumberFormatException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[NumberFormatException] Error message: "
																+ e.getMessage());
											} catch (ParseException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[ParseException] Error message: "
																+ e.getMessage());
											} catch (Exception e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[Exception] Error message: "
																+ e.getMessage());
											}

											if (inputs.getInputValue(
													EVERYDAY_WAKE_TIME)
													.equalsIgnoreCase(tempTime)
													&& inputs
															.getInputValue(
																	EVERYDAY_WAKE_HEAT_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
													&& inputs
															.getInputValue(
																	EVERYDAY_WAKE_COOL_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period WAKE's expected time and heat and cool set points are shown correctly: "
																+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period WAKE's expected time and heat and cool set points: "
																+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT)
																+ " are not shown correctly: "
																+ tempTime
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
											}
										} else {
											if (inputs
													.getInputValue(
															EVERYDAY_WAKE_TIME)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ schedule_everydaytitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period WAKE's expected time is shown correctly: "
																+ inputs.getInputValue(EVERYDAY_WAKE_TIME));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period WAKE's expected time: "
																+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
																+ " is not shown correctly: "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
											}
										}
									} else if (i == 1) {
										if (!MobileUtils
												.getFieldValue(
														testCase,
														"xpath",
														"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																+ schedule_everydaytitle
																		.get(i)
																		.getText()
																+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
												.equalsIgnoreCase("Tap to set")) {
											try {
												if (!dateString.contains("m")
														&& !dateString
																.contains("M")) {
													final SimpleDateFormat sdf = new SimpleDateFormat(
															"H:mm");
													final Date dateObj1 = sdf
															.parse(dateString
																	.split("\\s+")[0]);
													tempTime = new SimpleDateFormat(
															"hh:mm aa")
															.format(dateObj1);
												}
											} catch (NumberFormatException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[NumberFormatException] Error message: "
																+ e.getMessage());
											} catch (ParseException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[ParseException] Error message: "
																+ e.getMessage());
											} catch (Exception e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[Exception] Error message: "
																+ e.getMessage());
											}
											if (inputs.getInputValue(
													EVERYDAY_AWAY_TIME)
													.equalsIgnoreCase(tempTime)
													&& inputs
															.getInputValue(
																	EVERYDAY_AWAY_HEAT_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
													&& inputs
															.getInputValue(
																	EVERYDAY_AWAY_COOL_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period AWAY's expected time and heat and cool set points are shown correctly: "
																+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period AWAY's expected time and heat and cool set points: "
																+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT)
																+ inputs.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT)
																+ " are not shown correctly: "
																+ tempTime
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));

											}
										} else {
											if (inputs
													.getInputValue(
															EVERYDAY_AWAY_TIME)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ schedule_everydaytitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period AWAY's expected time is shown correctly: "
																+ inputs.getInputValue(EVERYDAY_AWAY_TIME));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period AWAY's expected time: "
																+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
																+ " is not shown correctly: "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
											}
										}
									} else if (i == 2) {
										if (!MobileUtils
												.getFieldValue(
														testCase,
														"xpath",
														"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																+ schedule_everydaytitle
																		.get(i)
																		.getText()
																+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
												.equalsIgnoreCase("Tap to set")) {
											try {
												if (!dateString.contains("m")
														&& !dateString
																.contains("M")) {
													final SimpleDateFormat sdf = new SimpleDateFormat(
															"H:mm");
													final Date dateObj1 = sdf
															.parse(dateString
																	.split("\\s+")[0]);
													tempTime = new SimpleDateFormat(
															"hh:mm aa")
															.format(dateObj1);
												}
											} catch (NumberFormatException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[NumberFormatException] Error message: "
																+ e.getMessage());
											} catch (ParseException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[ParseException] Error message: "
																+ e.getMessage());
											} catch (Exception e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[Exception] Error message: "
																+ e.getMessage());
											}
											if (inputs.getInputValue(
													EVERYDAY_HOME_TIME)
													.equalsIgnoreCase(tempTime)
													&& inputs
															.getInputValue(
																	EVERYDAY_HOME_HEAT_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
													&& inputs
															.getInputValue(
																	EVERYDAY_HOME_COOL_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period HOME's expected time and heat and cool set points are shown correctly: "
																+ inputs.getInputValue(EVERYDAY_HOME_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_HOME_COOL_SETPOINT));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period HOME's expected time and heat and cool set points: "
																+ inputs.getInputValue(EVERYDAY_HOME_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_HOME_COOL_SETPOINT)
																+ " are not shown correctly: "
																+ tempTime
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));

											}
										} else {
											if (inputs
													.getInputValue(
															EVERYDAY_HOME_TIME)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ schedule_everydaytitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period HOME's expected time is shown correctly: "
																+ inputs.getInputValue(EVERYDAY_HOME_TIME));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period HOME's expected time: "
																+ inputs.getInputValue(EVERYDAY_HOME_TIME)
																+ " is not shown correctly: "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
											}
										}
									} else if (i == 3) {
										if (!MobileUtils
												.getFieldValue(
														testCase,
														"xpath",
														"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																+ schedule_everydaytitle
																		.get(i)
																		.getText()
																+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
												.equalsIgnoreCase("Tap to set")) {
											try {
												if (!dateString.contains("m")
														&& !dateString
																.contains("M")) {
													final SimpleDateFormat sdf = new SimpleDateFormat(
															"H:mm");
													final Date dateObj1 = sdf
															.parse(dateString
																	.split("\\s+")[0]);
													tempTime = new SimpleDateFormat(
															"hh:mm aa")
															.format(dateObj1);
												}
											} catch (NumberFormatException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[NumberFormatException] Error message: "
																+ e.getMessage());
											} catch (ParseException e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[ParseException] Error message: "
																+ e.getMessage());
											} catch (Exception e) {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"[Exception] Error message: "
																+ e.getMessage());
											}
											if (inputs.getInputValue(
													EVERYDAY_SLEEP_TIME)
													.equalsIgnoreCase(tempTime)
													&& inputs
															.getInputValue(
																	EVERYDAY_SLEEP_HEAT_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
													&& inputs
															.getInputValue(
																	EVERYDAY_SLEEP_COOL_SETPOINT)
															.equalsIgnoreCase(
																	MobileUtils
																			.getFieldValue(
																					testCase,
																					"xpath",
																					"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																							+ schedule_everydaytitle
																									.get(i)
																									.getText()
																							+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period SLEEP's expected time and heat and cool set points are shown correctly: "
																+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period SLEEP's expected time and heat and cool set points: "
																+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
																+ " "
																+ inputs.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT)
																+ " "
																+ inputs.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT)
																+ " are not shown correctly: "
																+ tempTime
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
																+ " "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));

											}
										} else {
											if (inputs
													.getInputValue(
															EVERYDAY_SLEEP_TIME)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ schedule_everydaytitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Period SLEEP's expected time is shown correctly: "
																+ inputs.getInputValue(EVERYDAY_SLEEP_TIME));
											} else {
												flag = false;
												Keyword.ReportStep_Fail(
														testCase,
														FailType.FUNCTIONAL_FAILURE,
														"Period SLEEP's expected time: "
																+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
																+ " is not shown correctly: "
																+ MobileUtils
																		.getFieldValue(
																				testCase,
																				"xpath",
																				"//*[contains(@content-desc,'_Everyday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																						+ schedule_everydaytitle
																								.get(i)
																								.getText()
																						+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
											}
										}

									}
								}
							}

						} catch (NoSuchElementException e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Displayed Schedule : Everyday text not displayed on schedule screen");
						}

					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Everyday text not displayed on schedule screen");
					}
				} else {
					if (MobileUtils.isMobElementExists("xpath",
							"//*[@text='Monday-Friday']", testCase, 5)) {
						try {
							testCase.getMobileDriver().findElement(
									By.xpath("//*[@text='Monday-Friday']"));
							Keyword.ReportStep_Pass(testCase,
									"Verify Displayed Schedule : Monday-Friday text displayed on schedule screen");
						} catch (NoSuchElementException e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Displayed Schedule : Monday-Friday text not displayed on schedule screen");
						}

					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Monday-Friday text not displayed on schedule screen");
					}
					if (MobileUtils.isMobElementExists("xpath",
							"//*[@text='Saturday-Sunday']", testCase, 5)) {
						try {
							testCase.getMobileDriver().findElement(
									By.xpath("//*[@text='Saturday-Sunday']"));
							Keyword.ReportStep_Pass(testCase,
									"Verify Displayed Schedule : Saturday-Sunday text displayed on schedule screen");
						} catch (NoSuchElementException e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Displayed Schedule : Saturday-Sunday text not displayed on schedule screen");
						}

					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Saturday-Sunday text not displayed on schedule screen");
					}

					// start//////////////////////////
					if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE)
							.equalsIgnoreCase("EMEA")) {
						List<WebElement> weekdayschedule_periodtimes = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"WeekdayTimeList");
						List<WebElement> weekdayschedule_periodheatsetPoint = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"WeekdayHeatSetpointListEMEA");
						Keyword.ReportStep_Pass(
								testCase,
								"*********************** Verifying Weekday-Weekend schedule period time and schedule period heat set points against set values **************************");

						for (int i = 0; i < weekdayschedule_periodtimes.size(); i++) {
							dateString = weekdayschedule_periodtimes.get(i)
									.getText().replaceAll("\\.", "");
							tempTime = dateString;
							try {
								if (!dateString.contains("m")
										&& !dateString.contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf.parse(dateString
											.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 0) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_1_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_1_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_1_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(0).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_1_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 1's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 1's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 1) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_2_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_2_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_2_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(1).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_2_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 2's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 2's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 2) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_3_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_3_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_3_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(2).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_3_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 3's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 3's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 3) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_4_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_4_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_4_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(3).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_4_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 4's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 4's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 4) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_5_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_5_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_5_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(4).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_5_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 5's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 5's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 5) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_6_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_6_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_6_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekdayschedule_periodheatsetPoint
										.get(5).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_6_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekday]Period 6's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekday]Period 6's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							}

						}
						Dimension dimensions = testCase.getMobileDriver()
								.manage().window().getSize();
						dimensions = testCase.getMobileDriver().manage()
								.window().getSize();
						int startx = (dimensions.width * 20) / 100;
						int starty = (dimensions.height * 62) / 100;
						int endx = (dimensions.width * 22) / 100;
						int endy = (dimensions.height * 35) / 100;
						testCase.getMobileDriver().swipe(startx, starty, endx,
								endy, 1000);

						List<WebElement> weekendschedule_periodtimes = MobileUtils
								.getMobElements(testCase, "xpath",
										"//*[contains(@content-desc,'_Saturday-Sunday')]/android.widget.TextView[1]");
						List<WebElement> weekendschedule_periodsetPoint = MobileUtils
								.getMobElements(testCase, "xpath",
										"//*[contains(@content-desc,'_Saturday-Sunday')]/android.widget.TextView[2]");
						for (int i = 0; i < weekendschedule_periodtimes.size(); i++) {
							dateString = weekendschedule_periodtimes.get(i)
									.getText().replaceAll("\\.", "");
							tempTime = dateString;
							try {
								if (!dateString.contains("m")
										&& !dateString.contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf.parse(dateString
											.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 0) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_1_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_1_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_1_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(0).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_1_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 1's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 1's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 1) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_2_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_2_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_2_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(1).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_2_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 2's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 2's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 2) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_3_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_3_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_3_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(2).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_3_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 3's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 3's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 3) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_4_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_4_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_4_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(3).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_4_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 4's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 4's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							}

							else if (i == 4) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_5_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_5_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_5_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(4).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_5_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 5's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 5's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 5) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_6_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_6_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_6_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = weekendschedule_periodsetPoint
										.get(5).getText();
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_6_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"[Weekend]Period 6's expected weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Weekend]Period 6's expected weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							}
						}
					}
					// end/////////////////////////
					else if (inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE)
							.equalsIgnoreCase("NA")) {
						List<WebElement> weekdayschedule_periodtitle = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"WeekdayTitleList");
						List<WebElement> weekendschedule_periodtitle = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"WeekendTitleList");
						Keyword.ReportStep_Pass(
								testCase,
								"*********************** Verifying Weekday-Weekend schedule period time and schedule period heat set points against set values **************************");

						for (int i = 0; i < weekdayschedule_periodtitle.size(); i++) {
							dateString = MobileUtils
									.getFieldValue(
											testCase,
											"xpath",
											"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
													+ weekdayschedule_periodtitle
															.get(i).getText()
													+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
									.replaceAll("\\.", "");
							tempTime = dateString;
							if (i == 0) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekdayschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_WAKE_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_WAKE_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_WAKE_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Wake's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Wake's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_WAKE_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekdayschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Wake's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Wake's expected time: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 1) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekdayschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_AWAY_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_AWAY_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_AWAY_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Away's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Away's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_AWAY_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekdayschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Away's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Away's expected time: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 2) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekdayschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_HOME_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_HOME_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_HOME_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Home's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Home's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_HOME_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekdayschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Home's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Home's expected time: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 3) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekdayschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs
											.getInputValue(WEEKDAY_SLEEP_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_SLEEP_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_SLEEP_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekdayschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Sleep's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Sleep's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_SLEEP_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekdayschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Sleep's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Sleep's expected time: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Monday-Friday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekdayschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							}
						}

						for (int i = 0; i < weekendschedule_periodtitle.size(); i++) {
							dateString = MobileUtils
									.getFieldValue(
											testCase,
											"xpath",
											"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
													+ weekendschedule_periodtitle
															.get(i).getText()
													+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
									.replaceAll("\\.", "");
							tempTime = dateString;
							if (i == 0) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekendschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_WAKE_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_WAKE_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_WAKE_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Wake's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Wake's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_WAKE_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekendschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Wake's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Wake's expected time: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 1) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekendschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_AWAY_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_AWAY_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_AWAY_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Away's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Away's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_AWAY_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekendschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Away's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Away's expected time: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 2) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekendschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_HOME_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_HOME_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_HOME_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Home's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Home's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_HOME_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekendschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Home's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Home's expected time: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							} else if (i == 3) {
								if (!MobileUtils
										.getFieldValue(
												testCase,
												"xpath",
												"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
														+ weekendschedule_periodtitle
																.get(i)
																.getText()
														+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]")
										.equalsIgnoreCase("Tap to set")) {
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs
											.getInputValue(WEEKEND_SLEEP_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_SLEEP_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_SLEEP_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																					+ weekendschedule_periodtitle
																							.get(i)
																							.getText()
																					+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Sleep's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Sleep's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_SLEEP_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getFieldValue(
																	testCase,
																	"xpath",
																	"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																			+ weekendschedule_periodtitle
																					.get(i)
																					.getText()
																			+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Sleep's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Sleep's expected time: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//*[contains(@content-desc,'_Saturday-Sunday')]//android.widget.RelativeLayout/android.widget.TextView[@text='"
																				+ weekendschedule_periodtitle
																						.get(i)
																						.getText()
																				+ "']/ancestor::android.widget.LinearLayout/android.widget.TextView[1]"));
									}
								}
							}
						}
					}
				}
			} else {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					// if (MobileUtils.isMobElementExists("name", "Everyday",
					// testCase, 10)) {
					try {
						/*
						 * testCase.getMobileDriver().findElement(By.name(
						 * "Everyday")); Keyword.ReportStep_Pass(testCase,
						 * "Verify Displayed Schedule : Everyday text displayed on schedule screen"
						 * );
						 */
						schedule_periodtimes = MobileUtils.getMobElements(
								testCase, "name", "Everyday_Time");
						if (inputs.getInputValue(JASPER_STAT_TYPE)
								.equalsIgnoreCase("EMEA")) {
							for (int i = 1; i <= schedule_periodtimes.size(); i++) {
								Keyword.ReportStep_Pass(
										testCase,
										"*********************** Verifying schedule period time and schedule period heat set points against set values **************************");
								dateString = schedule_periodtimes.get(i - 1)
										.getAttribute("value")
										.replaceAll("\\.", "");
								tempTime = dateString;
								try {
									if (!dateString.contains("m")
											&& !dateString.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(dateString.split("\\s+")[0]);
										tempTime = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (i == 1) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_1_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_1_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_1_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_1_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_1_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 1's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 1's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								} else if (i == 2) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_2_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_2_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_2_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_2_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_2_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 2's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 2's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								} else if (i == 3) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_3_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_3_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_3_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_3_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_3_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 3's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 3's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								} else if (i == 4) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_4_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_4_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_4_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_4_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_4_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 4's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 4's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								} else if (i == 5) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_5_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_5_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_5_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_5_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_5_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 5's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 5's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								} else if (i == 6) {
									tempHeatSetPointApp = MobileUtils
											.getMobElement(testCase, "name",
													"Everyday_6_HeatTemperature")
											.getAttribute("value");
									if (tempHeatSetPointApp.contains(".0")) {
										tempHeatSetPointApp = tempHeatSetPointApp
												.split("\\.")[0];
									}
									tempHeatSetPointFromInputs = inputs
											.getInputValue(EVERYDAY_6_HEAT_SETPOINT);
									if (inputs.getInputValue(
											EVERYDAY_6_HEAT_SETPOINT).contains(
											".0")) {
										tempHeatSetPointFromInputs = inputs
												.getInputValue(
														EVERYDAY_6_HEAT_SETPOINT)
												.split("\\.")[0];
									}
									tempTimeInputs = inputs
											.getInputValue(EVERYDAY_6_TIME);
									try {
										if (!tempTimeInputs.contains("m")
												&& !tempTimeInputs
														.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(tempTimeInputs
															.split("\\s+")[0]);
											tempTimeInputs = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (tempTimeInputs
											.equalsIgnoreCase(tempTime)
											&& tempHeatSetPointFromInputs
													.equalsIgnoreCase(tempHeatSetPointApp)) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period 6's expected time and heat set point are shown correctly: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs);
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period 6's expected time and heat set point: "
														+ tempTimeInputs
														+ " "
														+ tempHeatSetPointFromInputs
														+ " are not shown correctly: "
														+ tempTime + " "
														+ tempHeatSetPointApp);
									}
								}
							}
						} else if (inputs.getInputValue(JASPER_STAT_TYPE)
								.equalsIgnoreCase("NA")) {
							List<WebElement> schedule_periodtitle = MobileUtils
									.getMobElements(testCase, "xpath",
											"//UIATableGroup[@name='Everyday']/following-sibling::UIATableCell");
							for (int i = 0; i < schedule_periodtitle.size(); i++) {
								Keyword.ReportStep_Pass(
										testCase,
										"*********************** Verifying schedule period time and schedule period heat set points against set values **************************");
								dateString = MobileUtils.getMobElement(
										testCase,
										"xpath",
										"//UIATableCell[" + (i + 1)
												+ "]/UIAStaticText[2]")
										.getAttribute("value");
								tempTime = dateString;
								if (i == 0) {
									if (!tempTime
											.equalsIgnoreCase("Tap to set")) {
										try {
											if (!dateString.contains("m")
													&& !dateString
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(dateString
																.split("\\s+")[0]);
												tempTime = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										tempHeatSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Wake_HeatTemperature")
												.getAttribute("value");
										tempCoolSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Wake_CoolTemperature")
												.getAttribute("value");
										if (inputs.getInputValue(
												EVERYDAY_WAKE_TIME)
												.equalsIgnoreCase(tempTime)
												&& inputs
														.getInputValue(
																EVERYDAY_WAKE_HEAT_SETPOINT)
														.equalsIgnoreCase(
																tempHeatSetPointApp)
												&& inputs
														.getInputValue(
																EVERYDAY_WAKE_COOL_SETPOINT)
														.equalsIgnoreCase(
																tempCoolSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period WAKE's expected time and heat and cool set points are shown correctly: "
															+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period WAKE's expected time and heat and cool set points: "
															+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT)
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp
															+ " "
															+ tempCoolSetPointApp);
										}
									} else {
										if (inputs.getInputValue(
												EVERYDAY_WAKE_TIME)
												.equalsIgnoreCase(tempTime)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period WAKE's expected time is shown correctly: "
															+ inputs.getInputValue(EVERYDAY_WAKE_TIME));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period WAKE's expected time: "
															+ inputs.getInputValue(EVERYDAY_WAKE_TIME)
															+ " is not shown correctly: "
															+ tempTime);
										}
									}
								} else if (i == 1) {
									if (!tempTime
											.equalsIgnoreCase("Tap to set")) {
										try {
											if (!dateString.contains("m")
													&& !dateString
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(dateString
																.split("\\s+")[0]);
												tempTime = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										tempHeatSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Away_HeatTemperature")
												.getAttribute("value");
										tempCoolSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Away_CoolTemperature")
												.getAttribute("value");
										if (inputs.getInputValue(
												EVERYDAY_AWAY_TIME)
												.equalsIgnoreCase(tempTime)
												&& inputs
														.getInputValue(
																EVERYDAY_AWAY_HEAT_SETPOINT)
														.equalsIgnoreCase(
																tempHeatSetPointApp)
												&& inputs
														.getInputValue(
																EVERYDAY_AWAY_COOL_SETPOINT)
														.equalsIgnoreCase(
																tempCoolSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period AWAY's expected time and heat and cool set points are shown correctly: "
															+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period AWAY's expected time and heat and cool set points: "
															+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT)
															+ " are not shown correctly: "
															+ tempTime
															+ " "
															+ tempHeatSetPointApp
															+ " "
															+ tempCoolSetPointApp);
										}
									} else {
										if (inputs.getInputValue(
												EVERYDAY_AWAY_TIME)
												.equalsIgnoreCase(tempTime)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period AWAY's expected time is shown correctly: "
															+ inputs.getInputValue(EVERYDAY_AWAY_TIME));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period AWAY's expected time: "
															+ inputs.getInputValue(EVERYDAY_AWAY_TIME)
															+ " is not shown correctly: "
															+ tempTime);
										}
									}
								} else if (i == 2) {
									if (!tempTime
											.equalsIgnoreCase("Tap to set")) {
										try {
											if (!dateString.contains("m")
													&& !dateString
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(dateString
																.split("\\s+")[0]);
												tempTime = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										tempHeatSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Home_HeatTemperature")
												.getAttribute("value");
										tempCoolSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Home_CoolTemperature")
												.getAttribute("value");
										if (inputs.getInputValue(
												EVERYDAY_HOME_TIME)
												.equalsIgnoreCase(tempTime)
												&& inputs
														.getInputValue(
																EVERYDAY_HOME_HEAT_SETPOINT)
														.equalsIgnoreCase(
																tempHeatSetPointApp)
												&& inputs
														.getInputValue(
																EVERYDAY_HOME_COOL_SETPOINT)
														.equalsIgnoreCase(
																tempCoolSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period HOME's expected time and heat and cool set points are shown correctly: "
															+ inputs.getInputValue(EVERYDAY_HOME_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_HOME_COOL_SETPOINT));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period HOME's expected time and heat and cool set points: "
															+ inputs.getInputValue(EVERYDAY_HOME_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_HOME_COOL_SETPOINT)
															+ " are not shown correctly: "
															+ tempTime

															+ " "
															+ tempHeatSetPointApp
															+ " "
															+ tempCoolSetPointApp);
										}
									} else {
										if (inputs.getInputValue(
												EVERYDAY_HOME_TIME)
												.equalsIgnoreCase(tempTime)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period HOME's expected time is shown correctly: "
															+ inputs.getInputValue(EVERYDAY_HOME_TIME));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period HOME's expected time: "
															+ inputs.getInputValue(EVERYDAY_HOME_TIME)
															+ " is not shown correctly: "
															+ tempTime);
										}
									}
								} else if (i == 3) {
									if (!tempTime
											.equalsIgnoreCase("Tap to set")) {
										try {
											if (!dateString.contains("m")
													&& !dateString
															.contains("M")) {
												final SimpleDateFormat sdf = new SimpleDateFormat(
														"H:mm");
												final Date dateObj1 = sdf
														.parse(dateString
																.split("\\s+")[0]);
												tempTime = new SimpleDateFormat(
														"hh:mm aa")
														.format(dateObj1);
											}
										} catch (NumberFormatException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[NumberFormatException] Error message: "
															+ e.getMessage());
										} catch (ParseException e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[ParseException] Error message: "
															+ e.getMessage());
										} catch (Exception e) {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"[Exception] Error message: "
															+ e.getMessage());
										}
										tempHeatSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Sleep_HeatTemperature")
												.getAttribute("value");
										tempCoolSetPointApp = MobileUtils
												.getMobElement(testCase,
														"name",
														"Everyday_Sleep_CoolTemperature")
												.getAttribute("value");
										if (inputs.getInputValue(
												EVERYDAY_SLEEP_TIME)
												.equalsIgnoreCase(tempTime)
												&& inputs
														.getInputValue(
																EVERYDAY_SLEEP_HEAT_SETPOINT)
														.equalsIgnoreCase(
																tempHeatSetPointApp)
												&& inputs
														.getInputValue(
																EVERYDAY_SLEEP_COOL_SETPOINT)
														.equalsIgnoreCase(
																tempCoolSetPointApp)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period SLEEP's expected time and heat and cool set points are shown correctly: "
															+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period SLEEP's expected time and heat and cool set points: "
															+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
															+ " "
															+ inputs.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT)
															+ " "
															+ inputs.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT)
															+ " are not shown correctly: "
															+ tempTime

															+ " "
															+ tempHeatSetPointApp
															+ " "
															+ tempCoolSetPointApp);
										}
									} else {
										if (inputs.getInputValue(
												EVERYDAY_SLEEP_TIME)
												.equalsIgnoreCase(tempTime)) {
											Keyword.ReportStep_Pass(
													testCase,
													"Period SLEEP's expected time is shown correctly: "
															+ inputs.getInputValue(EVERYDAY_SLEEP_TIME));
										} else {
											flag = false;
											Keyword.ReportStep_Fail(
													testCase,
													FailType.FUNCTIONAL_FAILURE,
													"Period SLEEP's expected time: "
															+ inputs.getInputValue(EVERYDAY_SLEEP_TIME)
															+ " is not shown correctly: "
															+ tempTime);
										}
									}
								}
							}
						}
					} catch (NoSuchElementException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Everyday text not displayed on schedule screen");
					}

					/*
					 * } else { flag = false; Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "Verify Displayed Schedule : Everyday text not displayed on schedule screen"
					 * ); }
					 */
				} else {
					/*
					 * if (MobileUtils.isMobElementExists("name",
					 * "Monday - Friday", testCase, 10)) { try {
					 * testCase.getMobileDriver().findElement(By.name(
					 * "Monday - Friday")); Keyword.ReportStep_Pass(testCase,
					 * "Verify Displayed Schedule : Monday-Friday text displayed on schedule screen"
					 * ); } catch (NoSuchElementException e) { flag = false;
					 * Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "Verify Displayed Schedule : Monday-Friday text not displayed on schedule screen"
					 * ); }
					 * 
					 * } else { flag = false; Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "Verify Displayed Schedule : Monday-Friday text not displayed on schedule screen"
					 * ); } if (MobileUtils.isMobElementExists("name",
					 * "Saturday - Sunday", testCase, 10)) { try {
					 * testCase.getMobileDriver().findElement(By.name(
					 * "Saturday - Sunday")); Keyword.ReportStep_Pass(testCase,
					 * "Verify Displayed Schedule : Saturday-Sunday text displayed on schedule screen"
					 * ); } catch (NoSuchElementException e) { flag = false;
					 * Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "Verify Displayed Schedule : Saturday-Sunday text not displayed on schedule screen"
					 * ); }
					 * 
					 * } else { flag = false; Keyword.ReportStep_Fail(testCase,
					 * FailType.FUNCTIONAL_FAILURE,
					 * "Verify Displayed Schedule : Saturday-Sunday text not displayed on schedule screen"
					 * ); }
					 */
					if (!inputs.getInputValue(JasperUtils.JASPER_STAT_TYPE)
							.equalsIgnoreCase("EMEA")) {

						List<WebElement> schedule_periodtitle_weekday = MobileUtils
								.getMobElements(
										testCase,
										"xpath",
										"//UIATableGroup[@name='Monday - Friday']/following-sibling::UIATableCell[not(contains(@name,'Saturday - Sunday')) and count(preceding-sibling::UIATableGroup)=1]");
						List<WebElement> schedule_periodtitle_weekdend = MobileUtils
								.getMobElements(
										testCase,
										"xpath",
										"//UIATableGroup[@name='Saturday - Sunday']/following-sibling::UIATableCell[not(contains(@name,'Monday - Saturday')) and count(following-sibling::UIATableGroup)=1]");
						schedule_periodtimes_weekday = MobileUtils
								.getMobElements(testCase, "name",
										"Monday - Friday_Time");
						List<WebElement> schedule_periodtimes_weekend = MobileUtils
								.getMobElements(testCase, "name",
										"Saturday - Sunday_Time");
						Keyword.ReportStep_Pass(
								testCase,
								"*********************** Verifying Weekday-Weekend schedule period time and schedule period heat set points against set values **************************");

						int j = 0;
						for (int i = 1; i <= schedule_periodtitle_weekday
								.size(); i++) {
							if (i == 1) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + i
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekday
											.get(j).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_WAKE_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_WAKE_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_WAKE_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Wake's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Wake's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_WAKE_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_WAKE_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ i
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Wake's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Wake's expected time: "
														+ inputs.getInputValue(WEEKDAY_WAKE_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ i
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 2) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + i
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekday
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_AWAY_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_AWAY_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_AWAY_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Away's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Away's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_AWAY_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_AWAY_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ i
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Away's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Away's expected time: "
														+ inputs.getInputValue(WEEKDAY_AWAY_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ i
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 3) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + i
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekday
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKDAY_HOME_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_HOME_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_HOME_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Home's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_HEAT_SETPOINT)
														+ inputs.getInputValue(WEEKDAY_HOME_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Home's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_HOME_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_HOME_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ i
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Home's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Home's expected time: "
														+ inputs.getInputValue(WEEKDAY_HOME_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ i
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 4) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + i
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekday
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs
											.getInputValue(WEEKDAY_SLEEP_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKDAY_SLEEP_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKDAY_SLEEP_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Sleep's expected weekday time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Sleep's expected weekday time and heat and cool set points: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKDAY_SLEEP_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Monday - Friday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKDAY_SLEEP_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ i
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekday-Sleep's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekday-Sleep's expected time: "
														+ inputs.getInputValue(WEEKDAY_SLEEP_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ i
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							}

						}
						j = 0;
						for (int i = 1; i <= schedule_periodtitle_weekdend
								.size(); i++) {
							if (i == 1) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + (i + 4)
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekend
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_WAKE_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_WAKE_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_WAKE_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Wake's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Wake's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_WAKE_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Wake']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_WAKE_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ (i + 4)
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Wake's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Wake's expected time: "
														+ inputs.getInputValue(WEEKEND_WAKE_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ (i + 4)
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 2) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + (i + 4)
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekend
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_AWAY_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_AWAY_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_AWAY_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Away's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Away's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_AWAY_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Away']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_AWAY_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ (i + 4)
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Away's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Away's expected time: "
														+ inputs.getInputValue(WEEKEND_AWAY_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ (i + 4)
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 3) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + (i + 4)
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekend
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs.getInputValue(WEEKEND_HOME_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_HOME_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_HOME_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Home's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Home's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_HOME_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Friday')]/UIAStaticText[@value='Home']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_HOME_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ (i + 4)
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Home's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Home's expected time: "
														+ inputs.getInputValue(WEEKEND_HOME_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ (i + 4)
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							} else if (i == 4) {
								if (!MobileUtils
										.getMobElement(
												testCase,
												"xpath",
												"//UIATableCell[" + (i + 4)
														+ "]/UIAStaticText[2]")
										.getAttribute("value")
										.equalsIgnoreCase("Tap to set")) {
									dateString = schedule_periodtimes_weekend
											.get(j - 1).getAttribute("value");
									tempTime = dateString;
									j++;
									try {
										if (!dateString.contains("m")
												&& !dateString.contains("M")) {
											final SimpleDateFormat sdf = new SimpleDateFormat(
													"H:mm");
											final Date dateObj1 = sdf
													.parse(dateString
															.split("\\s+")[0]);
											tempTime = new SimpleDateFormat(
													"hh:mm aa")
													.format(dateObj1);
										}
									} catch (NumberFormatException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[NumberFormatException] Error message: "
														+ e.getMessage());
									} catch (ParseException e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[ParseException] Error message: "
														+ e.getMessage());
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[Exception] Error message: "
														+ e.getMessage());
									}
									if (inputs
											.getInputValue(WEEKEND_SLEEP_TIME)
											.equalsIgnoreCase(tempTime)
											&& inputs
													.getInputValue(
															WEEKEND_SLEEP_HEAT_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[3]"))
											&& inputs
													.getInputValue(
															WEEKEND_SLEEP_COOL_SETPOINT)
													.equalsIgnoreCase(
															MobileUtils
																	.getFieldValue(
																			testCase,
																			"xpath",
																			"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[2]"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Sleep's expected Weekend time and heat and cool set points are shown correctly: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_COOL_SETPOINT));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Sleep's expected Weekend time and heat and cool set points: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_HEAT_SETPOINT)
														+ " "
														+ inputs.getInputValue(WEEKEND_SLEEP_COOL_SETPOINT)
														+ " are not shown correctly: "
														+ tempTime
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[3]")
														+ " "
														+ MobileUtils
																.getFieldValue(
																		testCase,
																		"xpath",
																		"//UIATableCell[contains(@name,'Saturday - Sunday')]/UIAStaticText[@value='Sleep']/following-sibling::UIAStaticText[2]"));
									}
								} else {
									if (inputs
											.getInputValue(WEEKEND_SLEEP_TIME)
											.equalsIgnoreCase(
													MobileUtils
															.getMobElement(
																	testCase,
																	"xpath",
																	"//UIATableCell["
																			+ (i + 4)
																			+ "]/UIAStaticText[2]")
															.getAttribute(
																	"value"))) {
										Keyword.ReportStep_Pass(
												testCase,
												"Period Weekend-Sleep's expected time is shown correctly: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME));
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"Period Weekend-Sleep's expected time: "
														+ inputs.getInputValue(WEEKEND_SLEEP_TIME)
														+ " is not shown correctly: "
														+ MobileUtils
																.getMobElement(
																		testCase,
																		"xpath",
																		"//UIATableCell["
																				+ (i + 4)
																				+ "]/UIAStaticText[2]")
																.getAttribute(
																		"value"));
									}
								}
							}
						}
					} else {
						// start//////////////////////////
						schedule_periodtimes_weekday = MobileUtils
								.getMobElements(testCase, "name",
										"Monday - Friday_Time");
						List<WebElement> schedule_weekday_heatsetpoints = MobileUtils
								.getMobElements(testCase, "xpath",
										"//*[contains(@name,'Monday - Friday')]//*[contains(@name,'HeatTemperature')]");
						List<WebElement> schedule_weekend_heatsetpoints = MobileUtils
								.getMobElements(
										testCase,
										"xpath",
										"//*[contains(@name,'Saturday - Sunday')]//*[contains(@name,'HeatTemperature')]");
						List<WebElement> schedule_periodtimes_weekend = MobileUtils
								.getMobElements(testCase, "name",
										"Saturday - Sunday_Time");
						Keyword.ReportStep_Pass(
								testCase,
								"*********************** Verifying Weekday-Weekend schedule period time and schedule period heat set points against set values **************************");

						for (int i = 1; i <= schedule_periodtimes_weekday
								.size(); i++) {
							dateString = schedule_periodtimes_weekday
									.get(i - 1).getAttribute("value");
							tempTime = dateString;
							try {
								if (!dateString.contains("m")
										&& !dateString.contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf.parse(dateString
											.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 1) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_1_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_1_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_1_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekday_heatsetpoints
										.get(0).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_1_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 1's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 1's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 2) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_2_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_2_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_2_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekday_heatsetpoints
										.get(1).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_2_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 2's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 2's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 3) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_3_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_3_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_3_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekday_heatsetpoints
										.get(2).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_3_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 3's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 3's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 4) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKDAY_4_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKDAY_4_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKDAY_4_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekday_heatsetpoints
										.get(3).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKDAY_4_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 4's expected weekday time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 4's expected weekday time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							}

						}
						for (int i = 1; i <= schedule_periodtimes_weekend
								.size(); i++) {
							dateString = schedule_periodtimes_weekend
									.get(i - 1).getAttribute("value");
							tempTime = dateString;
							try {
								if (!dateString.contains("m")
										&& !dateString.contains("M")) {
									final SimpleDateFormat sdf = new SimpleDateFormat(
											"H:mm");
									final Date dateObj1 = sdf.parse(dateString
											.split("\\s+")[0]);
									tempTime = new SimpleDateFormat("hh:mm aa")
											.format(dateObj1);
								}
							} catch (NumberFormatException e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[NumberFormatException] Error message: "
												+ e.getMessage());
							} catch (ParseException e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[ParseException] Error message: "
												+ e.getMessage());
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Exception] Error message: "
												+ e.getMessage());
							}
							if (i == 1) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_1_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_1_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_1_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekend_heatsetpoints
										.get(0).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_1_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 1's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 1's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 2) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_2_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_2_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_2_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekend_heatsetpoints
										.get(1).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_2_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 2's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 2's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 3) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_3_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_3_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_3_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekend_heatsetpoints
										.get(2).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_3_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 3's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 3's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							} else if (i == 4) {
								tempHeatSetPointFromInputs = inputs
										.getInputValue(WEEKEND_4_HEAT_SETPOINT);
								if (inputs.getInputValue(
										WEEKEND_4_HEAT_SETPOINT).contains(".0")) {
									tempHeatSetPointFromInputs = inputs
											.getInputValue(
													WEEKEND_4_HEAT_SETPOINT)
											.split("\\.")[0];
								}
								tempHeatSetPointApp = schedule_weekend_heatsetpoints
										.get(3).getAttribute("value");
								if (tempHeatSetPointApp.contains(".0")) {
									tempHeatSetPointApp = tempHeatSetPointApp
											.split("\\.")[0];
								}
								tempTimeInputs = inputs
										.getInputValue(WEEKEND_4_TIME);
								try {
									if (!tempTimeInputs.contains("m")
											&& !tempTimeInputs.contains("M")) {
										final SimpleDateFormat sdf = new SimpleDateFormat(
												"H:mm");
										final Date dateObj1 = sdf
												.parse(tempTimeInputs
														.split("\\s+")[0]);
										tempTimeInputs = new SimpleDateFormat(
												"hh:mm aa").format(dateObj1);
									}
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error message: "
													+ e.getMessage());
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error message: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error message: "
													+ e.getMessage());
								}
								if (tempTimeInputs.equalsIgnoreCase(tempTime)
										&& tempHeatSetPointFromInputs
												.equalsIgnoreCase(tempHeatSetPointApp)) {
									Keyword.ReportStep_Pass(
											testCase,
											"Period 4's expected Weekend time and heat set point are shown correctly: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Period 4's expected Weekend time and heat set point: "
													+ tempTimeInputs
													+ " "
													+ tempHeatSetPointFromInputs
													+ " are not shown correctly: "
													+ tempTime + " "
													+ tempHeatSetPointApp);
								}
							}

						}
						// end/////////////////////////
					}
				}
			}

			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Completed verifying time based schedule on Primary Card **************************");
		} else if (scheduleType.equalsIgnoreCase("geofence")) {
			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Verifying goefence based schedule on Primary Card **************************");

			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

				if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
						+ "\u2019" + "m Home']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Displayed Schedule : When I'm Home text displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : When I'm Home text not displayed on schedule screen");
				}

				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Home Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
				}

				if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
						.equalsIgnoreCase("No")) {
					if (MobileUtils.isMobElementExists("xpath",
							"//*[@text='Create Sleep Settings']", testCase, 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule :Create Sleep Settings option not displayed on schedule screen");
					}
				} else {
					if (MobileUtils.isMobElementExists("xpath",
							"//*[@text='Use My Sleep Settings']", testCase, 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule :Use My Sleep Settings option not displayed on schedule screen");
					}
				}

				if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
						+ "\u2019" + "m Away']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Displayed Schedule : When I'm Away text displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : When I'm Away text not displayed on schedule screen");
				}

				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Away Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
				}
			} else {
				/*
				 * if (MobileUtils.isMobElementExists("name", "When I'm Home",
				 * testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Verify Displayed Schedule : When I'm Home text displayed on schedule screen"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Verify Displayed Schedule : When I'm Home text not displayed on schedule screen"
				 * ); }
				 */

				if (MobileUtils.isMobElementExists("name", "Geofence_Home",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
				}

				if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
						.equalsIgnoreCase("No")) {
					if (MobileUtils.isMobElementExists("name",
							"Create Sleep Settings", testCase, 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Create Sleep Settings option not displayed on schedule screen");
					}
				} else {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Sleep", testCase, 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Displayed Schedule : Use My Sleep Settings option not displayed on schedule screen");
					}
				}

				/*
				 * if (MobileUtils.isMobElementExists("name", "When I'm Away",
				 * testCase, 5)) { Keyword.ReportStep_Pass(testCase,
				 * "Verify Displayed Schedule : When I'm Away text displayed on schedule screen"
				 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Verify Displayed Schedule : When I'm Away text not displayed on schedule screen"
				 * ); }
				 */

				if (MobileUtils.isMobElementExists("name", "Geofence_Away",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
				}
			}
			// ============================================ANDROID============================================================
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_heating_point", testCase, 5)) {
					schedule_setpoints = MobileUtils.getMobElements(testCase,
							"ID", "scheduling_period_heating_point");
					tempHeatSetPointApp = schedule_setpoints.get(0).getText();
					if (schedule_setpoints.get(0).getText().contains(".0")) {
						tempHeatSetPointApp = schedule_setpoints.get(0)
								.getText().split("\\.")[0];
					}
					tempHeatSetPointFromInputs = inputs
							.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
					if (tempHeatSetPointFromInputs.contains(".0")) {
						tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
								.split("\\.")[0];
					}
					if (tempHeatSetPointApp
							.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
						Keyword.ReportStep_Pass(testCase,
								"[HomeSettings] Home set point is shown correctly in solution card: "
										+ tempHeatSetPointApp);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[HomeSettings] Home set point: "
										+ tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: "
										+ tempHeatSetPointApp);
					}
					if (inputs.getInputValue(
							JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
							.equalsIgnoreCase("Yes")) {
						tempHeatSetPointApp = schedule_setpoints.get(1)
								.getText();
						if (schedule_setpoints.get(1).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(1)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}

						SleepStartEndTime = MobileUtils.getMobElement(testCase,
								"ID", "scheduling_period_startEnd_time")
								.getText();

						dateString = SleepStartEndTime.replaceAll("\\.", "");
						String startTimeTemp, endTimeTemp;
						try {
							if (!dateString.contains("m")
									&& !dateString.contains("M")) {
								final SimpleDateFormat sdf = new SimpleDateFormat(
										"H:mm");
								final Date dateObj1 = sdf
										.parse(SleepStartEndTime.split("\\s+")[0]);
								startTimeTemp = new SimpleDateFormat("hh:mm aa")
										.format(dateObj1);
								final Date dateObj2 = sdf
										.parse(SleepStartEndTime.split("\\s+")[2]);
								endTimeTemp = new SimpleDateFormat("hh:mm aa")
										.format(dateObj2);
								SleepStartEndTime = startTimeTemp + " - "
										+ endTimeTemp;
							}
							SleepStartTime = SleepStartEndTime.split("\\s+")[0]
									+ " " + SleepStartEndTime.split("\\s+")[1];
							SleepEndTime = SleepStartEndTime.split("\\s+")[3]
									+ " " + SleepStartEndTime.split("\\s+")[4];

						} catch (NumberFormatException e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[NumberFormatException] Error message: "
											+ e.getMessage());
						} catch (ParseException e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[ParseException] Error message: "
											+ e.getMessage());
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[Exception] Error message: "
											+ e.getMessage());
						}

						if (SleepStartTime
								.equalsIgnoreCase(inputs
										.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME))) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep Start time is shown correctly in solution card: "
											+ SleepStartTime);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep Start time: "
											+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME)
											+ " is not shown correctly in solution card: "
											+ SleepStartTime);
						}
						if (SleepEndTime
								.equalsIgnoreCase(inputs
										.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME))) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep End time is shown correctly in solution card: "
											+ SleepEndTime);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep End time: "
											+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME)
											+ " is not shown correctly in solution card: "
											+ SleepEndTime);
						}

						tempHeatSetPointApp = schedule_setpoints.get(2)
								.getText();
						if (schedule_setpoints.get(2).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(2)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Away set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Away set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						tempHeatSetPointApp = schedule_setpoints.get(1)
								.getText();
						if (schedule_setpoints.get(1).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(1)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Away set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Away set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Geofence schedule set points in solution card");
				}
			}
			// ================================================IOS================================================================
			else {
				if (MobileUtils.isMobElementExists("name",
						"Geofence_Home_HeatTemperature", testCase, 5)) {
					homeHeatSetPointIOS = MobileUtils.getMobElement(testCase,
							"name", "Geofence_Home_HeatTemperature");
					tempHeatSetPointApp = homeHeatSetPointIOS
							.getAttribute("value");
					if (tempHeatSetPointApp.contains(".0")) {
						tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
					}
					tempHeatSetPointFromInputs = inputs
							.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
					if (tempHeatSetPointFromInputs.contains(".0")) {
						tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
								.split("\\.")[0];
					}
					if (tempHeatSetPointApp
							.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
						Keyword.ReportStep_Pass(testCase,
								"[HomeSettings] Home set point is shown correctly in solution card: "
										+ tempHeatSetPointApp);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[HomeSettings] Home set point: "
										+ tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: "
										+ tempHeatSetPointApp);
					}
					if (inputs.getInputValue(
							JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
							.equalsIgnoreCase("Yes")) {
						sleepHeatSetPointIOS = MobileUtils.getMobElement(
								testCase, "name",
								"Geofence_Sleep_HeatTemperature");
						tempHeatSetPointApp = sleepHeatSetPointIOS
								.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}

						SleepStartEndTime = MobileUtils.getMobElement(testCase,
								"name", "Geofence_SleepTimeInterval")
								.getAttribute("value");

						dateString = SleepStartEndTime.replaceAll("\\.", "");
						String startTimeTemp, endTimeTemp;
						try {
							if (!dateString.contains("m")
									&& !dateString.contains("M")) {
								final SimpleDateFormat sdf = new SimpleDateFormat(
										"H:mm");
								final Date dateObj1 = sdf
										.parse(SleepStartEndTime.split("\\s+")[0]);
								startTimeTemp = new SimpleDateFormat("hh:mm aa")
										.format(dateObj1);
								final Date dateObj2 = sdf
										.parse(SleepStartEndTime.split("\\s+")[2]);
								endTimeTemp = new SimpleDateFormat("hh:mm aa")
										.format(dateObj2);
								SleepStartEndTime = startTimeTemp + " - "
										+ endTimeTemp;
							}
							SleepStartTime = SleepStartEndTime.split("\\s+")[0]
									+ " " + SleepStartEndTime.split("\\s+")[1];
							SleepEndTime = SleepStartEndTime.split("\\s+")[3]
									+ " " + SleepStartEndTime.split("\\s+")[4];

						} catch (NumberFormatException e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[NumberFormatException] Error message: "
											+ e.getMessage());
						} catch (ParseException e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[ParseException] Error message: "
											+ e.getMessage());
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[Exception] Error message: "
											+ e.getMessage());
						}

						if (SleepStartTime
								.equalsIgnoreCase(inputs
										.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME))) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep Start time is shown correctly in solution card: "
											+ SleepStartTime);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep Start time: "
											+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME)
											+ " is not shown correctly in solution card: "
											+ SleepStartTime);
						}
						if (SleepEndTime
								.equalsIgnoreCase(inputs
										.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME))) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Sleep End time is shown correctly in solution card: "
											+ SleepEndTime);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Sleep End time: "
											+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME)
											+ " is not shown correctly in solution card: "
											+ SleepEndTime);
						}

						awayHeatSetPointIOS = MobileUtils.getMobElement(
								testCase, "name",
								"Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = awayHeatSetPointIOS
								.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						awayHeatSetPointIOS = MobileUtils.getMobElement(
								testCase, "name",
								"Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = awayHeatSetPointIOS
								.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[SleepSettings] Away set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[SleepSettings] Away set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Geofence schedule set points in solution card");
				}
			}
			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Completed verifying geofence based schedule on Primary Card **************************");
		} else if (scheduleType.equalsIgnoreCase("no schedule")) {
			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Verifying no schedule on Primary Card **************************");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"NoScheduleText", 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Displayed Schedule : No schedule text displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : No schedule not text displayed on schedule screen");
			}
			Keyword.ReportStep_Pass(
					testCase,
					"*********************** Completed verifying no schedule on Primary Card **************************");
		}
		try {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				testCase.getMobileDriver()
						.findElement(
								By.xpath("//*[@content-desc='Navigate Up']"))
						.click();
			} else {
				if (MobileUtils.isMobElementExists("name", "btn close normal",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"btn close normal")) {
						flag = false;
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to navigate back to Primary Card: Error message-"
							+ e.getMessage());
		}

		return flag;
	}

	public static boolean verifyDisplayedSetPoints(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String chilDeviceSystemMode = statInfo.getThermoStatMode();
		String chilDeviceID = statInfo.getDeviceID();
		String appDeviceSetPoints = " ";
		WebElement dialer;

		if (chilDeviceSystemMode.equalsIgnoreCase("Off")) {
			Keyword.ReportStep_Pass(
					testCase,
					"Verify Displayed Set Points : System mode is off. Hence, not verifying set points");
			return true;
		} else {
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				dialer = MobileUtils.getMobElement(testCase, "name", "Dialer_"
						+ chilDeviceID);
				appDeviceSetPoints = dialer.getAttribute("value");
			} else {
				dialer = MobileUtils.getMobElement(fieldObjects, testCase,
						"Dialer");
				appDeviceSetPoints = MobileUtils
						.getMobElement(fieldObjects, testCase, "Dialer")
						.getAttribute("name").split(",")[1];
			}
			if (chilDeviceSystemMode.equalsIgnoreCase("Auto")) {
				chilDeviceSystemMode = statInfo
						.getThermostatModeWhenAutoChangeOverActive();
			}
			String deviceSetPoints = statInfo.getCurrentSetPoints();
			if (Double.parseDouble(deviceSetPoints)
					- Double.parseDouble(appDeviceSetPoints) == 0) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Set Points : Displayed dialer setpoint value is same as value in CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Set Points : Displayed dialer set point value is not same as value in CHIL. Dialer value : "
								+ appDeviceSetPoints
								+ ", CHIL value : "
								+ deviceSetPoints);
			}
		}
		return flag;
	}

	public static boolean verifyFromAndToDate(TestCases testCase,
			String fromDateToBeVerified, String toDateToBeVerified) {
		boolean flag = true;
		try {
			flag = flag
					& JasperUtils
							.verifyFromDate(testCase, fromDateToBeVerified);
			flag = flag
					& JasperUtils.verifyToDate(testCase, toDateToBeVerified);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyFromAndToTime(TestCases testCase,
			String fromTimeToBeVerified, String toTimeToBeVerified) {
		boolean flag = true;
		try {
			flag = flag
					& JasperUtils
							.verifyFromTime(testCase, fromTimeToBeVerified);
			flag = flag
					& JasperUtils.verifyToTime(testCase, toTimeToBeVerified);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify From And To Time : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyFromDate(TestCases testCase,
			String fromDateToBeVerified) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				List<WebElement> fromAndToDates = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				SimpleDateFormat dateFormat = new SimpleDateFormat(
						"EEE MMM dd, yyyy");
				fromDateToBeVerified = dateFormat.format(vacationDateFormat
						.parse(fromDateToBeVerified));
				String fromDate = fromAndToDates.get(0).getText();
				Keyword.ReportStep_Pass(testCase,
						"Verify From Date : Verifying displayed from date with: "
								+ fromDateToBeVerified);
				if (fromDate.equals(fromDateToBeVerified)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify From Date : Displayed from date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify From Date : Displayed from date is not correct. Displayed Date : "
									+ fromDate);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, HH:mm");
				String fromDateToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(fromDateToBeVerified));
				String fromDateToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(fromDateToBeVerified));
				String fromDate = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(0).getAttribute("value");
				Keyword.ReportStep_Pass(testCase,
						"Verify From Date : Verifying displayed from date with: "
								+ fromDateToBeVerified12Hours + " / "
								+ fromDateToBeVerified24Hours);
				if (fromDate.equals(fromDateToBeVerified12Hours)
						|| fromDate.equals(fromDateToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify From Date : Displayed from date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify From Date : Displayed from date is not correct. Displayed Date : "
									+ fromDate);
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify From Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyFromTime(TestCases testCase,
			String fromTimeToBeVerified) {
		boolean flag = true;
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			String displayedFromTime = " ";
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
				String fromTime12hours = date12Format.format(vacationDateFormat
						.parse(fromTimeToBeVerified));
				String fromTime24hours = date24Format.format(vacationDateFormat
						.parse(fromTimeToBeVerified));
				List<WebElement> fromAndToTime = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToTime");
				displayedFromTime = fromAndToTime.get(0).getText();
				Keyword.ReportStep_Pass(testCase,
						"Verify From Time : Verifying from time is set to : "
								+ fromTime12hours + " / " + fromTime24hours);
				if (displayedFromTime.replaceAll("\\.", "").toUpperCase()
						.contains(fromTime12hours)
						|| displayedFromTime.replaceAll("\\.", "")
								.toUpperCase().contains(fromTime24hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : From time is set to "
									+ displayedFromTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : From time is not set to "
									+ fromTime12hours + " / " + fromTime24hours);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, HH:mm");
				String fromTimeToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(fromTimeToBeVerified));
				String fromTimeToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(fromTimeToBeVerified));
				displayedFromTime = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(0).getAttribute("value");
				Keyword.ReportStep_Pass(testCase,
						"Verify From Date : Verifying displayed from date with: "
								+ fromTimeToBeVerified12Hours + " / "
								+ fromTimeToBeVerified24Hours);
				if (displayedFromTime.equals(fromTimeToBeVerified12Hours)
						|| displayedFromTime
								.equals(fromTimeToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : From time is set to "
									+ displayedFromTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : From time is not set to "
									+ fromTimeToBeVerified12Hours + " / "
									+ fromTimeToBeVerified24Hours);
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Set Period Time : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyGuideMessage(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		String alertTitle;
		String alertMessage;
		String deviceAlertTitle;
		String deviceAlertMessage;
		alertTitle = "End Vacation Mode?";
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			alertMessage = "Tap \u2019End\u2019 to stop your vacation settings and resume your normal schedule.";
			deviceAlertTitle = MobileUtils.getMobElement(fieldObjects,
					testCase, "EndVacationAlertTitle").getText();
			deviceAlertMessage = MobileUtils.getMobElement(fieldObjects,
					testCase, "EndVacationMessage").getText();
		} else {
			alertMessage = "Tap 'End' to stop your vacation settings and resume your normal schedule.";
			deviceAlertTitle = MobileUtils.getMobElement(fieldObjects,
					testCase, "EndVacationAlertTitle").getAttribute("value");
			deviceAlertMessage = MobileUtils.getMobElement(fieldObjects,
					testCase, "EndVacationMessage").getAttribute("value");
		}

		if (deviceAlertTitle.equals(alertTitle)) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Guide Message : Guide message alert title displayed correctly");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Guide Message : Guide message alert not displayed correctly. Displayed message : "
							+ deviceAlertTitle);
		}
		if (alertMessage.equals(deviceAlertMessage)) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Guide Message : Guide message displayed correctly");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Guide Message : Guide message not displayed correctly. Displayed message : "
							+ deviceAlertMessage);
		}
		return flag;
	}

	public static boolean verifyHeatStepperValue(TestCases testCase,
			TestCaseInputs inputs, String heatTemp,
			String verifyMinimumOrMaximum) {
		boolean flag = true;
		String heatSetPoint = " ";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, String> minMaxSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		String jasperStatType = statInfo.getJasperDeviceType();
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			heatSetPoint = MobileUtils
					.getMobElement(fieldObjects, testCase,
							"HeatSetPointChooser")
					.findElement(By.id("scheduling_period_temp_point"))
					.getText();
		} else {
			int size = MobileUtils.getMobElements(fieldObjects, testCase,
					"HeatSetPoints").size();
			if (inputs.getInputValue(GEOFENCE_PERIOD).equalsIgnoreCase(
					GEOFENCE_AWAY)
					&& (size > 1)) {
				heatSetPoint = MobileUtils
						.getMobElements(fieldObjects, testCase, "HeatSetPoints")
						.get(1).getAttribute("value");
			} else {
				heatSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "HeatSetPoints").getAttribute("value");
			}
		}

		if (verifyMinimumOrMaximum.equalsIgnoreCase("AboveMaximum")) {
			String setPoints = minMaxSetPoints.get("MaxHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Heat Stepper Value : Heat Set Point set to max set point after trying to set it to a value above maximum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to max set point after trying to set it to a value above maximum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Maximum")) {
			String setPoints = minMaxSetPoints.get("MaxHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point set to max set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to max set point");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("BelowMinimum")) {
			String setPoints = minMaxSetPoints.get("MinHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Heat Stepper Value : Heat Set Point set to min set point after trying to set it to a value below minimum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to min set point after trying to set it to a value below minimum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Minimum")) {
			String setPoints = minMaxSetPoints.get("MinHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point set to min set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to min set point");
			}
		} else {
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(heatSetPoint);
				heatSetPoint = String.valueOf(temp.intValue());
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point Successfully set to : "
								+ heatSetPoint);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat set point is not set to : "
								+ heatTemp);
			}
		}
		return flag;
	}

	public static boolean verifyHeatStepperValue(TestCases testCase,
			TestCaseInputs inputs, String heatSetPoint, String heatTemp,
			String verifyMinimumOrMaximum) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, String> minMaxSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		String jasperStatType = statInfo.getJasperDeviceType();
		if (verifyMinimumOrMaximum.equalsIgnoreCase("AboveMaximum")) {
			String setPoints = minMaxSetPoints.get("MaxHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Heat Stepper Value : Heat Set Point set to max set point after trying to set it to a value above maximum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to max set point after trying to set it to a value above maximum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Maximum")) {
			String setPoints = minMaxSetPoints.get("MaxHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point set to max set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to max set point");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("BelowMinimum")) {
			String setPoints = minMaxSetPoints.get("MinHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Heat Stepper Value : Heat Set Point set to min set point after trying to set it to a value below minimum set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to min set point after trying to set it to a value below minimum set points");
			}
		} else if (verifyMinimumOrMaximum.equalsIgnoreCase("Minimum")) {
			String setPoints = minMaxSetPoints.get("MinHeat");
			if (statInfo.getThermostatUnits()
					.equals(GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(setPoints);
				heatTemp = String.valueOf(temp.intValue());
			} else {
				if (jasperStatType.equalsIgnoreCase("EMEA")) {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							setPoints);
				} else {
					heatTemp = JasperUtils.roundOffCelsiusData(testCase,
							JasperUtils.convertFromFahrenhietToCelsius(
									testCase, setPoints));
				}
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point set to min set point");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat Set Point not set to min set point");
			}
		} else {
			if (inputs.getInputValue(JasperUtils.UNITS).equals(
					GlobalVariables.FAHRENHEIT)) {
				Double temp = Double.parseDouble(heatSetPoint);
				heatSetPoint = String.valueOf(temp.intValue());
			}
			if (heatSetPoint.equals(heatTemp)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Heat Stepper Value : Heat Set Point is set to : "
								+ heatSetPoint);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Heat Stepper Value : Heat set point is not set to : "
								+ heatTemp);
			}
		}
		return flag;
	}

	public static boolean verifyHoldUntilStatusOnPrimaryCard(
			TestCases testCase, TestCaseInputs inputs, String holdUntilTime) {
		boolean flag = true;
		try {
			FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
					testCase.getMobileDriver());
			fWait.pollingEvery(5, TimeUnit.SECONDS);
			fWait.withTimeout(30, TimeUnit.SECONDS);
			ThermostatInformation statInfo = new ThermostatInformation(
					testCase, inputs);
			String overrideTemp = "";
			String systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo
						.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Heat")) {
				overrideTemp = statInfo.getHeatSetPoints();
			} else if (systemMode.equals("Cool")) {
				overrideTemp = statInfo.getCoolSetPoints();
			}
			if (statInfo.getThermostatUnits().equalsIgnoreCase("Fahrenheit")) {
				Double temp = Double.parseDouble(overrideTemp);
				overrideTemp = String.valueOf(temp);
			}
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "AdHocOverride");
			SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat time24Format = new SimpleDateFormat("HH:mm");
			Date date = time12Format.parse(holdUntilTime);
			String nextPeriodTime12Hours = time12Format.format(date);
			String nextPeriodTime24Hours = time24Format.format(date);
			String status12Hours;
			String status24Hours;
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				status12Hours = "Hold " + overrideTemp + "\u00B0 Until "
						+ nextPeriodTime12Hours;
				status24Hours = "Hold " + overrideTemp + "\u00B0 Until "
						+ nextPeriodTime24Hours;
			} else {
				Double temp = Double.parseDouble(overrideTemp);
				if (statInfo.getThermostatUnits().equalsIgnoreCase(
						GlobalVariables.FAHRENHEIT)) {
					status12Hours = "Hold " + temp.intValue() + "\u00B0 until "
							+ nextPeriodTime12Hours;
					status24Hours = "Hold " + temp.intValue() + "\u00B0 until "
							+ nextPeriodTime24Hours;
				} else {
					status12Hours = "Hold " + overrideTemp + "\u00B0 until "
							+ nextPeriodTime12Hours;
					status24Hours = "Hold " + overrideTemp + "\u00B0 until "
							+ nextPeriodTime24Hours;
				}
			}
			try {
				Boolean isEventReceived = fWait
						.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
							public Boolean apply(
									AppiumDriver<MobileElement> driver) {
								String adHocStatus = "";
								if (MobileUtils.isMobElementExists(
										fieldObjects, testCase, "AdHocStatus",
										3)) {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										adHocStatus = MobileUtils
												.getMobElement(fieldObjects,
														testCase, "AdHocStatus")
												.getAttribute("text");
									} else {
										adHocStatus = MobileUtils
												.getMobElement(fieldObjects,
														testCase, "AdHocStatus")
												.getAttribute("label");
									}
								}
								if (status12Hours.equalsIgnoreCase(adHocStatus)
										|| status24Hours
												.equalsIgnoreCase(adHocStatus)) {
									return true;
								} else {
									return false;
								}
							}
						});
				flag = isEventReceived;
			} catch (TimeoutException e) {
				flag = false;
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Error Occured : " + e.getMessage());
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Hold Until Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
			}
			if (flag) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Hold Until Schedule Status on Primary Card : Ad hoc status is correctly displayed in the primary card with overridden set points and time");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Time Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyHoldUntilTimeIsSet(TestCases testCase,
			String time, boolean isValidTime) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "AdHocOverride");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				flag = flag
						& MobileUtils.clickOnElement(fieldObjects, testCase,
								"OkButton");
				if (isValidTime) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is set to : "
									+ time);
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"OkButton", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Failed to set hold until time to a valid time");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Successfully set hold until time to a valid time");
					}
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is not set to : "
									+ time);
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"OkButton", 5)) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Failed to set hold until time to an invalid time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Successfully set hold until time to an invalid time");
					}
				}
			} else {
				String[] dateAndTime = time.split("_");
				String currentTime = JasperUtils.getIOSSimulatorTime(testCase);
				SimpleDateFormat IOSDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				SimpleDateFormat timePickerDateFormat = new SimpleDateFormat(
						"EEE, MMM d");
				String currentDate = timePickerDateFormat.format(IOSDateFormat
						.parse(currentTime));
				SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
				Calendar c1 = Calendar.getInstance();
				c1.setTime(time12Format.parse(dateAndTime[1]));
				if (currentDate.equalsIgnoreCase(dateAndTime[0])) {
					dateAndTime[0] = "Today";
				}
				String hours = "";
				String ampm = "";
				String minutes = "";
				if (MobileUtils.isMobElementExists("xpath",
						"//UIAPickerWheel[4]", testCase, 3)) {
					int temp = c1.get(Calendar.HOUR);
					if (temp == 0) {
						temp = 12;
					}
					hours = String.valueOf(temp);
					temp = c1.get(Calendar.AM_PM);
					if (temp == Calendar.AM) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
				} else {
					hours = String.valueOf(c1.get(Calendar.HOUR_OF_DAY));
				}
				hours = hours + " o'clock";
				if (c1.get(Calendar.MINUTE) == 0) {
					minutes = "00";
				} else {
					minutes = String.valueOf(c1.get(Calendar.MINUTE));
				}
				minutes = minutes + " minutes";
				if (isValidTime) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is set to : "
									+ time);
					if (MobileUtils
							.getMobElement(testCase, "xpath",
									"//UIAPickerWheel[1]")
							.getAttribute("value")
							.equalsIgnoreCase(dateAndTime[0])) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Displayed date is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed date is not correct on the time picker");
					}
					if (MobileUtils
							.getMobElement(testCase, "xpath",
									"//UIAPickerWheel[2]")
							.getAttribute("value").equalsIgnoreCase(hours)) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Displayed hour is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed hour is not correct on the time picker");
					}

					if (MobileUtils
							.getMobElement(testCase, "xpath",
									"//UIAPickerWheel[3]")
							.getAttribute("value").equalsIgnoreCase(minutes)) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Displayed minutes is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed minutes is not correct on the time picker");
					}
					if (MobileUtils.isMobElementExists("xpath",
							"//UIAPickerWheel[4]", testCase, 3)) {
						if (MobileUtils
								.getMobElement(testCase, "xpath",
										"//UIAPickerWheel[4]")
								.getAttribute("value").trim()
								.equalsIgnoreCase(ampm.trim())) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Hold Until Time : Displayed AM/PM is correct on the time picker");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Hold Until Time : Displayed AM/PM is not correct on the time picker");
						}
					}
					flag = flag
							& MobileUtils.clickOnElement(testCase, "xpath",
									"//UIAButton[@name='Ok']");// (fieldObjects,
					// testCase,
					// "OkButton");
				} else {
					boolean validTime;
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is not set to : "
									+ time);
					if (MobileUtils.isMobElementExists("xpath",
							"//UIAPickerWheel[4]", testCase, 3)) {
						if ((MobileUtils.getMobElement(testCase, "xpath",
								"//UIAPickerWheel[1]").getAttribute("value")
								.equalsIgnoreCase(dateAndTime[0]))
								&& (MobileUtils.getMobElement(testCase,
										"xpath", "//UIAPickerWheel[2]")
										.getAttribute("value")
										.equalsIgnoreCase(hours))
								&& (MobileUtils.getMobElement(testCase,
										"xpath", "//UIAPickerWheel[3]")
										.getAttribute("value")
										.equalsIgnoreCase(minutes))
								&& (MobileUtils.getMobElement(testCase,
										"xpath", "//UIAPickerWheel[4]")
										.getAttribute("value")
										.equalsIgnoreCase(ampm))) {
							validTime = true;
						} else {
							validTime = false;
						}
					} else {
						if ((MobileUtils.getMobElement(testCase, "xpath",
								"//UIAPickerWheel[1]").getAttribute("value")
								.equalsIgnoreCase(dateAndTime[0]))
								&& (MobileUtils.getMobElement(testCase,
										"xpath", "//UIAPickerWheel[2]")
										.getAttribute("value")
										.equalsIgnoreCase(hours))
								&& (MobileUtils.getMobElement(testCase,
										"xpath", "//UIAPickerWheel[3]")
										.getAttribute("value")
										.equalsIgnoreCase(minutes))) {
							validTime = true;
						} else {
							validTime = false;
						}
					}
					if (!validTime) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Failed to set hold until time to an invalid time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Successfully set hold until time to an invalid time");
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyIndoorTemperature(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String chilDeviceIndoorTemperature = statInfo.getIndoorTemperature();
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils
					.getMobElement(fieldObjects, testCase, "IndoorTemperature")
					.getText().equals(chilDeviceIndoorTemperature)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Indoor Temperature : Indoor temperature is : "
								+ chilDeviceIndoorTemperature
								+ " in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Primary Card Elements : Indoor temperature is not the same in CHIL and app. App : "
								+ MobileUtils.getMobElement(fieldObjects,
										testCase, "IndoorTemperature")
										.getText()
								+ " ,CHIL : "
								+ chilDeviceIndoorTemperature);
			}
		} else {
			if (MobileUtils
					.getMobElement(fieldObjects, testCase, "IndoorTemperature")
					.getAttribute("value").equals(chilDeviceIndoorTemperature)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Indoor Temperature : Indoor temperature is : "
								+ chilDeviceIndoorTemperature
								+ " in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Primary Card Elements : Indoor temperature is not the same in CHIL and app. App : "
								+ MobileUtils.getMobElement(fieldObjects,
										testCase, "IndoorTemperature")
										.getAttribute("value")
								+ " ,CHIL : "
								+ chilDeviceIndoorTemperature);
			}
		}
		return flag;
	}

	public static boolean verifyPrimaryCardElements(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (!statInfo.isStatOnline()) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Primary Card Elements : Thermostat is offline");
			return true;
		}

		String chilDeviceType = statInfo.getDeviceType();

		// If device type is Jasper, verify scheduling button exists.
		if (chilDeviceType.equalsIgnoreCase("Jasper")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"TimeScheduleButton", 5)
					|| MobileUtils.isMobElementExists(fieldObjects, testCase,
							"GeofenceScheduleButton", 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Primary Card Elements : Scheduling Icon present on Primary Card");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Primary Card Elements : Scheduling Icon not present on the Primary Card");
			}
		}

		// Verify the weather icon is present
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"WeatherButton")) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Primary Card Elements : Weather Icon present on Primary Card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Primary Card Elements : Weather Icon not present on the Primary Card");
		}

		// Verify the system mode icon is displayed with the correct system mode
		flag = flag & verifySystemMode(testCase, inputs);
		flag = flag & verifyIndoorTemperature(testCase, inputs);
		flag = flag & verifyDisplayedSetPoints(testCase, inputs);
		return flag;
	}

	public static boolean verifyScheduleOffOverlayPresent(TestCases testCase,
			boolean isOverlayPresent) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (isOverlayPresent) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 10)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Schedule Off Overlay is Present : Schedule Off Overlay is visible");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Schedule Off Overlay is Present : Schedule Off Overlay is not visible");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOffOverlay", 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Schedule Off Overlay is not Present : Schedule Off Overlay is visible");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Schedule Off Overlay is not Present : Schedule Off Overlay is not visible");
			}
		}
		return flag;
	}

	public static boolean verifyScheduleRetained(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true, scheduleRetainedFlag = true;

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@content-desc='Navigate Up']", testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@content-desc='Navigate Up']")) {
					flag = false;
				}
			}
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@content-desc='Navigate Up']", testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@content-desc='Navigate Up']")) {
					flag = false;
				}
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			}
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			}
		}
		if (inputs.getInputValue(TYPE_OF_SCHEDULE_RETAINED).equalsIgnoreCase(
				GEOFENCE_BASED_SCHEDULE)) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Home Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
				} else {
					flag = false;
					scheduleRetainedFlag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
				}
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Away Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
				} else {
					flag = false;
					scheduleRetainedFlag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "Geofence_Home",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
				} else {
					flag = false;
					scheduleRetainedFlag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
				}
				if (MobileUtils.isMobElementExists("name", "Geofence_Away",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
				} else {
					flag = false;
					scheduleRetainedFlag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
				}
			}
		} else if (inputs.getInputValue(TYPE_OF_SCHEDULE_RETAINED)
				.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {

		} else if (inputs.getInputValue(TYPE_OF_SCHEDULE_RETAINED)
				.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {

		}

		if (scheduleRetainedFlag) {
			Keyword.ReportStep_Pass(testCase,
					inputs.getInputValue(TYPE_OF_SCHEDULE_RETAINED)
							+ " is retained in Solution card");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Failed to retain "
							+ inputs.getInputValue(TYPE_OF_SCHEDULE_RETAINED)
							+ " in Solution card");
		}

		return flag;
	}

	public static boolean verifySchedulingStatusOnPrimaryCard(
			TestCases testCase, TestCaseInputs inputs, String scheduleType,
			String overrideSetPoints) {
		boolean flag = true;
		FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
				testCase.getMobileDriver());
		fWait.pollingEvery(5, TimeUnit.SECONDS);
		fWait.withTimeout(30, TimeUnit.SECONDS);
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		Double overrideTemp = Double.parseDouble(overrideSetPoints);
		if (scheduleType.equalsIgnoreCase("Geofence")) {
			String status;
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				status = "Hold " + overrideTemp + "\u00B0 While "
						+ statInfo.getCurrentSchedulePeriod();
			} else {
				if (statInfo.getThermostatUnits().equalsIgnoreCase(
						GlobalVariables.FAHRENHEIT)) {
					status = "Hold " + overrideTemp.intValue()
							+ "\u00B0 while "
							+ statInfo.getCurrentSchedulePeriod();
				} else {
					status = "Hold " + overrideTemp + "\u00B0 while "
							+ statInfo.getCurrentSchedulePeriod();
				}
			}

			try {
				Boolean isEventReceived = fWait
						.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
							public Boolean apply(
									AppiumDriver<MobileElement> driver) {
								String adHocStatus = "";
								if (MobileUtils.isMobElementExists(
										fieldObjects, testCase, "AdHocStatus",
										3)) {
									if (MobileUtils.isMobElementExists(
											fieldObjects, testCase,
											"AdHocStatus", 3)) {
										if (testCase.getPlatform()
												.toUpperCase()
												.contains("ANDROID")) {
											adHocStatus = MobileUtils
													.getMobElement(
															fieldObjects,
															testCase,
															"AdHocStatus")
													.getAttribute("text");
										} else {
											adHocStatus = MobileUtils
													.getMobElement(
															fieldObjects,
															testCase,
															"AdHocStatus")
													.getAttribute("label");
										}
									}
								}
								if (status.equalsIgnoreCase(adHocStatus)) {
									return true;
								} else {
									return false;
								}
							}
						});
				flag = isEventReceived;
			} catch (TimeoutException e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Geofence Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points");
			}
			if (flag) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Geofence Schedule Status on Primary Card : Ad hoc status is correctly displayed in the primary card with overridden set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Geofence Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points");
			}
		} else if (scheduleType.equalsIgnoreCase("Time")) {
			try {
				String thermostatSetPointStatus = statInfo
						.getThermostatSetPointsStatus();
				if (thermostatSetPointStatus.equalsIgnoreCase("Permanent Hold")) {
					String status;
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						status = "Hold " + overrideTemp + "\u00B0 Permanently";
					} else {
						if (statInfo.getThermostatUnits().equalsIgnoreCase(
								GlobalVariables.FAHRENHEIT)) {
							status = "Hold " + overrideTemp.intValue()
									+ "\u00B0 Permanently";
						} else {
							status = "Hold " + overrideTemp
									+ "\u00B0 Permanently";
						}
					}
					try {
						Boolean isEventReceived = fWait
								.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
									public Boolean apply(
											AppiumDriver<MobileElement> driver) {
										String adHocStatus = "";
										if (MobileUtils.isMobElementExists(
												fieldObjects, testCase,
												"AdHocStatus", 3)) {
											if (testCase.getPlatform()
													.toUpperCase()
													.contains("ANDROID")) {
												adHocStatus = MobileUtils
														.getMobElement(
																fieldObjects,
																testCase,
																"AdHocStatus")
														.getAttribute("text");
											} else {
												adHocStatus = MobileUtils
														.getMobElement(
																fieldObjects,
																testCase,
																"AdHocStatus")
														.getAttribute("label");
											}
										}
										if (status
												.equalsIgnoreCase(adHocStatus)) {
											return true;
										} else {
											return false;
										}
									}
								});
						flag = isEventReceived;
					} catch (TimeoutException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
					}
					if (flag) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is correctly displayed in the primary card with overridden set points and time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
					}
				} else if (thermostatSetPointStatus
						.equalsIgnoreCase("HoldUntil")) {
					SimpleDateFormat timeFormat = new SimpleDateFormat(
							"HH:mm:ss");
					SimpleDateFormat time12Format = new SimpleDateFormat(
							"hh:mm a");
					SimpleDateFormat time24Format = new SimpleDateFormat(
							"HH:mm");
					String nextPeriodTime = statInfo.getNextPeriodTime();
					Date date = timeFormat.parse(nextPeriodTime);
					String nextPeriodTime12Hours = time12Format.format(date);
					String nextPeriodTime24Hours = time24Format.format(date);
					String status12Hours;
					String status24Hours;
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						status12Hours = "Hold " + overrideTemp
								+ "\u00B0 Until " + nextPeriodTime12Hours;
						status24Hours = "Hold " + overrideTemp
								+ "\u00B0 Until " + nextPeriodTime24Hours;
					} else {
						if (statInfo.getThermostatUnits().equalsIgnoreCase(
								GlobalVariables.FAHRENHEIT)) {
							status12Hours = "Hold " + overrideTemp.intValue()
									+ "\u00B0 until " + nextPeriodTime12Hours;
							status24Hours = "Hold " + overrideTemp.intValue()
									+ "\u00B0 until " + nextPeriodTime24Hours;
						} else {
							status12Hours = "Hold " + overrideTemp
									+ "\u00B0 until " + nextPeriodTime12Hours;
							status24Hours = "Hold " + overrideTemp
									+ "\u00B0 until " + nextPeriodTime24Hours;
						}
					}
					try {
						Boolean isEventReceived = fWait
								.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
									public Boolean apply(
											AppiumDriver<MobileElement> driver) {
										String adHocStatus = "";
										if (MobileUtils.isMobElementExists(
												fieldObjects, testCase,
												"AdHocStatus", 3)) {
											if (testCase.getPlatform()
													.toUpperCase()
													.contains("ANDROID")) {
												adHocStatus = MobileUtils
														.getMobElement(
																fieldObjects,
																testCase,
																"AdHocStatus")
														.getAttribute("text");
											} else {
												adHocStatus = MobileUtils
														.getMobElement(
																fieldObjects,
																testCase,
																"AdHocStatus")
														.getAttribute("label");
											}
										}
										if (status12Hours
												.equalsIgnoreCase(adHocStatus)
												|| status24Hours
														.equalsIgnoreCase(adHocStatus)) {
											return true;
										} else {
											return false;
										}
									}
								});
						flag = isEventReceived;
					} catch (TimeoutException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
					}
					if (flag) {
						Keyword.ReportStep_Pass(
								testCase,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is correctly displayed in the primary card with overridden set points and time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Ad hoc status is not correctly displayed in the primary card with overridden set points and time");
					}
				}
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Error Occured : " + e.getMessage());
			}
		}
		return flag;
	}

	public static boolean verifySetPeriodTime(TestCases testCase, String time,
			String locatorValueinObjectDefinition) {
		boolean flag = true;
		try {
			SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
			String time12hours = time;
			String time24hours = date24Format.format(date12Format.parse(time));
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "ScheduleScreen");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								locatorValueinObjectDefinition).getText()
						.replaceAll("\\.", "").toUpperCase()
						.contains(time12hours)
						|| MobileUtils
								.getMobElement(fieldObjects, testCase,
										locatorValueinObjectDefinition)
								.getText().replaceAll("\\.", "").toUpperCase()
								.contains(time24hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : Time is set to " + time);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : Time is not set to "
									+ time);
				}
			} else {
				String setTime = "";
				if (locatorValueinObjectDefinition
						.equalsIgnoreCase("TimeChooser")) {
					setTime = MobileUtils
							.getMobElements(fieldObjects, testCase,
									locatorValueinObjectDefinition).get(0)
							.getAttribute("value");
				} else if (locatorValueinObjectDefinition
						.equalsIgnoreCase("TimeChooserEndTime")) {
					setTime = MobileUtils
							.getMobElements(fieldObjects, testCase,
									locatorValueinObjectDefinition).get(1)
							.getAttribute("value");
				} else if (locatorValueinObjectDefinition
						.equalsIgnoreCase("GeofenceSleepStartTime")) {
					setTime = MobileUtils.getMobElement(fieldObjects, testCase,
							locatorValueinObjectDefinition).getAttribute(
							"value");
				} else if (locatorValueinObjectDefinition
						.equalsIgnoreCase("GeofenceSleepEndTime")) {
					setTime = MobileUtils.getMobElement(fieldObjects, testCase,
							locatorValueinObjectDefinition).getAttribute(
							"value");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Incorrect time chooser identifier");
				}
				if (setTime.toUpperCase().contains(time.toUpperCase())) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : Time is set to " + time);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : Time is not set to "
									+ time);
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Set Period Time : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifySetPointsAfterScheduleResume(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String setPoints = "";
		String systemMode = statInfo.getThermoStatMode();
		if (systemMode.equalsIgnoreCase("Auto")) {
			systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
		}
		if (systemMode.equalsIgnoreCase("Cool")) {
			setPoints = statInfo.getCoolEndSetPoints();
		} else if (statInfo.getThermoStatMode().equalsIgnoreCase("Heat")) {
			setPoints = statInfo.getHeatEndSetPoints();
		}
		flag = flag
				& JasperUtils.verifyDialerTemperature(testCase, inputs,
						Double.parseDouble(setPoints));
		return flag;
	}

	public static boolean verifySystemMode(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String chilDeviceSystemMode = statInfo.getThermoStatMode();
		String chilDeviceID = statInfo.getDeviceID();
		String appDeviceSystemMode;
		String appDeviceDialerSystemMode;
		WebElement dialer;
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			dialer = MobileUtils.getMobElement(testCase, "name", "Dialer_"
					+ chilDeviceID);
			appDeviceSystemMode = MobileUtils.getMobElement(fieldObjects,
					testCase, "SystemModeButton").getAttribute("value");
			appDeviceDialerSystemMode = dialer.getAttribute("label");
		} else {
			dialer = MobileUtils
					.getMobElement(fieldObjects, testCase, "Dialer");
			appDeviceSystemMode = MobileUtils.getMobElement(fieldObjects,
					testCase, "SystemModeButton").getAttribute("name");
			appDeviceDialerSystemMode = MobileUtils
					.getMobElement(fieldObjects, testCase, "Dialer")
					.getAttribute("name").split(",")[0];
		}
		if (chilDeviceSystemMode.equals(appDeviceSystemMode)) {
			Keyword.ReportStep_Pass(testCase,
					"Verify System Mode : System mode icon is in "
							+ appDeviceSystemMode + " in both app and CHIL");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify System Mode : System mode is "
							+ chilDeviceSystemMode
							+ " in CHIL but system mode icon is in "
							+ appDeviceSystemMode + " mode");
		}

		if (chilDeviceSystemMode.equalsIgnoreCase("Off")) {
			if (chilDeviceSystemMode
					.equalsIgnoreCase(appDeviceDialerSystemMode)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify System Mode : Dialer is in "
								+ chilDeviceSystemMode
								+ " mode in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify System Mode : Dialer mode in app is different from CHIL. Dialer mode in app : "
								+ appDeviceDialerSystemMode
								+ " , CHIL : "
								+ chilDeviceSystemMode);
			}
		} else {
			if (chilDeviceSystemMode.equalsIgnoreCase("Auto")) {
				chilDeviceSystemMode = statInfo
						.getThermostatModeWhenAutoChangeOverActive();
			}
			if (chilDeviceSystemMode
					.equalsIgnoreCase(appDeviceDialerSystemMode)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify System Mode : Dialer is in "
								+ chilDeviceSystemMode
								+ " mode in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify System Mode : Dialer mode in app is different from CHIL. Dialer mode in app : "
								+ appDeviceDialerSystemMode
								+ " , CHIL : "
								+ chilDeviceSystemMode);
			}
		}
		return flag;
	}

	public static boolean verifySystemMode(TestCases testCase,
			TestCaseInputs inputs, String expectedMode) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
				testCase.getMobileDriver());
		fWait.pollingEvery(1, TimeUnit.SECONDS);
		fWait.withTimeout(60, TimeUnit.SECONDS);
		Boolean isEventReceived = fWait
				.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
					public Boolean apply(AppiumDriver<MobileElement> driver) {
						String changedMode = "";
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							changedMode = MobileUtils.getMobElement(
									fieldObjects, testCase, "SystemModeButton")
									.getAttribute("name");
						} else {
							changedMode = MobileUtils.getMobElement(
									fieldObjects, testCase, "SystemModeButton")
									.getAttribute("value");
						}
						if (changedMode.equals(expectedMode)) {
							return true;
						} else {
							return false;
						}
					}
				});

		if (isEventReceived) {
			Keyword.ReportStep_Pass(testCase,
					"Verify System Mode : Thermostat is in " + expectedMode
							+ " mode in the app");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify System Mode : Thermostat is not in " + expectedMode
							+ " mode in the app");
		}

		/*
		 * String isEventReceived1 = fWait.until(new
		 * Function<AppiumDriver<MobileElement>, String>() { public String
		 * apply(AppiumDriver<MobileElement> driver) { String changedMode = "";
		 * ThermostatInformation statInfo = new ThermostatInformation(testCase,
		 * inputs); if (statInfo.getThermoStatMode().equals(expectedMode)) {
		 * changedMode = statInfo.getThermoStatMode(); return changedMode; }
		 * else { return null; } } });
		 * 
		 * if (isEventReceived1.equals(expectedMode)) {
		 * Keyword.ReportStep_Pass(testCase,
		 * "Verify System Mode : Thermostat Mode is " + expectedMode +
		 * "ing in CHIL"); } else { flag = false;
		 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
		 * "Verify System Mode : Thermostat Mode is not in " + expectedMode +
		 * "ing in CHIL"); }
		 */
		return flag;
	}

	public static boolean verifyTemperatureWithInRange(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		List<WebElement> schedule_heatsetpoints, schedule_coolsetpoints, schedule_period_time;
		WebElement heatSetPoint, coolSetPoint;
		String[] schedulePeriods = { "Wake", "Away", "Home", "Sleep" };

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
			Double maxHeat = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MaxHeat"));
			Double minHeat = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MinHeat"));
			Double maxCool = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MaxCool"));
			Double minCool = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MinCool"));
			if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					GEOFENCE_BASED_SCHEDULE)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_heatsetpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						for (WebElement setpoints : schedule_heatsetpoints) {
							if (setpoints != null) {
								if (Double.parseDouble(setpoints.getText()) <= maxHeat
										&& Double.parseDouble(setpoints
												.getText()) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_coolsetpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						for (WebElement setpoints : schedule_coolsetpoints) {
							if (setpoints != null) {
								if (Double.parseDouble(setpoints.getText()) <= maxCool
										&& Double.parseDouble(setpoints
												.getText()) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				} else {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_CoolTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_CoolTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Sleep_CoolTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Sleep_CoolTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Sleep Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Sleep Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Sleep_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Sleep_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Sleep Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Sleep Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_CoolTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_CoolTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
				}
			} else if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					TIME_BASED_SCHEDULE)) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_heating_point");
							for (WebElement setpoints : schedule_heatsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxHeat
											&& Double.parseDouble(setpoints
													.getText()) >= minHeat) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_cooling_point", testCase, 5)) {
							schedule_coolsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_cooling_point");
							for (WebElement setpoints : schedule_coolsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxCool
											&& Double.parseDouble(setpoints
													.getText()) >= minCool) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						schedule_period_time = MobileUtils.getMobElements(
								testCase, "name", "Everyday_Time");
						for (int i = 0; i < schedule_period_time.size(); i++) {
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Everyday_" + schedulePeriods[i]
											+ "_CoolTemperature").getAttribute(
									"value")) <= maxCool
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Everyday_"
																	+ schedulePeriods[i]
																	+ "_CoolTemperature")
													.getAttribute("value")) >= minCool) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Everyday_" + schedulePeriods[i]
											+ "_HeatTemperature").getAttribute(
									"value")) <= maxHeat
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Everyday_"
																	+ schedulePeriods[i]
																	+ "_HeatTemperature")
													.getAttribute("value")) >= minHeat) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
						}
					}
				} else {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						schedule_heatsetpoints = MobileUtils.getMobElements(
								MobileUtils.loadObjectFile(testCase,
										"ScheduleScreen"), testCase,
								"SchedulePeriodHeatSetPoint");
						schedule_coolsetpoints = MobileUtils.getMobElements(
								MobileUtils.loadObjectFile(testCase,
										"ScheduleScreen"), testCase,
								"SchedulePeriodCoolSetPoint");
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_heating_point");
							for (WebElement setpoints : schedule_heatsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxHeat
											&& Double.parseDouble(setpoints
													.getText()) >= minHeat) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_cooling_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_cooling_point");
							for (WebElement setpoints : schedule_coolsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxCool
											&& Double.parseDouble(setpoints
													.getText()) >= minCool) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						schedule_period_time = MobileUtils.getMobElements(
								testCase, "name", "Monday - Friday_Time");
						for (int i = 0; i < schedule_period_time.size(); i++) {
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Monday - Friday_" + schedulePeriods[i]
											+ "_HeatTemperature").getAttribute(
									"value")) <= maxHeat
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Monday - Friday_"
																	+ schedulePeriods[i]
																	+ "_HeatTemperature")
													.getAttribute("value")) >= minHeat) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Monday - Friday_" + schedulePeriods[i]
											+ "_CoolTemperature").getAttribute(
									"value")) <= maxHeat
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Monday - Friday_"
																	+ schedulePeriods[i]
																	+ "_CoolTemperature")
													.getAttribute("value")) >= minHeat) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
						}
						schedule_period_time = MobileUtils.getMobElements(
								testCase, "name", "Saturday - Sunday_Time");
						for (int i = 0; i < schedule_period_time.size(); i++) {
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Saturday - Sunday_" + schedulePeriods[i]
											+ "_HeatTemperature").getAttribute(
									"value")) <= maxHeat
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Saturday - Sunday_"
																	+ schedulePeriods[i]
																	+ "_HeatTemperature")
													.getAttribute("value")) >= minHeat) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
							if (Double.parseDouble(MobileUtils.getMobElement(
									testCase,
									"name",
									"Saturday - Sunday_" + schedulePeriods[i]
											+ "_CoolTemperature").getAttribute(
									"value")) <= maxHeat
									&& Double
											.parseDouble(MobileUtils
													.getMobElement(
															testCase,
															"name",
															"Saturday - Sunday_"
																	+ schedulePeriods[i]
																	+ "_CoolTemperature")
													.getAttribute("value")) >= minHeat) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is set within or at the maximum and minimum range");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[TemperatureInMaxMinRange] Set Point value: "
												+ Double.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value"))
												+ " is not set within or at the maximum and minimum range");
							}
						}
					}
				}
			}
		} else if (allowedModes.contains("Cool")
				&& !allowedModes.contains("Heat")) {
			Double maxCool = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MaxCool"));
			Double minCool = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MinCool"));
			if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					GEOFENCE_BASED_SCHEDULE)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_coolsetpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						for (WebElement setpoints : schedule_coolsetpoints) {
							if (setpoints != null) {
								if (Double.parseDouble(setpoints.getText()) <= maxCool
										&& Double.parseDouble(setpoints
												.getText()) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				} else {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Cool_HeatTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Cool_HeatTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxCool
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minCool) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Sleeep_CoolTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Sleeep_CoolTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxCool
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minCool) {
							Keyword.ReportStep_Pass(
									testCase,
									"Sleep Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Sleep Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_CoolTemperature", testCase, 5)) {
						coolSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_CoolTemperature");
						if (Double.parseDouble(coolSetPoint
								.getAttribute("value")) <= maxCool
								&& Double.parseDouble(coolSetPoint
										.getAttribute("value")) >= minCool) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(coolSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
				}
			} else if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					TIME_BASED_SCHEDULE)) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_cooling_point", testCase, 5)) {
							schedule_coolsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_cooling_point");
							for (WebElement setpoints : schedule_coolsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxCool
											&& Double.parseDouble(setpoints
													.getText()) >= minCool) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						if (statInfo.getJasperDeviceType().equalsIgnoreCase(
								"EMEA")) {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Everyday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Everyday_" + i + 1
														+ "_CoolTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ i
																		+ 1
																		+ "_CoolTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ i
																			+ 1
																			+ "_CoolTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ i
																			+ 1
																			+ "_CoolTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						} else {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Everyday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Everyday_"
														+ schedulePeriods[i]
														+ "_CoolTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_CoolTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ schedulePeriods[i]
																			+ "_CoolTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ schedulePeriods[i]
																			+ "_CoolTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				} else {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						schedule_heatsetpoints = MobileUtils.getMobElements(
								MobileUtils.loadObjectFile(testCase,
										"ScheduleScreen"), testCase,
								"SchedulePeriodHeatSetPoint");
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_heating_point");
							for (WebElement setpoints : schedule_heatsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxCool
											&& Double.parseDouble(setpoints
													.getText()) >= minCool) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						if (statInfo.getJasperDeviceType().equalsIgnoreCase(
								"EMEA")) {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Monday - Friday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Monday - Friday_" + (i + 1)
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ (i + 1)
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Saturday - Sunday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Saturday - Sunday_" + (i + 1)
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ (i + 1)
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						} else {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Monday - Friday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Monday - Friday_"
														+ schedulePeriods[i]
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Saturday - Sunday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Saturday - Sunday_"
														+ schedulePeriods[i]
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxCool
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minCool) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				}
			}
		} else if (!allowedModes.contains("Cool")
				&& allowedModes.contains("Heat")) {
			Double maxHeat = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MaxHeat"));
			Double minHeat = Double.parseDouble(statInfo
					.getDeviceMaxMinSetPoints().get("MinHeat"));
			if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					GEOFENCE_BASED_SCHEDULE)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_heatsetpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						for (WebElement setpoints : schedule_heatsetpoints) {
							if (setpoints != null) {
								if (Double.parseDouble(setpoints.getText()) <= maxHeat
										&& Double.parseDouble(setpoints
												.getText()) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(setpoints
															.getText())
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				} else {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Sleeep_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Sleeep_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Sleep Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Sleep Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_HeatTemperature", testCase, 5)) {
						heatSetPoint = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_HeatTemperature");
						if (Double.parseDouble(heatSetPoint
								.getAttribute("value")) <= maxHeat
								&& Double.parseDouble(heatSetPoint
										.getAttribute("value")) >= minHeat) {
							Keyword.ReportStep_Pass(
									testCase,
									"Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is set within or at the maximum and minimum range");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[TemperatureInMaxMinRange] Home Set Point value: "
											+ Double.parseDouble(heatSetPoint
													.getAttribute("value"))
											+ " is not set within or at the maximum and minimum range");
						}
					}
				}
			} else if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
					TIME_BASED_SCHEDULE)) {
				if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
						.equalsIgnoreCase(EVERYDAY_SCHEDULE)) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_heating_point");
							for (WebElement setpoints : schedule_heatsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxHeat
											&& Double.parseDouble(setpoints
													.getText()) >= minHeat) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						if (statInfo.getJasperDeviceType().equalsIgnoreCase(
								"EMEA")) {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Everyday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Everyday_" + (i + 1)
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ (i + 1)
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						} else {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Everyday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Everyday_"
														+ schedulePeriods[i]
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Everyday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Everyday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				} else {

					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						// schedule_periodtimes_weekday =
						// MobileUtils.getMobElements(MobileUtils.loadObjectFile(testCase,
						// "ScheduleScreen"), testCase, "SchedulePeriodTime");
						schedule_heatsetpoints = MobileUtils.getMobElements(
								MobileUtils.loadObjectFile(testCase,
										"ScheduleScreen"), testCase,
								"SchedulePeriodHeatSetPoint");
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_heatsetpoints = MobileUtils
									.getMobElements(testCase, "ID",
											"scheduling_period_heating_point");
							for (WebElement setpoints : schedule_heatsetpoints) {
								if (setpoints != null) {
									if (Double.parseDouble(setpoints.getText()) <= maxHeat
											&& Double.parseDouble(setpoints
													.getText()) >= minHeat) {
										Keyword.ReportStep_Pass(
												testCase,
												"Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is set within or at the maximum and minimum range");
									} else {
										flag = false;
										Keyword.ReportStep_Fail(
												testCase,
												FailType.FUNCTIONAL_FAILURE,
												"[TemperatureInMaxMinRange] Set Point value: "
														+ Double.parseDouble(setpoints
																.getText())
														+ " is not set within or at the maximum and minimum range");
									}
								}
							}
						}
					} else {
						if (statInfo.getJasperDeviceType().equalsIgnoreCase(
								"EMEA")) {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Monday - Friday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Monday - Friday_" + (i + 1)
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ (i + 1)
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Saturday - Sunday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Saturday - Sunday_" + (i + 1)
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ (i + 1)
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ (i + 1)
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						} else {
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Monday - Friday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Monday - Friday_"
														+ schedulePeriods[i]
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Monday - Friday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Monday - Friday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
							schedule_period_time = MobileUtils.getMobElements(
									testCase, "name", "Saturday - Sunday_Time");
							for (int i = 0; i < schedule_period_time.size(); i++) {
								if (Double.parseDouble(MobileUtils
										.getMobElement(
												testCase,
												"name",
												"Saturday - Sunday_"
														+ schedulePeriods[i]
														+ "_HeatTemperature")
										.getAttribute("value")) <= maxHeat
										&& Double
												.parseDouble(MobileUtils
														.getMobElement(
																testCase,
																"name",
																"Saturday - Sunday_"
																		+ schedulePeriods[i]
																		+ "_HeatTemperature")
														.getAttribute("value")) >= minHeat) {
									Keyword.ReportStep_Pass(
											testCase,
											"Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is set within or at the maximum and minimum range");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[TemperatureInMaxMinRange] Set Point value: "
													+ Double.parseDouble(MobileUtils
															.getMobElement(
																	testCase,
																	"name",
																	"Saturday - Sunday_"
																			+ schedulePeriods[i]
																			+ "_HeatTemperature")
															.getAttribute(
																	"value"))
													+ " is not set within or at the maximum and minimum range");
								}
							}
						}
					}
				}
			}
		}
		try {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				testCase.getMobileDriver()
						.findElement(
								By.xpath("//*[@content-desc='Navigate Up']"))
						.click();
			} else {
				if (MobileUtils.isMobElementExists("name", "btn close normal",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"btn close normal")) {
						flag = false;
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to navigate back to Primary Card: Error message-"
							+ e.getMessage());
		}

		return flag;
	}

	public static boolean verifyThermostatStatus(TestCases testCase,
			TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;
		try {
			ThermostatInformation statInfo = new ThermostatInformation(
					testCase, inputs);
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "AdHocOverride");
			String status = "";
			String appStatus = "";
			if (scheduleType.equalsIgnoreCase("geofence")) {
				status = "Using " + statInfo.getCurrentSchedulePeriod()
						+ " Settings";
			} else if (scheduleType.equalsIgnoreCase("time")) {
				status = "Following Schedule";
			} else if ((scheduleType.equalsIgnoreCase("off"))) {
				status = "Schedule Off";
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ThermostatSchedule", 5)) {
					appStatus = MobileUtils.getMobElement(fieldObjects,
							testCase, "ThermostatSchedule")
							.getAttribute("text");
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"AdHocStatus", 5)) {
						appStatus = MobileUtils.getMobElement(fieldObjects,
								testCase, "AdHocStatus").getAttribute("text");
					}
				}

			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ThermostatSchedule", 5)) {
					appStatus = MobileUtils.getMobElement(fieldObjects,
							testCase, "ThermostatSchedule").getAttribute(
							"label");
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"AdHocStatus", 5)) {
						appStatus = MobileUtils.getMobElement(fieldObjects,
								testCase, "AdHocStatus").getAttribute("label");
					}
				}
			}
			if (appStatus.equalsIgnoreCase(status)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Thermostat Status : Status : " + status
								+ " is correctly displayed");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Thermostat Status : Status: " + status
								+ " is not displayed correctly");
			}
		} catch (NoSuchElementException e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Thermostat Schedule : No Such Element Exception. Could not find Thermostat Schedule Status");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Thermostat Schedule : Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyTimeFieldIncrements(TestCases testCase,
			TestCaseInputs inputs, String timeInterval) {
		boolean flag = true;
		int i = 0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String jasperStatType = statInfo.getJasperDeviceType();

		if (timeInterval.equalsIgnoreCase("10")) {
			i = 10;
		} else if (timeInterval.equalsIgnoreCase("15")) {
			i = 15;
		}

		if (inputs.getInputValue(TYPE_OF_SCHEDULE).equalsIgnoreCase(
				GEOFENCE_BASED_SCHEDULE)) {
			String geofenceStartTime = "", geofenceEndTime = "";
			Double temp;
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_startEnd_time", testCase, 5)) {
					if (MobileUtils
							.getMobElement(testCase, "ID",
									"scheduling_period_startEnd_time")
							.getText().contains("M")
							|| MobileUtils
									.getMobElement(testCase, "ID",
											"scheduling_period_startEnd_time")
									.getText().contains("m")) {
						geofenceStartTime = MobileUtils
								.getMobElement(testCase, "ID",
										"scheduling_period_startEnd_time")
								.getText().split("\\s+")[0];
					} else {
						geofenceStartTime = MobileUtils
								.getMobElement(testCase, "ID",
										"scheduling_period_startEnd_time")
								.getText().split("\\s+")[0];
					}
					if (MobileUtils
							.getMobElement(testCase, "ID",
									"scheduling_period_startEnd_time")
							.getText().contains("M")
							|| MobileUtils
									.getMobElement(testCase, "ID",
											"scheduling_period_startEnd_time")
									.getText().contains("m")) {
						geofenceEndTime = MobileUtils
								.getMobElement(testCase, "ID",
										"scheduling_period_startEnd_time")
								.getText().split("\\s+")[3];
					} else {
						geofenceEndTime = MobileUtils
								.getMobElement(testCase, "ID",
										"scheduling_period_startEnd_time")
								.getText().split("\\s+")[2];
					}
				}
			} else {
				if (MobileUtils.isMobElementExists("name",
						"Geofence_SleepTimeInterval", testCase, 5)) {
					if (MobileUtils
							.getMobElement(testCase, "name",
									"Geofence_SleepTimeInterval")
							.getAttribute("value").contains("M")
							|| MobileUtils
									.getMobElement(testCase, "name",
											"Geofence_SleepTimeInterval")
									.getAttribute("value").contains("m")) {
						geofenceStartTime = MobileUtils
								.getMobElement(testCase, "name",
										"Geofence_SleepTimeInterval")
								.getAttribute("value").split("\\s+")[0];
					} else {
						geofenceStartTime = MobileUtils
								.getMobElement(testCase, "name",
										"Geofence_SleepTimeInterval")
								.getAttribute("value").split("\\s+")[0];
					}
					if (MobileUtils
							.getMobElement(testCase, "name",
									"Geofence_SleepTimeInterval")
							.getAttribute("value").contains("M")
							|| MobileUtils
									.getMobElement(testCase, "name",
											"Geofence_SleepTimeInterval")
									.getAttribute("value").contains("m")) {
						geofenceEndTime = MobileUtils
								.getMobElement(testCase, "name",
										"Geofence_SleepTimeInterval")
								.getAttribute("value").split("\\s+")[3];
					} else {
						geofenceEndTime = MobileUtils
								.getMobElement(testCase, "name",
										"Geofence_SleepTimeInterval")
								.getAttribute("value").split("\\s+")[2];
					}
				}
			}
			temp = Double.parseDouble(geofenceStartTime.split(":")[1]);
			if (temp.intValue() % i == 0) {
				Keyword.ReportStep_Pass(testCase,
						"Start time is set in intervals of " + i + " minutes");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Start time is not set in intervals of " + i
								+ " minutes");
			}
			temp = Double.parseDouble(geofenceEndTime.split(":")[1]);
			if (temp.intValue() % i == 0) {
				Keyword.ReportStep_Pass(testCase,
						"End time is set in intervals of " + i + " minutes");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"End time is not set in intervals of " + i + " minutes");
			}

		} else {
			if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE).equalsIgnoreCase(
					EVERYDAY_SCHEDULE)) {
				String everydayStartTime = "", everydayEndTime = "";
				Double temp;
				List<WebElement> everydayPeriodTime = null;

				if (inputs.getInputValue(SHOW_VIEW_TYPE) != null
						&& !inputs.getInputValue(SHOW_VIEW_TYPE).isEmpty()) {
					if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
							"Grouped Days")) {
						flag = flag
								& JasperUtils
										.selectIndividualDaysViewOrGroupedDaysView(
												testCase, "Grouped Days");
					} else if (inputs.getInputValue(SHOW_VIEW_TYPE)
							.equalsIgnoreCase("Individual Days")) {
						flag = flag
								& JasperUtils
										.selectIndividualDaysViewOrGroupedDaysView(
												testCase, "Individual Days");
					}

					WebElement period = null;
					AppiumDriver<MobileElement> driver = testCase
							.getMobileDriver();
					Dimension dimension = driver.manage().window().getSize();
					int height = dimension.getHeight();
					int width = dimension.getWidth();
					TouchAction touchAction = new TouchAction(
							testCase.getMobileDriver());

					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (!MobileUtils
								.isMobElementExists(
										"XPATH",
										"//*[@content-desc='"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "']", testCase, 5)) {
							testCase.getMobileDriver()
									.scrollToExact(
											inputs.getInputValue(
													SCHEDULE_PERIOD_EDITED)
													.split("_")[1]);
							while (!MobileUtils
									.isMobElementExists(
											"XPATH",
											"//*[@content-desc='"
													+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
													+ "']", testCase, 5)) {
								touchAction.press(width / 2, height / 2)
										.waitAction(2000).moveTo(width / 2, 82)
										.release();
								touchAction.perform();
							}
						}
						period = testCase
								.getMobileDriver()
								.findElement(
										By.xpath("//*[@content-desc='"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "']"));
						period.findElement(By.id("scheduling_period_time"))
								.click();

						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "TimeChooser", 5)) {
							everydayStartTime = MobileUtils
									.getMobElement(fieldObjects, testCase,
											"TimeChooser").getText()
									.split("\\s+")[0];
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Start time");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooserEndTime", 5)) {
								everydayEndTime = MobileUtils
										.getMobElement(fieldObjects, testCase,
												"TimeChooserEndTime").getText()
										.split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the End time");
							}
						}
						temp = Double
								.parseDouble(everydayStartTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(
									testCase,
									"[Period-"
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
											+ "]Start time: "
											+ everydayStartTime
											+ " is set in intervals of " + i
											+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[Period-"
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
											+ "]Start time: "
											+ everydayStartTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(everydayEndTime
									.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(
										testCase,
										"[Period-"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "]End time: "
												+ everydayEndTime
												+ " is set in intervals of "
												+ i + " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "]End time: "
												+ everydayEndTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
					} else {
						if (!MobileUtils
								.isMobElementExists(
										"xpath",
										"//UIAApplication//UIATableCell[@name='"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "']", testCase, 5)) {
							testCase.getMobileDriver()
									.scrollToExact(
											inputs.getInputValue(
													SCHEDULE_PERIOD_EDITED)
													.split("_")[0]);
							while (!MobileUtils
									.isMobElementExists(
											"xpath",
											"//UIAApplication//UIATableCell[@name='"
													+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
													+ "']", testCase, 5)) {
								touchAction.press(width / 2, height / 2)
										.waitAction(2000).moveTo(width / 2, 82)
										.release();
								touchAction.perform();
							}
						}
						period = testCase
								.getMobileDriver()
								.findElement(
										By.xpath("//UIAApplication//UIATableCell[@name='"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "']//UIAStaticText[contains(@name,'"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "')]"));
						try {
							period.click();
							Keyword.ReportStep_Pass(
									testCase,
									"Selected the period: "
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED));
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select the period: "
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED));
						}

						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "TimeChooser", 5)) {
							everydayStartTime = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"TimeChooser").get(0)
									.getAttribute("value").split("\\s+")[0];
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Start time");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooserEndTime", 5)) {
								everydayEndTime = MobileUtils
										.getMobElements(fieldObjects, testCase,
												"TimeChooserEndTime").get(1)
										.getAttribute("value").split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the End time");
							}
						}
						temp = Double
								.parseDouble(everydayStartTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(
									testCase,
									"[Period-"
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
											+ "]Start time: "
											+ everydayStartTime
											+ " is set in intervals of " + i
											+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[Period-"
											+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
											+ "]Start time: "
											+ everydayStartTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(everydayEndTime
									.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(
										testCase,
										"[Period-"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "]End time: "
												+ everydayEndTime
												+ " is set in intervals of "
												+ i + " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ inputs.getInputValue(SCHEDULE_PERIOD_EDITED)
												+ "]End time: "
												+ everydayEndTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"EverydayTime", 5)) {
						everydayPeriodTime = MobileUtils.getMobElements(
								fieldObjects, testCase, "EverydayTime");
					}
					for (int e = 0; e < everydayPeriodTime.size(); e++) {
						if (everydayPeriodTime.get(e) != null) {
							everydayPeriodTime.get(e).click();
						}
						if (testCase.getPlatform().toUpperCase()
								.contains("ANDROID")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooser", 5)) {
								everydayStartTime = MobileUtils
										.getMobElement(fieldObjects, testCase,
												"TimeChooser").getText()
										.split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the Start time");
							}
							if (jasperStatType.equalsIgnoreCase("EMEA")) {
								if (MobileUtils.isMobElementExists(
										fieldObjects, testCase,
										"TimeChooserEndTime", 5)) {
									everydayEndTime = MobileUtils
											.getMobElement(fieldObjects,
													testCase,
													"TimeChooserEndTime")
											.getText().split("\\s+")[0];
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Failed to locate the End time");
								}
							}
						} else {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooser", 5)) {
								everydayStartTime = MobileUtils
										.getMobElements(fieldObjects, testCase,
												"TimeChooser").get(0)
										.getAttribute("value").split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the Start time");
							}
							if (jasperStatType.equalsIgnoreCase("EMEA")) {
								if (MobileUtils.isMobElementExists(
										fieldObjects, testCase,
										"TimeChooserEndTime", 5)) {
									everydayEndTime = MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"TimeChooserEndTime")
											.get(1).getAttribute("value")
											.split("\\s+")[0];
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Failed to locate the End time");
								}
							}
						}
						temp = Double
								.parseDouble(everydayStartTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(testCase, "[Period-"
									+ (e + 1) + "]Start time: "
									+ everydayStartTime
									+ " is set in intervals of " + i
									+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE, "[Period-"
											+ (e + 1) + "]Start time: "
											+ everydayStartTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(everydayEndTime
									.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(testCase, "[Period-"
										+ (e + 1) + "]End time: "
										+ everydayEndTime
										+ " is set in intervals of " + i
										+ " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ (e + 1)
												+ "]End time: "
												+ everydayEndTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Back button in Edit Period screen");
						}
					}
				}
			} else if (inputs.getInputValue(TYPE_OF_TIME_SCHEDULE)
					.equalsIgnoreCase(WEEKDAY_AND_WEEKEND_SCHEDULE)) {
				String startTime = "", endTime = "";
				Double temp;
				List<WebElement> periodTime = null;
				// =================================================ANDROID====================================================================
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"SchedulePeriodTime", 5)) {
						periodTime = MobileUtils.getMobElements(fieldObjects,
								testCase, "SchedulePeriodTime");
					}
					for (int e = 0; e < periodTime.size(); e++) {
						if (e == 4) {
							Dimension dimensions = testCase.getMobileDriver()
									.manage().window().getSize();
							dimensions = testCase.getMobileDriver().manage()
									.window().getSize();
							int startx = (dimensions.width * 20) / 100;
							int starty = (dimensions.height * 20) / 100;
							int endx = (dimensions.width * 22) / 100;
							int endy = (dimensions.height * 35) / 100;
							testCase.getMobileDriver().swipe(startx, starty,
									endx, endy, 1000);
						}

						if (periodTime.get(e) != null) {
							periodTime.get(e).click();
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "TimeChooser", 5)) {
							startTime = MobileUtils
									.getMobElement(fieldObjects, testCase,
											"TimeChooser").getText()
									.split("\\s+")[0];
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Start time");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooserEndTime", 5)) {
								endTime = MobileUtils
										.getMobElement(fieldObjects, testCase,
												"TimeChooserEndTime").getText()
										.split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the End time");
							}
						}
						temp = Double.parseDouble(startTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(testCase, "[Period-"
									+ (e + 1) + "]Start time: " + startTime
									+ " is set in intervals of " + i
									+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE, "[Period-"
											+ (e + 1) + "]Start time: "
											+ startTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(endTime.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(testCase, "[Period-"
										+ (e + 1) + "]End time: " + endTime
										+ " is set in intervals of " + i
										+ " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ (e + 1)
												+ "]End time: "
												+ endTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Back button in Edit Period screen");
						}
					}
				}
				// =======================================================IOS===========================================================
				else {
					// ========================================Weekday=====================================================
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"WeekdayPeriodTime", 5)) {
						periodTime = MobileUtils.getMobElements(fieldObjects,
								testCase, "WeekdayPeriodTime");
					}
					for (int e = 0; e < periodTime.size(); e++) {
						if (periodTime.get(e) != null) {
							periodTime.get(e).click();
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "TimeChooser", 5)) {
							startTime = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"TimeChooser").get(0)
									.getAttribute("value").split("\\s+")[0];
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Start time");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooserEndTime", 5)) {
								endTime = MobileUtils
										.getMobElements(fieldObjects, testCase,
												"TimeChooserEndTime").get(1)
										.getAttribute("value").split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the End time");
							}
						}
						temp = Double.parseDouble(startTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(testCase, "[Period-"
									+ (e + 1) + "]Start time: " + startTime
									+ " is set in intervals of " + i
									+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE, "[Period-"
											+ (e + 1) + "]Start time: "
											+ startTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(endTime.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(testCase, "[Period-"
										+ (e + 1) + "]End time: " + endTime
										+ " is set in intervals of " + i
										+ " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ (e + 1)
												+ "]End time: "
												+ endTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Back button in Edit Period screen");
						}
					}
					// ================================================Weekend====================================================
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"WeekendPeriodTime", 5)) {
						periodTime = MobileUtils.getMobElements(fieldObjects,
								testCase, "WeekendPeriodTime");
					}
					for (int e = 0; e < periodTime.size(); e++) {
						if (periodTime.get(e) != null) {
							periodTime.get(e).click();
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "TimeChooser", 5)) {
							startTime = MobileUtils
									.getMobElements(fieldObjects, testCase,
											"TimeChooser").get(0)
									.getAttribute("value").split("\\s+")[0];
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Start time");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "TimeChooserEndTime", 5)) {
								endTime = MobileUtils
										.getMobElements(fieldObjects, testCase,
												"TimeChooserEndTime").get(1)
										.getAttribute("value").split("\\s+")[0];
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the End time");
							}
						}
						temp = Double.parseDouble(startTime.split(":")[1]);
						if (temp.intValue() % i == 0) {
							Keyword.ReportStep_Pass(testCase, "[Period-"
									+ (e + 1) + "]Start time: " + startTime
									+ " is set in intervals of " + i
									+ " minutes");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE, "[Period-"
											+ (e + 1) + "]Start time: "
											+ startTime
											+ " is not set in intervals of "
											+ i + " minutes");
						}
						if (jasperStatType.equalsIgnoreCase("EMEA")) {
							temp = Double.parseDouble(endTime.split(":")[1]);
							if (temp.intValue() % i == 0) {
								Keyword.ReportStep_Pass(testCase, "[Period-"
										+ (e + 1) + "]End time: " + endTime
										+ " is set in intervals of " + i
										+ " minutes");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[Period-"
												+ (e + 1)
												+ "]End time: "
												+ endTime
												+ " is not set in intervals of "
												+ i + " minutes");
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the Back button in Edit Period screen");
						}
					}
				}
			}
		}

		return flag;
	}

	public static boolean verifyToDate(TestCases testCase,
			String toDateToBeVerified) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				List<WebElement> fromAndToDates = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToDates");
				SimpleDateFormat dateFormat = new SimpleDateFormat(
						"EEE MMM dd, yyyy");
				toDateToBeVerified = dateFormat.format(vacationDateFormat
						.parse(toDateToBeVerified));
				String toDate = fromAndToDates.get(1).getText();
				Keyword.ReportStep_Pass(testCase,
						"Verify To Date : Verifying displayed to date with: "
								+ toDateToBeVerified);
				if (toDate.equals(toDateToBeVerified)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify To Date : Displayed to date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify To Date : Displayed to date is not correct. Displayed Date : "
									+ toDate);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, HH:mm");
				String toDateToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(toDateToBeVerified));
				String toDateToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(toDateToBeVerified));
				String toDate = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(1).getAttribute("value");
				Keyword.ReportStep_Pass(testCase,
						"Verify From Date : Verifying displayed to date with: "
								+ toDateToBeVerified12Hours + " / "
								+ toDateToBeVerified24Hours);
				if (toDate.equals(toDateToBeVerified12Hours)
						|| toDate.equals(toDateToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify To Date : Displayed to date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify To Date : Displayed to date is not correct. Displayed Date : "
									+ toDate);
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Date : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyToTime(TestCases testCase,
			String toTimeToBeVerified) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			String displayedToTime = " ";
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
				String toTime12hours = date12Format.format(vacationDateFormat
						.parse(toTimeToBeVerified));
				String toTime24hours = date24Format.format(vacationDateFormat
						.parse(toTimeToBeVerified));
				List<WebElement> fromAndToTime = MobileUtils.getMobElements(
						fieldObjects, testCase, "FromAndToTime");
				displayedToTime = fromAndToTime.get(1).getText();
				Keyword.ReportStep_Pass(testCase,
						"Verify To Time : Verifying to time is set to : "
								+ toTime12hours + " / " + toTime24hours);
				if (displayedToTime.replaceAll("\\.", "").toUpperCase()
						.contains(toTime12hours)
						|| displayedToTime.replaceAll("\\.", "").toUpperCase()
								.contains(toTime24hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify To Time : To time is set to "
									+ displayedToTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify To Time : To time is not set to "
									+ toTime12hours + " / " + toTime24hours);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat(
						"EEE, MMM dd, yyyy, HH:mm");
				String toTimeToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(toTimeToBeVerified));
				String toTimeToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(toTimeToBeVerified));
				displayedToTime = MobileUtils
						.getMobElements(fieldObjects, testCase,
								"FromAndToDates").get(1).getAttribute("value");
				Keyword.ReportStep_Pass(testCase,
						"Verify To Time : Verifying displayed to time with: "
								+ toTimeToBeVerified12Hours + " / "
								+ toTimeToBeVerified24Hours);
				if (displayedToTime.equals(toTimeToBeVerified12Hours)
						|| displayedToTime.equals(toTimeToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify To Time : To time is set to "
									+ displayedToTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify To Time : To time is not set to "
									+ toTimeToBeVerified12Hours + " / "
									+ toTimeToBeVerified24Hours);
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Time : Error Occured : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyVacationSetPointsAreBetweenMaxAndMinSetPoints(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		String coolSetPoint = " ";
		String heatSetPoint = " ";
		String maxHeat = " ";
		String minHeat = " ";
		String maxCool = " ";
		String minCool = " ";
		Double coolTemp = 0.0;
		Double heatTemp = 0.0;
		HashMap<String, String> minMaxSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				coolSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"CoolSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
				heatSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"HeatSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				coolSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "CoolSetPoints").getAttribute("value");
				heatSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "HeatSetPoints").getAttribute("value");
			}
			coolTemp = Double.parseDouble(coolSetPoint);
			heatTemp = Double.parseDouble(heatSetPoint);
			maxHeat = minMaxSetPoints.get("MaxHeat");
			minHeat = minMaxSetPoints.get("MinHeat");
			maxCool = minMaxSetPoints.get("MaxCool");
			minCool = minMaxSetPoints.get("MinCool");

			if (coolTemp > Double.parseDouble(maxCool)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Cool set point is greater than maximum cool set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Cool set point is lesser than/equal to maximum cool set points");
			}
			if (coolTemp < Double.parseDouble(minCool)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Cool set point is lesser than minimum cool set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Cool set point is greater than/equal to minimum cool set points");
			}

			if (heatTemp > Double.parseDouble(maxHeat)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Heat set point is greater than maximum heat set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Heat set point is lesser than/equal to maximum heat set points");
			}
			if (heatTemp < Double.parseDouble(minHeat)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Heat set point is lesser than minimum heat set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Heat set point is greater than/equal to minimum heat set points");
			}

		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			heatTemp = Double.parseDouble(heatSetPoint);
			maxHeat = minMaxSetPoints.get("MaxHeat");
			minHeat = minMaxSetPoints.get("MinHeat");
			if (heatTemp > Double.parseDouble(maxHeat)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Heat set point is greater than maximum heat set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Heat set point is lesser than/equal to maximum heat set points");
			}
			if (heatTemp < Double.parseDouble(minHeat)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Heat set point is lesser than minimum heat set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Heat set point is greater than/equal to minimum heat set points");
			}
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				heatSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"HeatSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				heatSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "HeatSetPoints").getAttribute("value");
			}
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				coolSetPoint = MobileUtils
						.getMobElement(fieldObjects, testCase,
								"CoolSetPointChooser")
						.findElement(By.id("scheduling_period_temp_point"))
						.getText();
			} else {
				coolSetPoint = MobileUtils.getMobElement(fieldObjects,
						testCase, "CoolSetPoints").getAttribute("value");
			}
			coolTemp = Double.parseDouble(coolSetPoint);
			maxCool = minMaxSetPoints.get("MaxCool");
			minCool = minMaxSetPoints.get("MinCool");
			if (coolTemp > Double.parseDouble(maxCool)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Cool set point is greater than maximum cool set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Cool set point is lesser than/equal to maximum cool set points");
			}
			if (coolTemp < Double.parseDouble(minCool)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Set Points : Cool set point is lesser than minimum cool set points");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Set Points : Cool set point is greater than/equal to minimum cool set points");
			}
		}

		return flag;
	}

	public static boolean verifyVacationStatusOnDashboard(TestCases testCase,
			TestCaseInputs inputs, boolean isOn) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		String toolbarSubtitleText = "";
		String endDate = "";
		String displayedEndDate = "";
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (isOn) {
				toolbarSubtitleText = MobileUtils.getMobElement(fieldObjects,
						testCase, "ToolbarSubtitle").getAttribute("text");
				endDate = statInfo.getVacationEndTime();
				SimpleDateFormat adHocDateFormat = new SimpleDateFormat(
						"dd MMM");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
						"yyyy-MM-dd'T'HH:mm:ss");
				try {
					displayedEndDate = adHocDateFormat
							.format(vacationDateFormat.parse(endDate));
				} catch (Exception e) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Error Occored : " + e.getMessage());
				}
				if (toolbarSubtitleText.equals("Vacation until "
						+ displayedEndDate)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Vacation Status On Dashboard : Vacation is on in the dashboard card and displayed end date is displayed correctly");
				} else {
					if (toolbarSubtitleText.contains("Vacation")) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Status On Dashboard : Vacation is on in the dashboard but displayed end date is not correct");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Status On Dashboard : Vacation is not on in the Dashboard");
					}
				}
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ToolbarSubtitle", 5)) {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Vacation Status on Primary Card : Vacation is on in the dashboard");
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Verify Vacation Status On Primary Card : Vacation is off in the dashboard");
				}
			}
		} else {

		}

		return flag;
	}

	public static boolean verifyVacationStatusOnPrimaryCard(TestCases testCase,
			TestCaseInputs inputs, boolean isOn) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		String adHocText = "";
		String endDate = "";
		String endDateToBeDisplayed = "";
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (isOn) {
			try {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					adHocText = MobileUtils.getMobElement(fieldObjects,
							testCase, "AdHocStatus").getAttribute("text");
				} else {
					adHocText = MobileUtils.getMobElement(fieldObjects,
							testCase, "AdHocStatus").getAttribute("label");
				}
			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Vacation Status On Primary Card : Could not find Ad Hoc Button on Primary Card");
				return flag;
			}
			endDate = statInfo.getVacationEndTime();
			SimpleDateFormat adHocDateFormat = new SimpleDateFormat("MMM dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			try {
				endDateToBeDisplayed = adHocDateFormat
						.format(vacationDateFormat.parse(endDate));
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Error Occored : " + e.getMessage());
			}
			if (adHocText.equalsIgnoreCase("Vacation until "
					+ endDateToBeDisplayed)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Vacation Status On Primary Card : Vacation is on in the primary card and displayed end date is displayed correctly");
			} else {
				if (adHocText.contains("Vacation")) {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Vacation Status On Primary Card : Vacation is on in the primary card but displayed end date is not correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Vacation Status On Primary Card : Vacation is not on in the primary card");
				}
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AdHocStatus", 5)) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					adHocText = MobileUtils.getMobElement(fieldObjects,
							testCase, "AdHocStatus").getAttribute("text");
				} else {
					adHocText = MobileUtils.getMobElement(fieldObjects,
							testCase, "AdHocStatus").getAttribute("label");
				}
				if (adHocText.toUpperCase().contains("VACATION")) {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Vacation Status on Primary Card : Vacation is on in the primary card");
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Verify Vacation Status On Primary Card : Vacation is off in the Primary Card");
				}

			} else {
				Keyword.ReportStep_Pass(testCase,
						"Verify Vacation Status On Primary Card : Vacation is off in the Primary Card");
			}
		}
		return flag;
	}

	public static boolean verifyVacationSwitchStatus(TestCases testCase,
			boolean isOn) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"VacationSwitch", 5)) {
			if (isOn) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getText()
							.equalsIgnoreCase("ON")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Vacation Switch Status(ON) : Vacation switch is in ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Switch Status(ON) : Vacation switch is not in ON state");
					}
				} else {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getAttribute("value")
							.equalsIgnoreCase("1")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Vacation Switch Status(ON) : Vacation switch is in ON state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Switch Status(ON) : Vacation switch is not in ON state");
					}
				}
			} else if (!isOn) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getText()
							.equalsIgnoreCase("OFF")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Vacation Switch Status(OFF) : Vacation switch is in OFF state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Switch Status(OFF) : Vacation switch is not in OFF state");
					}
				} else {
					System.out.println(MobileUtils.getMobElement(fieldObjects,
							testCase, "VacationSwitch").getAttribute("value"));
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"VacationSwitch").getAttribute("value")
							.equalsIgnoreCase("0")) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Vacation Switch Status(OFF) : Vacation switch is in OFF state");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Verify Vacation Switch Status(OFF) : Vacation switch is not in OFF state");
					}
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Vacation Switch : Vacation switch not present");
		}
		return flag;
	}

	public static boolean verifyVisibilityOfAdHocButtonOnSolutionCard(
			TestCases testCase, boolean isVisible) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AdHocOverride");
		if (isVisible) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AdHocStatus", 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button is visible on solution card");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button is not visible on solution card");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"AdHocStatus", 5)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button visible on solution card");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button not visible on solution card");
			}
		}
		return flag;
	}

	public static boolean verifyVisibilityOfVacationSettingsOnSecondaryCard(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		LocationInformation locInfo = new LocationInformation(testCase, inputs);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "VacationSettings");
		List<String> deviceNames = JasperUtils.getDeviceNames(testCase, inputs,
				(String.valueOf(locInfo.getLocationID())));
		HashMap<String, String> deviceNamesAndType = new HashMap<String, String>();
		for (String temp : deviceNames) {
			deviceNamesAndType.put(temp, getDeviceType(testCase, inputs, temp));
		}
		if (deviceNamesAndType.values().contains("Jasper")) {
			flag = flag & navigateToVacationSettings(testCase);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"ComfortConfigButton");
			for (String temp : deviceNames) {
				String type = deviceNamesAndType.get(temp);
				if (type.equalsIgnoreCase("HoneyBadger")) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists("xpath",
								"//android.widget.TextView[@text='" + temp
										+ "']", testCase, 3)) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Visibility of Vacation Settings For HBB : Device : "
											+ temp
											+ " is a HBB stat and exists on vacation comfort config settings");
						} else {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Visibility of Vacation Settings For HBB : Device : "
											+ temp
											+ " is a HBB stat and does not exists on vacation comfort config settings");
						}
					} else {
						if (MobileUtils.isMobElementExists("xpath",
								"//UIAStaticText[@name='" + temp + "']",
								testCase, 3)) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Verify Visibility of Vacation Settings For HBB : Device : "
											+ temp
											+ " is a HBB stat and exists on vacation comfort config settings");
						} else {
							Keyword.ReportStep_Pass(
									testCase,
									"Verify Visibility of Vacation Settings For HBB : Device : "
											+ temp
											+ " is a HBB stat and does not exists on vacation comfort config settings");
						}
					}
				}
			}

		} else {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"GlobalDrawerButton");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase, "", 3)) {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Visibility of Vacation Settings For HBB : Vacation Option available on Global Drawer");
			} else {
				Keyword.ReportStep_Pass(
						testCase,
						"Verifiy Visibility of Vacation Settings for HBB : Vacation Option not available on Global Drawer");
				return flag;
			}
		}
		return flag;
	}

	public static boolean viewScheduleOnPrimaryCard(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"TimeScheduleButton", 10)) {
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"TimeScheduleButton");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Schedule button not found on Primary Card");
		}
		return flag;
	}

	public static boolean waitForVacationStart(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "AdHocOverride");
			ThermostatInformation statInfo = new ThermostatInformation(
					testCase, inputs);
			if (statInfo.isVacationRunning()) {
				Keyword.ReportStep_Pass(testCase,
						"Wait For Vacation Start : Vacation is already running");
				return true;
			}
			String vacationStartTime = statInfo.getVacationStartTime();
			String deviceTime = "";
			final SimpleDateFormat vacationDateFormat = new SimpleDateFormat(
					"yyyy-MM-dd'T'HH:mm:ss");
			final SimpleDateFormat androidDateFormat = new SimpleDateFormat(
					"EEE MMM dd HH:mm:ss zzz yyyy");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				try {
					String time = vacationDateFormat.format(androidDateFormat
							.parse(JasperUtils.getAndroidDeviceTime(testCase)
									.trim()));
					deviceTime = convertTimetoUTCTime(testCase, time);
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}

			} else {
				deviceTime = convertTimetoUTCTime(testCase,
						JasperUtils.getIOSSimulatorTime(testCase));
			}
			Date startTime = vacationDateFormat.parse(vacationStartTime);
			Date currentTime = vacationDateFormat.parse(deviceTime);
			long dif = startTime.getTime() - currentTime.getTime();
			int diffInMinutes = (int) ((dif / 1000) / 60);
			if (diffInMinutes > 15) {
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Wait for Vacation start : Differnece between vacation start time and current time is greater than 15 mins");
				return false;
			} else if (diffInMinutes < 0) {
				Keyword.ReportStep_Pass(testCase,
						"Wait for Vacation Start : Vacation start time is past current device time");
				return true;
			} else {
				System.out.println("Waiting for vacation to start");
				FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
						testCase.getMobileDriver());
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(15, TimeUnit.MINUTES);
				Boolean isEventReceived = fWait
						.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
							public Boolean apply(
									AppiumDriver<MobileElement> driver) {
								ThermostatInformation statInfo = new ThermostatInformation(
										testCase, inputs);
								String vacationStartTime = statInfo
										.getVacationStartTime();
								String deviceTime = "";
								if (testCase.getPlatform().toUpperCase()
										.contains("ANDROID")) {
									try {
										MobileUtils.getMobElement(testCase,
												"ID", "toolbar");
										String time = vacationDateFormat.format(androidDateFormat
												.parse(JasperUtils
														.getAndroidDeviceTime(
																testCase)
														.trim()));
										deviceTime = convertTimetoUTCTime(
												testCase, time);
									} catch (Exception e) {
										System.out.println(e.getMessage());
									}

								} else {
									MobileUtils.getMobElement(testCase, "name",
											"notification");
									deviceTime = convertTimetoUTCTime(
											testCase,
											JasperUtils
													.getIOSSimulatorTime(testCase));
								}
								try {
									Date startTime = vacationDateFormat
											.parse(vacationStartTime);
									Date currentTime = vacationDateFormat
											.parse(deviceTime);
									long dif = startTime.getTime()
											- currentTime.getTime();
									int diffInMinutes = (int) ((dif / 1000) / 60);
									if (dif > 0) {
										diffInMinutes = diffInMinutes + 1;
									}
									if (diffInMinutes != 0) {
										System.out.println(diffInMinutes
												+ " minutes remaining");
										return false;
									} else {
										return true;
									}
								} catch (Exception e) {
									return false;
								}
							}
						});
				System.out
						.println("Waiting for vacation to start running in CHIL");
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(2, TimeUnit.MINUTES);
				isEventReceived = fWait
						.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
							public Boolean apply(
									AppiumDriver<MobileElement> driver) {
								ThermostatInformation statInfo = new ThermostatInformation(
										testCase, inputs);
								String text = "";
								if (MobileUtils.isMobElementExists(
										fieldObjects, testCase, "AdHocStatus",
										2)) {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										text = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"AdHocStatus").getAttribute(
												"text");
									} else {
										text = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"AdHocStatus").getAttribute(
												"label");
									}
								} else if (MobileUtils.isMobElementExists(
										fieldObjects, testCase,
										"ToolbarSubtitle", 2)) {
									if (testCase.getPlatform().toUpperCase()
											.contains("ANDROID")) {
										text = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"ToolbarSubtitle")
												.getAttribute("text");
									} else {
										text = MobileUtils.getMobElement(
												fieldObjects, testCase,
												"ToolbarSubtitle")
												.getAttribute("value");
									}
								}
								try {
									if (statInfo.isVacationRunning()
											&& text.toUpperCase().contains(
													"VACATION")) {
										return true;
									} else {
										return false;
									}
								} catch (NoSuchElementException e) {
									return false;
								} catch (Exception e) {
									System.out.println(e.getMessage());
									return false;
								}
							}
						});
				if (isEventReceived) {
					Keyword.ReportStep_Pass(testCase,
							"Wait for Vacation Active : Vacation is running in CHIL and UI");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Wait for Vacation Active : Vacation is not running in CHIL and UI after waiting for 2 minutes");
				}
			}
		} catch (Exception e) {

		}
		return flag;
	}

	public static boolean editGeofenceSchedule(TestCases testCase,
			TestCaseInputs inputs, String geofencePeriod) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		flag = flag & viewScheduleOnPrimaryCard(testCase);

		Keyword.ReportStep_Pass(
				testCase,
				"*********************** Verifying geofence based schedule on solution card **************************");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

			if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
					+ "\u2019" + "m Home']", testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Displayed Schedule : When I'm Home text displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : When I'm Home text not displayed on schedule screen");
			}

			if (MobileUtils.isMobElementExists("xpath",
					"//*[@text='Use My Home Settings']", testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
			}

			if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Create Sleep Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Create Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Sleep Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Sleep Settings option not displayed on schedule screen");
				}
			}

			if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
					+ "\u2019" + "m Away']", testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Displayed Schedule : When I'm Away text displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : When I'm Away text not displayed on schedule screen");
			}

			if (MobileUtils.isMobElementExists("xpath",
					"//*[@text='Use My Away Settings']", testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "Geofence_Home",
					testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
			}

			if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists("name",
						"Create Sleep Settings", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Create Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "Geofence_Sleep",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Sleep Settings option not displayed on schedule screen");
				}
			}
			if (MobileUtils.isMobElementExists("name", "Geofence_Away",
					testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
			}
		}

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		HashMap<String, String> targetSetPoints = new HashMap<String, String>();
		if (geofencePeriod.equalsIgnoreCase("Home")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='Use My Home Settings']")) {
					flag = false;
				}
			} else {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"GeofenceHome")) {
					flag = false;
				}
			}
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting set points for Home period ***************");
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_HOME);
			/*
			 * if (allowedModes.contains("Heat") &&
			 * allowedModes.contains("Cool")) { if
			 * (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "HomeTemperatureHeaderMultiTemperature", 5)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Edit Schedule : Successfully navigated to home set points page"
			 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
			 * FailType.FUNCTIONAL_FAILURE,
			 * "Edit Schedule : Failed to navigate to home set points page"); }
			 * } else if (allowedModes.contains("Heat") &&
			 * !allowedModes.contains("Cool") || !allowedModes.contains("Heat")
			 * && allowedModes.contains("Cool")) { if
			 * (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "HomeTemperatureHeaderSingleTemperature", 5)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Edit Schedule : Successfully navigated to home set points page"
			 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
			 * FailType.FUNCTIONAL_FAILURE,
			 * "Edit Schedule : Failed to navigate to home set points page"); }
			 * }
			 */
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT));
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Home cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Home heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Home heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Home cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
			}
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, "Home", targetSetPoints);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SaveButton");
			Keyword.ReportStep_Pass(testCase,
					"*************** Completed setting set points for Home period ***************");
		} else if (geofencePeriod.equalsIgnoreCase("Sleep")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='Use My Sleep Settings']")) {
					flag = false;
				}
			} else {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"GeofenceSleep")) {
					flag = false;
				}
			}
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting time and set points for Sleep period ***************");
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_SLEEP);
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME),
									"GeofenceSleepStartTime", true, true);
			flag = flag
					& JasperUtils
							.setPeriodTime(
									testCase,
									inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME),
									"GeofenceSleepEndTime", true, true);
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Sleep cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
			}
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, "Sleep", targetSetPoints);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SaveButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed setting time and set points for Sleep period ***************");
		} else if (geofencePeriod.equalsIgnoreCase("Away")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='Use My Away Settings']")) {
					flag = false;
				}
			} else {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"GeofenceAway")) {
					flag = false;
				}
			}
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(testCase,
					"*************** Setting set points for Away period ***************");
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_AWAY);
			/*
			 * if (allowedModes.contains("Heat") &&
			 * allowedModes.contains("Cool")) { if
			 * (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "AwayTemperatureHeaderMultiTemperature", 5)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Edit Schedule : Successfully navigated to away set points page"
			 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
			 * FailType.FUNCTIONAL_FAILURE,
			 * "Edit Schedule : Failed to navigate to away set points page"); }
			 * } else if (allowedModes.contains("Heat") &&
			 * !allowedModes.contains("Cool") || !allowedModes.contains("Heat")
			 * && allowedModes.contains("Cool")) { if
			 * (MobileUtils.isMobElementExists(fieldObjects, testCase,
			 * "AwayTemperatureHeaderSingleTemperature", 5)) {
			 * Keyword.ReportStep_Pass(testCase,
			 * "Edit Schedule : Successfully navigated to away set points page"
			 * ); } else { flag = false; Keyword.ReportStep_Fail(testCase,
			 * FailType.FUNCTIONAL_FAILURE,
			 * "Edit Schedule : Failed to navigate to away set points page"); }
			 * }
			 */
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT));
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Away cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Away heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetHeatTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Away heat set points to "
								+ targetSetPoints.get("targetHeatTemp"));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				targetSetPoints
						.put("targetCoolTemp",
								inputs.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT));
				Keyword.ReportStep_Pass(testCase,
						"Set Period Set Points : Setting Away cool set points to "
								+ targetSetPoints.get("targetCoolTemp"));
			}
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, "Away", targetSetPoints);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SaveButton");
			Keyword.ReportStep_Pass(testCase,
					"*************** Completed setting set points for Away period ***************");
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"BackButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"BackButton")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		}
		return flag;
	}

	public static boolean verifyScheduleEdited(TestCases testCase,
			TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		List<WebElement> schedule_setpoints = null;
		WebElement setPointIOS = null;
		String tempHeatSetPointApp = "", tempCoolSetPointApp = "", tempHeatSetPointFromInputs = "", tempCoolSetPointFromInputs = "", SleepStartEndTime = "", SleepStartTime = "", SleepEndTime = "", periodStartTimeApp = "", periodStartTimeInputs = "";

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		if (scheduleType.equalsIgnoreCase("geofence")) {
			// ============================================ANDROID============================================================
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(0)
								.getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(0)
								.getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(0)
								.getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(0)
								.getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			} else {
				// ==================================================IOS========================================================
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp
									.split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp
									.split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Home_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Home_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			}
			if (inputs.getInputValue(SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"CreateSleepSettings", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Create Sleep Settings is shown on solution card");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to find Create Sleep Settings option on solution card");
				}
			} else {
				// ============================================ANDROID============================================================
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (allowedModes.contains("Cool")
							&& allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(
									testCase, "ID",
									"scheduling_period_heating_point");
							tempHeatSetPointApp = schedule_setpoints.get(1)
									.getText();
							if (schedule_setpoints.get(1).getText()
									.contains(".0")) {
								tempHeatSetPointApp = schedule_setpoints.get(1)
										.getText().split("\\.")[0];
							}
							tempHeatSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempHeatSetPointApp
									.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: "
												+ tempHeatSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_cooling_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(
									testCase, "ID",
									"scheduling_period_cooling_point");
							tempCoolSetPointApp = schedule_setpoints.get(1)
									.getText();
							if (schedule_setpoints.get(1).getText()
									.contains(".0")) {
								tempCoolSetPointApp = schedule_setpoints.get(1)
										.getText().split("\\.")[0];
							}
							tempCoolSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempCoolSetPointApp
									.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: "
												+ tempCoolSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (allowedModes.contains("Cool")
							&& !allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_cooling_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(
									testCase, "ID",
									"scheduling_period_cooling_point");
							tempCoolSetPointApp = schedule_setpoints.get(1)
									.getText();
							if (schedule_setpoints.get(1).getText()
									.contains(".0")) {
								tempCoolSetPointApp = schedule_setpoints.get(1)
										.getText().split("\\.")[0];
							}
							tempCoolSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempCoolSetPointApp
									.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: "
												+ tempCoolSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (!allowedModes.contains("Cool")
							&& allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID",
								"scheduling_period_heating_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(
									testCase, "ID",
									"scheduling_period_heating_point");
							tempHeatSetPointApp = schedule_setpoints.get(1)
									.getText();
							if (schedule_setpoints.get(1).getText()
									.contains(".0")) {
								tempHeatSetPointApp = schedule_setpoints.get(1)
										.getText().split("\\.")[0];
							}
							tempHeatSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempHeatSetPointApp
									.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: "
												+ tempHeatSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
					}
					SleepStartEndTime = MobileUtils.getMobElement(testCase,
							"ID", "scheduling_period_startEnd_time").getText();

					String dateString = SleepStartEndTime.replaceAll("\\.", "");
					String startTimeTemp, endTimeTemp;
					try {
						if (!dateString.contains("m")
								&& !dateString.contains("M")) {
							final SimpleDateFormat sdf = new SimpleDateFormat(
									"H:mm");
							final Date dateObj1 = sdf.parse(SleepStartEndTime
									.split("\\s+")[0]);
							startTimeTemp = new SimpleDateFormat("hh:mm aa")
									.format(dateObj1);
							final Date dateObj2 = sdf.parse(SleepStartEndTime
									.split("\\s+")[2]);
							endTimeTemp = new SimpleDateFormat("hh:mm aa")
									.format(dateObj2);
							SleepStartEndTime = startTimeTemp + " - "
									+ endTimeTemp;
						}
					} catch (NumberFormatException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[NumberFormatException] Error message: "
										+ e.getMessage());
					} catch (ParseException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[ParseException] Error message: "
										+ e.getMessage());
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[Exception] Error message: " + e.getMessage());
					}

					SleepStartTime = SleepStartEndTime.split("\\s+")[0] + " "
							+ SleepStartEndTime.split("\\s+")[1];
					SleepEndTime = SleepStartEndTime.split("\\s+")[3] + " "
							+ SleepStartEndTime.split("\\s+")[4];
					if (SleepStartTime
							.equalsIgnoreCase(inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep Start time is shown correctly in solution card: "
										+ SleepStartTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep Start time: "
										+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME)
										+ " is not shown correctly in solution card: "
										+ SleepStartTime);
					}
					if (SleepEndTime
							.equalsIgnoreCase(inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep End time is shown correctly in solution card: "
										+ SleepEndTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep End time: "
										+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME)
										+ " is not shown correctly in solution card: "
										+ SleepEndTime);
					}
				} else {
					// ==================================================IOS========================================================
					if (allowedModes.contains("Cool")
							&& allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name",
								"Geofence_Sleep_HeatTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase,
									"name", "Geofence_Sleep_HeatTemperature");
							tempHeatSetPointApp = setPointIOS
									.getAttribute("value");
							if (tempHeatSetPointApp.contains(".0")) {
								tempHeatSetPointApp = tempHeatSetPointApp
										.split("\\.")[0];
							}
							tempHeatSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempHeatSetPointApp
									.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: "
												+ tempHeatSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
						if (MobileUtils.isMobElementExists("name",
								"Geofence_Sleep_CoolTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase,
									"name", "Geofence_Sleep_CoolTemperature");
							tempCoolSetPointApp = setPointIOS
									.getAttribute("value");
							if (tempCoolSetPointApp.contains(".0")) {
								tempCoolSetPointApp = tempCoolSetPointApp
										.split("\\.")[0];
							}
							tempCoolSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempCoolSetPointApp
									.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: "
												+ tempCoolSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (allowedModes.contains("Cool")
							&& !allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name",
								"Geofence_Sleep_CoolTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase,
									"name", "Geofence_Sleep_CoolTemperature");
							tempCoolSetPointApp = setPointIOS
									.getAttribute("value");
							if (tempCoolSetPointApp.contains(".0")) {
								tempCoolSetPointApp = tempCoolSetPointApp
										.split("\\.")[0];
							}
							tempCoolSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempCoolSetPointApp
									.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: "
												+ tempCoolSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (!allowedModes.contains("Cool")
							&& allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name",
								"Geofence_Sleep_HeatTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase,
									"name", "Geofence_Sleep_HeatTemperature");
							tempHeatSetPointApp = setPointIOS
									.getAttribute("value");
							if (tempHeatSetPointApp.contains(".0")) {
								tempHeatSetPointApp = tempHeatSetPointApp
										.split("\\.")[0];
							}
							tempHeatSetPointFromInputs = inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
										.split("\\.")[0];
							}
							if (tempHeatSetPointApp
									.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: "
												+ tempHeatSetPointFromInputs
												+ " is not shown correctly in solution card: "
												+ tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
					}
					SleepStartEndTime = MobileUtils.getMobElement(testCase,
							"name", "Geofence_SleepTimeInterval").getAttribute(
							"value");
					SleepStartTime = SleepStartEndTime.split("\\s+")[0] + " "
							+ SleepStartEndTime.split("\\s+")[1];
					SleepEndTime = SleepStartEndTime.split("\\s+")[3] + " "
							+ SleepStartEndTime.split("\\s+")[4];
					if (SleepStartTime
							.equalsIgnoreCase(inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep Start time is shown correctly in solution card: "
										+ SleepStartTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep Start time: "
										+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME)
										+ " is not shown correctly in solution card: "
										+ SleepStartTime);
					}
					if (SleepEndTime
							.equalsIgnoreCase(inputs
									.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep End time is shown correctly in solution card: "
										+ SleepEndTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep End time: "
										+ inputs.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME)
										+ " is not shown correctly in solution card: "
										+ SleepEndTime);
					}
				}
			}
			// ============================================ANDROID============================================================
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				int i;
				if (inputs.getInputValue(SET_GEOFENCE_SLEEP_TIMER)
						.equalsIgnoreCase("Yes")) {
					i = 2;
				} else {
					i = 1;
				}
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(i)
								.getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(i)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(i)
								.getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(i)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(i)
								.getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(i)
									.getText().split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID",
							"scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(
								testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(i)
								.getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(i)
									.getText().split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			} else {
				// ==================================================IOS========================================================
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp
									.split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp
									.split("\\.")[0];
						}
						tempCoolSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: "
											+ tempCoolSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name",
							"Geofence_Away_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase,
								"name", "Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						tempHeatSetPointFromInputs = inputs
								.getInputValue(JasperUtils.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: "
											+ tempHeatSetPointFromInputs
											+ " is not shown correctly in solution card: "
											+ tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			}
		} else if (scheduleType.equalsIgnoreCase("Everyday")) {
			if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
					"Grouped Days")) {
				flag = flag
						& JasperUtils
								.selectIndividualDaysViewOrGroupedDaysView(
										testCase, "Grouped Days");
			} else if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
					"Individual Days")) {
				flag = flag
						& JasperUtils
								.selectIndividualDaysViewOrGroupedDaysView(
										testCase, "Individual Days");
			}

			WebElement period = null;
			AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			int height = dimension.getHeight();
			int width = dimension.getWidth();
			TouchAction touchAction = new TouchAction(
					testCase.getMobileDriver());

			for (int i = 1; i <= 4; i++) {
				if (!inputs.getInputValue(PERIOD_NAME_NA + i).isEmpty()
						&& inputs.getInputValue(PERIOD_NAME_NA + i) != null) {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (!MobileUtils.isMobElementExists(
								"XPATH",
								"//*[@content-desc='"
										+ inputs.getInputValue(PERIOD_NAME_NA
												+ i) + "']", testCase, 5)) {
							testCase.getMobileDriver().scrollToExact(
									inputs.getInputValue(PERIOD_NAME_NA + i)
											.split("_")[1]);
							while (!MobileUtils
									.isMobElementExists(
											"XPATH",
											"//*[@content-desc='"
													+ inputs.getInputValue(PERIOD_NAME_NA
															+ i) + "']",
											testCase, 5)) {
								touchAction.press(width / 2, height / 2)
										.waitAction(2000).moveTo(width / 2, 82)
										.release();
								touchAction.perform();
							}
						}
						period = testCase.getMobileDriver().findElement(
								By.xpath("//*[@content-desc='"
										+ inputs.getInputValue(PERIOD_NAME_NA
												+ i) + "']"));

						if (period.findElement(By.id("scheduling_period_time")) != null) {
							periodStartTimeApp = period.findElement(
									By.id("scheduling_period_time")).getText();
							System.out.println(periodStartTimeApp);
						}
						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (allowedModes.contains("Cool")
									&& allowedModes.contains("Heat")) {
								tempHeatSetPointApp = period
										.findElement(
												By.id("scheduling_period_heating_point"))
										.getText();
								tempCoolSetPointApp = period
										.findElement(
												By.id("scheduling_period_cooling_point"))
										.getText();
								System.out.println(tempHeatSetPointApp);
								System.out.println(tempCoolSetPointApp);
							} else if (allowedModes.contains("Cool")
									&& !allowedModes.contains("Heat")) {
								tempCoolSetPointApp = period
										.findElement(
												By.id("scheduling_period_cooling_point"))
										.getText();
								System.out.println(tempCoolSetPointApp);
							} else if (!allowedModes.contains("Cool")
									&& allowedModes.contains("Heat")) {
								tempHeatSetPointApp = period
										.findElement(
												By.id("scheduling_period_heating_point"))
										.getText();
								System.out.println(tempHeatSetPointApp);
							}
						}

						if (inputs.getInputValue(PERIOD_NAME_NA + i).contains(
								"Wake")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("1")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_WAKE_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_1_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_1_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_1_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Away")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("2")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_AWAY_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_2_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_2_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_2_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Home")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("3")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_HOME_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_HOME_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_3_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_3_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_3_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Sleep")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("4")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_4_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_4_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_4_COOL_SETPOINT);
							}
						}

						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (!periodStartTimeApp.contains("M")
									&& !periodStartTimeApp.contains("m")) {
								Date returnTimeApp, returnTimeInputs;
								SimpleDateFormat df24 = new SimpleDateFormat(
										"hh:mm");
								String dateStringApp = periodStartTimeApp
										.replaceAll("\\.", "");
								String dateStringInputs = periodStartTimeInputs
										.replaceAll("\\.", "");
								try {
									returnTimeApp = df24.parse(dateStringApp);
									periodStartTimeApp = df24
											.format(returnTimeApp);
									returnTimeInputs = df24
											.parse(dateStringInputs);
									periodStartTimeInputs = df24
											.format(returnTimeInputs);
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error: "
													+ e.getMessage());
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error: "
													+ e.getMessage());
								}
							}
						}
						System.out.println(periodStartTimeApp);
						System.out.println(periodStartTimeInputs);
					} else {
						if (!MobileUtils
								.isMobElementExists(
										"xpath",
										"//*[@name='"
												+ inputs.getInputValue(
														PERIOD_NAME_NA + i)
														.split("_")[0]
												+ "']/following-sibling::UIATableCell[contains(@name,'"
												+ inputs.getInputValue(
														PERIOD_NAME_NA + i)
														.split("_")[1]
												+ "')][1]", testCase, 5)) {
							testCase.getMobileDriver().scrollToExact(
									inputs.getInputValue(PERIOD_NAME_NA + i)
											.split("_")[0]);
							while (!MobileUtils
									.isMobElementExists(
											"xpath",
											"//*[@name='"
													+ inputs.getInputValue(
															PERIOD_NAME_NA + i)
															.split("_")[0]
													+ "']/following-sibling::UIATableCell[contains(@name,'"
													+ inputs.getInputValue(
															PERIOD_NAME_NA + i)
															.split("_")[1]
													+ "')][1]", testCase, 5)) {
								touchAction.press(width / 2, height / 2)
										.waitAction(2000).moveTo(width / 2, 82)
										.release();
								touchAction.perform();
							}
						}
						period = testCase
								.getMobileDriver()
								.findElement(
										By.xpath("//*[@name='"
												+ inputs.getInputValue(
														PERIOD_NAME_NA + i)
														.split("_")[0]
												+ "']/following-sibling::UIATableCell[@name='"
												+ inputs.getInputValue(PERIOD_NAME_NA
														+ i) + "'][1]"));

						String cp = inputs.getInputValue(PERIOD_NAME_NA + i)
								+ "_CoolTemperature";
						String hp = inputs.getInputValue(PERIOD_NAME_NA + i)
								+ "_HeatTemperature";
						WebElement elemTime = testCase
								.getMobileDriver()
								.findElement(
										By.xpath("//*[@name='"
												+ inputs.getInputValue(
														PERIOD_NAME_NA + i)
														.split("_")[0]
												+ "']/following-sibling::UIATableCell[@name='"
												+ inputs.getInputValue(PERIOD_NAME_NA
														+ i)
												+ "'][1]/UIAStaticText[2]"));

						if (elemTime != null) {
							periodStartTimeApp = elemTime.getAttribute("value");
						}
						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (allowedModes.contains("Cool")
									&& allowedModes.contains("Heat")) {
								WebElement elemCP = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//UIAApplication//UIATableCell[@name='"
														+ inputs.getInputValue(PERIOD_NAME_NA
																+ i)
														+ "']//*[contains(@name,'"
														+ cp + "')]"));
								WebElement elemHP = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//UIAApplication//UIATableCell[@name='"
														+ inputs.getInputValue(PERIOD_NAME_NA
																+ i)
														+ "']//*[contains(@name,'"
														+ hp + "')]"));
								tempHeatSetPointApp = elemHP
										.getAttribute("value");
								tempCoolSetPointApp = elemCP
										.getAttribute("value");
							} else if (allowedModes.contains("Cool")
									&& !allowedModes.contains("Heat")) {
								WebElement elemCP = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//UIAApplication//UIATableCell[@name='"
														+ inputs.getInputValue(PERIOD_NAME_NA
																+ i)
														+ "']//*[contains(@name,'"
														+ cp + "')]"));
								tempCoolSetPointApp = elemCP
										.getAttribute("value");

							} else if (!allowedModes.contains("Cool")
									&& allowedModes.contains("Heat")) {
								WebElement elemHP = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//UIAApplication//UIATableCell[@name='"
														+ inputs.getInputValue(PERIOD_NAME_NA
																+ i)
														+ "']//*[contains(@name,'"
														+ hp + "')]"));
								tempHeatSetPointApp = elemHP
										.getAttribute("value");
							}
						}

						if (inputs.getInputValue(PERIOD_NAME_NA + i).contains(
								"Wake")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("1")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_WAKE_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_WAKE_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_WAKE_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_1_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_1_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_1_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Away")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("2")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_AWAY_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_AWAY_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_AWAY_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_2_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_2_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_2_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Home")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("3")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_HOME_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_HOME_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_HOME_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_3_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_3_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_3_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(PERIOD_NAME_NA + i)
								.contains("Sleep")
								|| inputs.getInputValue(PERIOD_NAME_NA + i)
										.contains("4")) {
							if (statInfo.getDeviceType().equalsIgnoreCase(
									"HoneyBadger")
									|| statInfo.getJasperDeviceType()
											.equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_SLEEP_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs
										.getInputValue(EVERYDAY_4_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_4_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(EVERYDAY_4_COOL_SETPOINT);
							}
						}

						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (!periodStartTimeApp.contains("M")
									&& !periodStartTimeApp.contains("m")) {
								Date returnTimeApp, returnTimeInputs;
								SimpleDateFormat df24 = new SimpleDateFormat(
										"hh:mm");
								String dateStringApp = periodStartTimeApp
										.replaceAll("\\.", "");
								String dateStringInputs = periodStartTimeInputs
										.replaceAll("\\.", "");
								try {
									returnTimeApp = df24.parse(dateStringApp);
									periodStartTimeApp = df24
											.format(returnTimeApp);
									returnTimeInputs = df24
											.parse(dateStringInputs);
									periodStartTimeInputs = df24
											.format(returnTimeInputs);
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error: "
													+ e.getMessage());
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error: "
													+ e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error: "
													+ e.getMessage());
								}
							}
						}
					}
					if (!periodStartTimeApp.isEmpty()) {
						if (periodStartTimeApp
								.equalsIgnoreCase(periodStartTimeInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period time to "
											+ periodStartTimeApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period time in app: "
											+ periodStartTimeApp
											+ " is not changed to expected value: "
											+ periodStartTimeInputs);
						}
					}
					if (!tempCoolSetPointApp.isEmpty()) {
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp
									.split("\\.")[0];
						}
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempCoolSetPointApp
								.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period cool point to "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period cool point in app: "
											+ tempCoolSetPointApp
											+ " is not changed to expected value: "
											+ tempCoolSetPointFromInputs);
						}
					}
					if (!tempHeatSetPointApp.isEmpty()) {
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp
									.split("\\.")[0];
						}
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs
									.split("\\.")[0];
						}
						if (tempHeatSetPointApp
								.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period heat point to "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period heat point in app: "
											+ tempHeatSetPointApp
											+ " is not changed to expected value: "
											+ tempHeatSetPointFromInputs);
						}
					}
				}
			}

		} else if (scheduleType.equalsIgnoreCase("Weekday and Weekend")) {

		}

		return flag;
	}

	public static boolean addOrDeleteSleepSettings(TestCases testCase,
			TestCaseInputs inputs, boolean addSleepSettings) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		flag = flag & viewScheduleOnPrimaryCard(testCase);
		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_SLEEP);
		if (addSleepSettings) {
			inputs.setInputValue(SET_GEOFENCE_SLEEP_TIMER, "Yes");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateSleepSettings", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"CreateSleepSettings")) {
					flag = false;
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"SaveButton", 5)) {
						if (!MobileUtils.clickOnElement(fieldObjects, testCase,
								"SaveButton")) {
							flag = false;
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate SAVE button");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Create Sleep Settings button");
			}
		} else {
			inputs.setInputValue(SET_GEOFENCE_SLEEP_TIMER, "No");
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Sleep Settings']", testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "xpath",
							"//*[@text='Use My Sleep Settings']")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Use My Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "Geofence_Sleep",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"Geofence_Sleep")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Use My Sleep Settings option not displayed on schedule screen");
				}
			}
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"PeriodDeleteIcon", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"PeriodDeleteIcon")) {
					flag = false;
				} else {
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists("XPATH",
								"//*[@text='Delete']", testCase, 5)) {
							if (!MobileUtils.clickOnElement(testCase, "XPATH",
									"//*[@text='Delete']")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to find Confirm Delete button");
						}
					} else {
						if (MobileUtils.isMobElementExists("XPATH",
								"//UIAButton[@name='Delete']", testCase, 5)) {
							if (!MobileUtils.clickOnElement(testCase, "XPATH",
									"//UIAButton[@name='Delete']")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to find Confirm Delete button");
						}
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Delete icon");
			}
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"BackButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"BackButton")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		}

		return flag;
	}

	public static boolean setGeofenceSleepSettings(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		HashMap<String, String> targetSetPoints = new HashMap<String, String>();

		flag = flag & JasperUtils.viewScheduleOnPrimaryCard(testCase);

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("xpath",
					"//*[@text='Use My Sleep Settings']", testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Use My Sleep Settings option displayed on schedule screen");
				if (!MobileUtils.clickOnElement(testCase, "xpath",
						"//*[@text='Use My Sleep Settings']")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Sleep Settings option not displayed on schedule screen");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "Geofence_Sleep",
					testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Use My Sleep Settings option displayed on schedule screen");
				if (!MobileUtils.clickOnElement(testCase, "name",
						"Geofence_Sleep")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Sleep Settings option not displayed on schedule screen");
			}
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting time and set points for Sleep period ***************");
		flag = flag
				& JasperUtils.setPeriodTime(testCase, inputs
						.getInputValue(JasperUtils.GEOFENCE_SLEEP_START_TIME),
						"GeofenceSleepStartTime", true, true);
		flag = flag
				& JasperUtils.setPeriodTime(testCase, inputs
						.getInputValue(JasperUtils.GEOFENCE_SLEEP_END_TIME),
						"GeofenceSleepEndTime", true, true);
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Sleep cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Sleep heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (allowedModes.contains("Heat")
				&& !allowedModes.contains("Cool")) {
			targetSetPoints.put("targetHeatTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_SLEEP_HEAT_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Sleep heat set points to "
							+ targetSetPoints.get("targetHeatTemp"));
		} else if (!allowedModes.contains("Heat")
				&& allowedModes.contains("Cool")) {
			targetSetPoints.put("targetCoolTemp", inputs
					.getInputValue(JasperUtils.GEOFENCE_SLEEP_COOL_SETPOINT));
			Keyword.ReportStep_Pass(testCase,
					"Set Period Set Points : Setting Sleep cool set points to "
							+ targetSetPoints.get("targetCoolTemp"));
		}
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, "Sleep", targetSetPoints);
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"SaveButton", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"SaveButton")) {
				flag = false;
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate SAVE button");
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"BackButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"BackButton")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		}

		return flag;
	}

	public static boolean editGeofenceScheduleWithMinMaxValues(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		flag = flag & viewScheduleOnPrimaryCard(testCase);

		Keyword.ReportStep_Pass(
				testCase,
				"*********************** Verifying geofence based schedule on solution card **************************");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

			if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
					+ "\u2019" + "m Home']", testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Displayed Schedule : When I'm Home text displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : When I'm Home text not displayed on schedule screen");
			}

			if (MobileUtils.isMobElementExists("xpath",
					"//*[@text='Use My Home Settings']", testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
			}

			if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Create Sleep Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Create Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("xpath",
						"//*[@text='Use My Sleep Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule :Use My Sleep Settings option not displayed on schedule screen");
				}
			}

			if (MobileUtils.isMobElementExists("xpath", "//*[@text='When I"
					+ "\u2019" + "m Away']", testCase, 5)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Displayed Schedule : When I'm Away text displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : When I'm Away text not displayed on schedule screen");
			}

			if (MobileUtils.isMobElementExists("xpath",
					"//*[@text='Use My Away Settings']", testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule :Use My Home Settings option not displayed on schedule screen");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "Geofence_Home",
					testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Home Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
			}

			if (inputs.getInputValue(JasperUtils.SET_GEOFENCE_SLEEP_TIMER)
					.equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists("name",
						"Create Sleep Settings", testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Create Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Create Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "Geofence_Sleep",
						testCase, 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify Displayed Schedule : Use My Sleep Settings option displayed on schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify Displayed Schedule : Use My Sleep Settings option not displayed on schedule screen");
				}
			}
			if (MobileUtils.isMobElementExists("name", "Geofence_Away",
					testCase, 5)) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Schedule : Use My Away Settings option displayed on schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Schedule : Use My Home Settings option not displayed on schedule screen");
			}
		}

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@text='Use My Home Settings']", testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='Use My Home Settings']")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Home Settings option not displayed on schedule screen");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"GeofenceHome", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"GeofenceHome")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Home Settings option not displayed on schedule screen");
			}
		}

		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_HOME);
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Setting maximum and minimum set points for Home ***************");
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, null, true);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"SaveButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed setting maximum and minimum set points for Home ***************");

		if (inputs.getInputValue(SET_GEOFENCE_SLEEP_TIMER).equalsIgnoreCase(
				"Yes")) {
			inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_SLEEP);
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("XPATH",
						"//*[@text='Use My Sleep Settings']", testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "XPATH",
							"//*[@text='Use My Sleep Settings']")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Use My Sleep Settings option not displayed on schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"GeofenceSleep", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"GeofenceSleep")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Use My Sleep Settings option not displayed on schedule screen");
				}
			}
			Keyword.ReportStep_Pass(testCase, " ");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Setting maximum and minimum set points for Sleep ***************");
			flag = flag
					& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
							inputs, null, true);
			flag = flag
					& MobileUtils.clickOnElement(fieldObjects, testCase,
							"SaveButton");
			Keyword.ReportStep_Pass(
					testCase,
					"*************** Completed setting maximum and minimum set points for Sleep ***************");
		}

		inputs.setInputValue(GEOFENCE_PERIOD, GEOFENCE_AWAY);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@text='Use My Away Settings']", testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='Use My Away Settings']")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Away Settings option not displayed on schedule screen");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"GeofenceAway", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"GeofenceAway")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Use My Away Settings option not displayed on schedule screen");
			}
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Setting maximum and minimum set points for Away ***************");
		flag = flag
				& JasperUtils.setGeofenceSchedulePeriodSetPoints(testCase,
						inputs, null, true);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"SaveButton");
		Keyword.ReportStep_Pass(
				testCase,
				"*************** Completed setting maximum and minimum set points for Away ***************");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"BackButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"BackButton")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		}
		return flag;
	}

	public static boolean verifyTemperatureFieldIncrements(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		List<WebElement> schedule_heatsetpoints = null, schedule_coolsetpoints = null;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_heating_point", testCase, 5)) {
					schedule_heatsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_heating_point");
					for (int i = 0; i < schedule_heatsetpoints.size(); i++) {
						if (inputs.getInputValue(UNITS).equalsIgnoreCase(
								GlobalVariables.CELSIUS)) {
							if (schedule_heatsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is in 0.5C increments for Celsius mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is not in 0.5C increments for Celsius mode");
							}
						} else if (inputs.getInputValue(UNITS)
								.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
							if (!schedule_heatsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is in 1F increments for Fahrenheit mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is not in 1F increments for Fahrenheit mode");
							}
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate schedule heat set points");
				}
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_cooling_point", testCase, 5)) {
					schedule_coolsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_cooling_point");
					for (int i = 0; i < schedule_coolsetpoints.size(); i++) {
						if (inputs.getInputValue(UNITS).equalsIgnoreCase(
								GlobalVariables.CELSIUS)) {
							if (schedule_coolsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is in 0.5C increments for Celsius mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is not in 0.5C increments for Celsius mode");
							}
						} else if (inputs.getInputValue(UNITS)
								.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
							if (!schedule_coolsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is in 1F increments for Fahrenheit mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is not in 1F increments for Fahrenheit mode");
							}
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate schedule cool set points");
				}
			} else if (allowedModes.contains("Cool")
					&& !allowedModes.contains("Heat")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_cooling_point", testCase, 5)) {
					schedule_coolsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_cooling_point");
					for (int i = 0; i < schedule_coolsetpoints.size(); i++) {
						if (inputs.getInputValue(UNITS).equalsIgnoreCase(
								GlobalVariables.CELSIUS)) {
							if (schedule_coolsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is in 0.5C increments for Celsius mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is not in 0.5C increments for Celsius mode");
							}
						} else if (inputs.getInputValue(UNITS)
								.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
							if (!schedule_coolsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is in 1F increments for Fahrenheit mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_coolsetpoints.get(i)
														.getText()
												+ " is not in 1F increments for Fahrenheit mode");
							}
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate schedule cool set points");
				}
			} else if (!allowedModes.contains("Cool")
					&& allowedModes.contains("Heat")) {
				if (MobileUtils.isMobElementExists("ID",
						"scheduling_period_heating_point", testCase, 5)) {
					schedule_heatsetpoints = MobileUtils.getMobElements(
							testCase, "ID", "scheduling_period_heating_point");
					for (int i = 0; i < schedule_heatsetpoints.size(); i++) {
						if (inputs.getInputValue(UNITS).equalsIgnoreCase(
								GlobalVariables.CELSIUS)) {
							if (schedule_heatsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is in 0.5C increments for Celsius mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is not in 0.5C increments for Celsius mode");
							}
						} else if (inputs.getInputValue(UNITS)
								.equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
							if (!schedule_heatsetpoints.get(i).getText()
									.contains(".")) {
								Keyword.ReportStep_Pass(
										testCase,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is in 1F increments for Fahrenheit mode");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Set point: "
												+ schedule_heatsetpoints.get(i)
														.getText()
												+ " is not in 1F increments for Fahrenheit mode");
							}
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate schedule heat set points");
				}
			}
		}

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"BackButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"BackButton")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		} else {
			if (MobileUtils.isMobElementExists("name", "btn close normal",
					testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "name",
						"btn close normal")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Back button");
			}
		}
		return flag;
	}

	public static boolean verifyWidgetDisplayedSetPoints(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String chilDeviceSystemMode = statInfo.getThermoStatMode();
		String appDeviceSetPoints = " ";

		if (chilDeviceSystemMode.equalsIgnoreCase("Off")) {
			Keyword.ReportStep_Pass(
					testCase,
					"Verify Displayed Set Points : System mode is off. Hence, not verifying set points");
			return true;
		} else {
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			} else {
				appDeviceSetPoints = MobileUtils.getMobElement(fieldObjects,
						testCase, "WidgetSetpoint").getAttribute("name");
			}
			if (chilDeviceSystemMode.equalsIgnoreCase("Auto")) {
				chilDeviceSystemMode = statInfo
						.getThermostatModeWhenAutoChangeOverActive();
			}
			String deviceSetPoints = statInfo.getCurrentSetPoints();
			if (Double.parseDouble(deviceSetPoints)
					- Double.parseDouble(appDeviceSetPoints) == 0) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Displayed Set Points : Displayed widget setpoint value is same as value in CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Displayed Set Points : Displayed widget set point value is not same as value in CHIL. Widget value : "
								+ appDeviceSetPoints
								+ ", CHIL value : "
								+ deviceSetPoints);
			}
		}
		return flag;
	}

	public static boolean verifyDashBoard(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "HomeScreen");
			List<WebElement> devices;
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				devices = MobileUtils.getMobElements(testCase, "xpath",
						"//UIACollectionCell");
			} else {
				devices = MobileUtils.getMobElements(fieldObjects, testCase,
						"DashBoardDevices");
			}
			if (devices.size() > 0) {
				Keyword.ReportStep_Pass(testCase, "User is in Dashboard");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"User is not in Dashboard");
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"[Verify DashBoard Devices] Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyDashBoardDevicesCount(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "HomeScreen");
			LocationInformation locInfo = new LocationInformation(testCase,
					inputs);
			String locID = String.valueOf(locInfo.getLocationID());
			List<WebElement> devices;
			List<String> deviceNames = JasperUtils.getDeviceNames(testCase,
					inputs, locID);
			if (deviceNames.size() > 1) {
				if (testCase.getPlatform().toUpperCase().contains("IOS")) {
					devices = MobileUtils.getMobElements(testCase, "xpath",
							"//UIACollectionCell");
				} else {
					devices = MobileUtils.getMobElements(fieldObjects,
							testCase, "DashBoardDevices");
				}
				if (deviceNames.size() == (devices.size())) {
					Keyword.ReportStep_Pass(
							testCase,
							"Verify DashBoard Devices : Number of devices displayed is same on both app and CHIL for location :"
									+ inputs.getInputValue("LOCATION1_NAME"));
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Verify DashBoard Devices : Number of devices displayed is not matching on app and CHIL for location : "
									+ inputs.getInputValue("LOCATION1_NAME"));
				}
			} else {
				Keyword.ReportStep_Pass(testCase,
						"Verify DashBoard Devices : There is no dasboard for the location");
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"[Verify DashBoard Devices] Error Occured : "
							+ e.getMessage());
		}
		return flag;
	}

	public static boolean verifyWidgetIndoorTemperature(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		String chilDeviceIndoorTemperature = statInfo.getIndoorTemperature();
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			MobileUtils.isMobElementExists(fieldObjects, testCase,
					"WidgetIndoorTemp");
			if (MobileUtils
					.getMobElement(fieldObjects, testCase, "WidgetIndoorTemp")
					.getText().equals(chilDeviceIndoorTemperature)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Indoor Temperature : Indoor temperature is : "
								+ chilDeviceIndoorTemperature
								+ " in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Primary Card Elements : Indoor temperature is not the same in CHIL and app. App : "
								+ MobileUtils.getMobElement(fieldObjects,
										testCase, "IndoorTemperature")
										.getText()
								+ " ,CHIL : "
								+ chilDeviceIndoorTemperature);
			}
		} else {
			// TODO
			if (MobileUtils
					.getMobElement(fieldObjects, testCase, "IndoorTemperature")
					.getAttribute("value").equals(chilDeviceIndoorTemperature)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Indoor Temperature : Indoor temperature is : "
								+ chilDeviceIndoorTemperature
								+ " in both app and CHIL");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Primary Card Elements : Indoor temperature is not the same in CHIL and app. App : "
								+ MobileUtils.getMobElement(fieldObjects,
										testCase, "IndoorTemperature")
										.getAttribute("value")
								+ " ,CHIL : "
								+ chilDeviceIndoorTemperature);
			}
		}
		return flag;
	}

	public static boolean verifyDialerSetPointsAreBtnMaxAndMin(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		HashMap<String, String> maxMinSetPoints = statInfo
				.getDeviceMaxMinSetPoints();
		String currentSystemMode = statInfo.getThermoStatMode();
		Double currentSetPoint = getCurrentSetPointInDialer(testCase);
		if (currentSystemMode.equalsIgnoreCase("Auto")) {
			currentSystemMode = statInfo
					.getThermostatModeWhenAutoChangeOverActive();
		}
		if (currentSystemMode.equalsIgnoreCase("Heat")) {
			if (currentSetPoint <= Double.parseDouble(maxMinSetPoints
					.get("MaxHeat"))) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than or equal to max heat set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than max heat set points");
			}
			if (currentSetPoint >= Double.parseDouble(maxMinSetPoints
					.get("MinHeat"))) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than or equal to min heat set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than min heat set points");
			}
		} else if (currentSystemMode.equalsIgnoreCase("Cool")) {
			if (currentSetPoint <= Double.parseDouble(maxMinSetPoints
					.get("MaxCool"))) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than or equal to max cool set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than max cool set points");
			}
			if (currentSetPoint >= Double.parseDouble(maxMinSetPoints
					.get("MinCool"))) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than or equal to min cool set points");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than min cool set points");
			}
		}
		return flag;
	}

	public static boolean verifyDialerAutoChangeOverLogic(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();
		if (!allowedModes.contains("Auto")) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Dialer Auto Change Over Logic : Thermostat does not support auto mode");
			return flag;
		} else {
			Double heatSetPoints = 0.0;
			Double coolSetPoints = 0.0;
			String systemMode = statInfo.getThermoStatMode();
			if (systemMode.equalsIgnoreCase("Heat")) {
				heatSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
				flag = flag
						& JasperUtils
								.changeSystemMode(testCase, inputs, "Cool");
				coolSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
			} else if (systemMode.equalsIgnoreCase("Cool")) {
				coolSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
				flag = flag
						& JasperUtils
								.changeSystemMode(testCase, inputs, "Heat");
				heatSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
			} else if (systemMode.equalsIgnoreCase("Auto")) {
				flag = flag
						& JasperUtils
								.changeSystemMode(testCase, inputs, "Cool");
				coolSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
				flag = flag
						& JasperUtils
								.changeSystemMode(testCase, inputs, "Heat");
				heatSetPoints = JasperUtils
						.getCurrentSetPointInDialer(testCase);
			}
			if (coolSetPoints > heatSetPoints) {
				Keyword.ReportStep_Pass(
						testCase,
						"Verify Dialer Auto Change Over Logic : Dialer is following auto changeover logic");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Verify Dialer Auto Change Over Logic : Dialer is not following auto changeover logic");
			}
		}
		return flag;
	}

	public static boolean verifyDialerCannotBeRotated(TestCases testCase) {
		boolean flag = true;
		Double setPointsBeforeSwipe = JasperUtils
				.getCurrentSetPointInDialer(testCase);
		Double setPointsAfterSwipe = 0.0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		WebElement dialer = MobileUtils.getMobElement(fieldObjects, testCase,
				"Dialer");
		TouchAction actions = new TouchAction(testCase.getMobileDriver());
		int startX = dialer.getLocation().getX();
		int middleX = (startX + (dialer.getSize().getWidth() / 2));
		int startY = dialer.getLocation().getY();
		int middleY = (startY + (dialer.getSize().getHeight() / 2));
		double tempMove;
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			if (testCase.getPlatform().toUpperCase()
					.contains("IOS_EXTRA_LARGE")) {
				tempMove = dialer.getSize().getWidth() / (9);
			} else {
				tempMove = dialer.getSize().getWidth() / (6);
			}
		} else {
			tempMove = dialer.getSize().getWidth() / (8.5);
		}
		int MoveToX = (int) tempMove;
		actions.press(middleX, middleY).waitAction().moveTo(MoveToX, 0)
				.waitAction().release().perform();
		setPointsAfterSwipe = JasperUtils.getCurrentSetPointInDialer(testCase);

		if (setPointsBeforeSwipe - setPointsAfterSwipe == 0.0) {
			Keyword.ReportStep_Pass(
					testCase,
					"Verify Dialer Cannot be Rotated : Setpoints before swipe and after swipe are the same");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(
					testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Verify Dialer Cannot be Rotated : Setpoints before swipe and after swipe not the same");
		}
		return flag;
	}

	public static String getDialerSystemMode(TestCases testCase) {
		String systemMode = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");
		if (!MobileUtils
				.isMobElementExists(fieldObjects, testCase, "Dialer", 5)) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Dialer System Mode : Could not locate dailer");
			return systemMode;
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			String temp;
			temp = MobileUtils.getMobElement(fieldObjects, testCase, "Dialer")
					.getAttribute("name");
			systemMode = temp.split(",")[0];
		} else {
			systemMode = MobileUtils.getMobElement(fieldObjects, testCase,
					"Dialer").getAttribute("label");
		}
		return systemMode;
	}

	public static boolean setGeofencingPushNotifications(TestCases testCase,
			boolean enableGeofencingPushNotification) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GlobalDrawer");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"GlobalDrawerButton", 10)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"GlobalDrawerButton")) {
				flag = false;
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AlertsAndNotifications", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"AlertsAndNotifications")) {
						flag = false;
					} else {
						fieldObjects = MobileUtils.loadObjectFile(testCase,
								"AlertsAndNotifications");
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "GeofencingToggle", 5)) {
							if (enableGeofencingPushNotification) {
								if (MobileUtils
										.getMobElement(fieldObjects, testCase,
												"GeofencingToggle").getText()
										.equalsIgnoreCase("On")) {
									Keyword.ReportStep_Pass(testCase,
											"GeofencingPushNotification toggle is already enabled");
								} else {
									if (!MobileUtils.clickOnElement(
											fieldObjects, testCase,
											"GeofencingToggle")) {
										flag = false;
									}
								}
							} else {
								if (MobileUtils
										.getMobElement(fieldObjects, testCase,
												"GeofencingToggle").getText()
										.equalsIgnoreCase("Off")) {
									Keyword.ReportStep_Pass(testCase,
											"GeofencingPushNotification toggle is already disabled");
								} else {
									if (!MobileUtils.clickOnElement(
											fieldObjects, testCase,
											"GeofencingToggle")) {
										flag = false;
									}
								}
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate GeofencingPushNotification option");
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Alerts and Notifications option");
				}
			}
			for (int i = 0; i < 2; i++) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"BackButton", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"BackButton")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Back button");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Global Drawer icon");
		}

		return flag;
	}

	public static boolean validatePushNotifications(TestCases testCase,
			TestCaseInputs inputs, boolean expectingNotification) {
		boolean flag = true, notificationFlag = true;
		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		if (driver != null) {
			FluentWait<AppiumDriver<MobileElement>> fWait = new FluentWait<AppiumDriver<MobileElement>>(
					driver);
			fWait.withTimeout(60, TimeUnit.SECONDS);
			fWait.pollingEvery(5, TimeUnit.SECONDS);
			fWait.ignoring(NoSuchElementException.class);

			if (MobileUtils.showNotificationAndroidOnly(driver)) {
				try {
					fWait.until(new Function<AppiumDriver<MobileElement>, Boolean>() {
						public Boolean apply(AppiumDriver<MobileElement> driver) {
							List<MobileElement> titles = driver.findElements(By
									.xpath("//android.view.ViewGroup/android.widget.FrameLayout"));
							for (int j = 1; j < titles.size(); j++) {
								if (driver
										.findElements(
												By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
														+ j
														+ "]//android.widget.LinearLayout/android.widget.TextView[1]"))
										.size() > 0) {
									if (driver
											.findElement(
													By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
															+ j
															+ "]//android.widget.LinearLayout/android.widget.TextView[1]"))
											.getText().contains("Lyric")) {
										System.out.println("expected"
												+ inputs.getInputValue("ExpectedAlertText"));
										if (driver
												.findElements(
														By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
																+ j
																+ "]//android.widget.LinearLayout[2]/android.widget.TextView[1]"))
												.size() > 0) {
											System.out.println(driver
													.findElement(
															By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
																	+ j
																	+ "]//android.widget.LinearLayout[2]/android.widget.TextView[1]"))
													.getText());
											Keyword.ReportStep_Pass(
													testCase,
													"Search Alert Notification with text -"
															+ inputs.getInputValue("ExpectedAlertText")
															+ " but found "
															+ driver.findElement(
																	By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
																			+ j
																			+ "]//android.widget.LinearLayout[2]/android.widget.TextView[1]"))
																	.getText());
											if (driver
													.findElement(
															By.xpath("//android.view.ViewGroup/android.widget.FrameLayout["
																	+ j
																	+ "]//android.widget.LinearLayout[2]/android.widget.TextView[1]"))
													.getText()
													.contains(
															inputs.getInputValue("ExpectedAlertText"))) {
												Keyword.ReportStep_Pass(
														testCase,
														"Found Notification with text -"
																+ inputs.getInputValue("ExpectedAlertText"));
												return true;
											}
										}
									}
								}
							}
							return false;
						}
					});
					if (expectingNotification) {
						if (!notificationFlag) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.COSMETIC_FAILURE,
									"Not able to find Notifications with text -"
											+ inputs.getInputValue("ExpectedAlertText"));
						} else {
							Keyword.ReportStep_Pass(
									testCase,
									"Notification found with text: "
											+ inputs.getInputValue("ExpectedAlertText"));
						}
					} else {
						if (!notificationFlag) {
							Keyword.ReportStep_Pass(testCase, "Notification: "
									+ inputs.getInputValue("ExpectedAlertText")
									+ " is not shown");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.COSMETIC_FAILURE,
									"Notification: "
											+ inputs.getInputValue("ExpectedAlertText")
											+ " is shown when push notification is not expected");
						}
					}
				} catch (TimeoutException e) {
					if (expectingNotification) {
						flag = false;
						notificationFlag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TimeOut] Not able to find expected alert notification of the app");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"[TimeOut] Alert notification is not shown in app as expected");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not able to view Notifications");
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Driver is null");

		}
		return flag;
	}

	public static boolean navigateToAlertsAndNotificationsScreen(
			TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GlobalDrawer");

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"GlobalDrawerButton", 10)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"GlobalDrawerButton")) {
				flag = false;
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AlertsAndNotifications", 10)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"AlertsAndNotifications")) {
						flag = false;
					} else {
						fieldObjects = MobileUtils.loadObjectFile(testCase,
								"AlertsAndNotifications");
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "ComfortAlerts", 10)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "ComfortAlerts")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate Comfort Alerts option");
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Alerts and Notifications option");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Global Drawer icon");
		}

		return flag;
	}

	public static boolean selectDeviceInComfortAlertsScreen(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (!statInfo.isStatOnline()) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Thermostat is Offline");
			return false;
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"StatName", 5)) {
				List<WebElement> statNames = MobileUtils.getMobElements(
						fieldObjects, testCase, "StatName");
				for (int i = 0; i < statNames.size(); i++) {
					if (statNames
							.get(i)
							.getText()
							.equalsIgnoreCase(
									inputs.getInputValue("LOCATION1_DEVICE1_NAME"))) {
						try {
							statNames.get(i).click();
							Keyword.ReportStep_Pass(
									testCase,
									"Selected: "
											+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
							break;
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select: "
											+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
											+ "\nError message: "
											+ e.getMessage());
						}
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the list of Stat names in Comfort Alerts screen");
			}
		} else {
			if (MobileUtils.isMobElementExists(
					"XPATH",
					"//UIAStaticText[@name='"
							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
							+ "']", testCase, 5)) {
				if (!MobileUtils
						.clickOnElement(
								testCase,
								"XPATH",
								"//UIAStaticText[@name='"
										+ inputs.getInputValue("LOCATION1_DEVICE1_NAME")
										+ "']")) {
					flag = false;
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the Stat name: "
								+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
			}
		}
		return flag;
	}

	public static boolean verifyHighLowTemperatureDisplayed(TestCases testCase,
			boolean expectingValue) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowTemperatureOrHumidity", 5)) {
				if (expectingValue) {
					if (!(MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(0)
							.getText().equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(
								testCase,
								"High/Low Temperature value is shown: "
										+ MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"HighLowTemperatureOrHumidity")
												.get(0).getText());
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown as Off");
					}
				} else {
					if ((MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(0)
							.getText().equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(testCase,
								"High/Low Temperature value is shown as Off");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown: "
										+ MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"HighLowTemperatureOrHumidity")
												.get(0).getText()
										+ " instead of Off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate High/Low Temperature value field");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowTemperatureIOS", 5)) {
				if (expectingValue) {
					if (!(MobileUtils.getMobElement(fieldObjects, testCase,
							"HighLowTemperatureIOS").getAttribute("value")
							.equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(
								testCase,
								"High/Low Temperature value is shown: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"HighLowTemperatureIOS")
												.getAttribute("value"));
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown as Off");
					}
				} else {
					if ((MobileUtils.getMobElement(fieldObjects, testCase,
							"HighLowTemperatureIOS").getAttribute("value")
							.equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(testCase,
								"High/Low Temperature value is shown as Off");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"HighLowTemperatureIOS")
												.getAttribute("value")
										+ " instead of Off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate High/Low Temperature value field");
			}
		}

		return flag;
	}

	public static boolean verifyHighLowHumidityDisplayed(TestCases testCase,
			boolean expectingValue) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowTemperatureOrHumidity", 5)) {
				if (expectingValue) {
					if (!(MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(1)
							.getText().equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(
								testCase,
								"High/Low Temperature value is shown: "
										+ MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"HighLowTemperatureOrHumidity")
												.get(1).getText());
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown as Off");
					}
				} else {
					if ((MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(1)
							.getText().equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(testCase,
								"High/Low Temperature value is shown as Off");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown: "
										+ MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"HighLowTemperatureOrHumidity")
												.get(1).getText()
										+ " instead of Off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate High/Low Temperature value field");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowHumidity", 5)) {
				if (expectingValue) {
					if (!(MobileUtils.getMobElement(fieldObjects, testCase,
							"HighLowHumidity").getAttribute("value")
							.equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(
								testCase,
								"High/Low Temperature value is shown: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"HighLowHumidity")
												.getAttribute("value"));
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown as Off");
					}
				} else {
					if ((MobileUtils.getMobElement(fieldObjects, testCase,
							"HighLowHumidity").getAttribute("value")
							.equalsIgnoreCase("Off"))) {
						Keyword.ReportStep_Pass(testCase,
								"High/Low Temperature value is shown as Off");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"High/Low Temperature value is shown: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"HighLowHumidity")
												.getAttribute("value")
										+ " instead of Off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate High/Low Temperature value field");
			}

		}

		return flag;
	}

	public static boolean navigateToFilterReminderScreen(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GlobalDrawer");

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"GlobalDrawerButton", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"GlobalDrawerButton")) {
				flag = false;
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"AlertsAndNotifications", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"AlertsAndNotifications")) {
						flag = false;
					} else {
						fieldObjects = MobileUtils.loadObjectFile(testCase,
								"AlertsAndNotifications");
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "FilterReminder", 10)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "FilterReminder")) {
								flag = false;
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate FilterReminder option");
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate FilterReminder option");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Global Drawer icon");
		}

		return flag;
	}

	public static boolean verifyFilterReminderValues(TestCases testCase,
			boolean expectingValue) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"FilterReminder", 5)) {
				if (expectingValue) {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"FilterReminderToggle").getText()
							.equalsIgnoreCase("On")) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Reminder is enabled");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Reminder is disabled");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ReplaceFilterEveryValue", 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Replace Filter Every: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"ReplaceFilterEveryValue")
												.getText() + " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"FilterLastReplacedValue", 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Filter Last Replaced: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"FilterLastReplacedValue")
												.getText() + " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"NextScheduledReminderValue", 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Next Scheduled Reminder: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"NextScheduledReminderValue")
												.getText() + " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is not shown");
					}
				} else {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"FilterReminderToggle").getText()
							.equalsIgnoreCase("Off")) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Reminder is disabled");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Reminder is enabled");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ReplaceFilterEveryValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Replace Filter Every value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"FilterLastReplacedValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Filter Last Replaced value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"NextScheduledReminderValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Next Scheduled Reminder value is not shown");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate FilterReminder");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"FilterReminderToggle", 10)) {
				if (expectingValue) {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"FilterReminderToggle")
							.getAttribute("value").equalsIgnoreCase("1")) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Reminder is enabled");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Reminder is disabled");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ReplaceFilterEveryValue", 10)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Replace Filter Every: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"ReplaceFilterEveryValue")
												.getAttribute("value")
										+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"FilterLastReplacedValue", 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Filter Last Replaced: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"FilterLastReplacedValue")
												.getAttribute("value")
										+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"NextScheduledReminderValue", 5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Next Scheduled Reminder: "
										+ MobileUtils.getMobElement(
												fieldObjects, testCase,
												"NextScheduledReminderValue")
												.getAttribute("value")
										+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is not shown");
					}
				} else {
					if (MobileUtils
							.getMobElement(fieldObjects, testCase,
									"FilterReminderToggle")
							.getAttribute("value").equalsIgnoreCase("0")) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Reminder is disabled");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Reminder is enabled");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ReplaceFilterEveryValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Replace Filter Every value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"FilterLastReplacedValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Filter Last Replaced value is not shown");
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"NextScheduledReminderValue", 5)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is shown");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Next Scheduled Reminder value is not shown");
					}
				}
				if (MobileUtils.isMobElementExists("name", "nav bar back",
						testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"nav bar back")) {
						flag = false;
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate FilterReminder Toggle");
			}
		}

		return flag;
	}

	public static boolean verifyTemperatureAndHumidityDisplayedForSelectedStatType(
			TestCases testCase, TestCaseInputs inputs,
			String temperatureOrHumidity) {
		boolean flag = true;
		List<WebElement> statNames;
		String temp;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"StatName", 5)) {
				statNames = MobileUtils.getMobElements(fieldObjects, testCase,
						"StatName");
				for (int i = 0; i < statNames.size(); i++) {
					temp = statNames.get(i).getText();
					try {
						statNames.get(i).click();
						Keyword.ReportStep_Pass(testCase, "Selected Stat: "
								+ temp);
						inputs.setInputValue("LOCATION1_DEVICE1_NAME", temp);
						ThermostatInformation statInfo = new ThermostatInformation(
								testCase, inputs);
						if (statInfo.getDeviceType().equalsIgnoreCase(
								"HoneyBadger")) {
							if (temperatureOrHumidity
									.equalsIgnoreCase("Temperature")) {
								if (MobileUtils.isMobElementExists("XPATH",
										"//*[@text='High/Low Temperature']",
										testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[HBB] High/Low Temperature is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[HBB] High/Low Temperature is not shown");
								}
							} else if (temperatureOrHumidity
									.equalsIgnoreCase("Humidity")) {
								if (MobileUtils.isMobElementExists("XPATH",
										"//*[@text='High/Low Humidity']",
										testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[HBB] High/Low Humidity is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[HBB] High/Low Humidity is not shown");
								}
							}
						} else if (statInfo.getDeviceType().equalsIgnoreCase(
								"Jasper")) {
							if (temperatureOrHumidity
									.equalsIgnoreCase("Temperature")) {
								if (MobileUtils.isMobElementExists("XPATH",
										"//*[@text='High/Low Temperature']",
										testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[Jasper] High/Low Temperature is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Jasper] High/Low Temperature is not shown");
								}
							} else if (temperatureOrHumidity
									.equalsIgnoreCase("Humidity")) {
								if (MobileUtils.isMobElementExists("XPATH",
										"//*[@text='High/Low Humidity']",
										testCase, 10)) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Jasper] High/Low Humidity is shown");
								} else {
									Keyword.ReportStep_Pass(testCase,
											"[Jasper] High/Low Humidity is not shown");
								}
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						}

					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to click on Stat name: " + temp);
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate list of stat names");
			}
		} else {
			if (MobileUtils.isMobElementExists("XPATH",
					"//UIAApplication//UIATableView//UIAStaticText", testCase,
					10)) {
				statNames = MobileUtils.getMobElements(testCase, "XPATH",
						"//UIAApplication//UIATableView//UIAStaticText");
				for (int i = 0; i < statNames.size(); i++) {
					temp = statNames.get(i).getAttribute("value");
					try {
						statNames.get(i).click();
						Keyword.ReportStep_Pass(testCase, "Selected Stat: "
								+ temp);
						inputs.setInputValue("LOCATION1_DEVICE1_NAME", temp);
						ThermostatInformation statInfo = new ThermostatInformation(
								testCase, inputs);
						if (statInfo.getDeviceType().equalsIgnoreCase(
								"HoneyBadger")) {
							if (temperatureOrHumidity
									.equalsIgnoreCase("Temperature")) {
								if (MobileUtils
										.isMobElementExists(
												"XPATH",
												"//UIAStaticText[@name='High/Low Temperature']",
												testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[HBB] High/Low Temperature is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[HBB] High/Low Temperature is not shown");
								}
							} else if (temperatureOrHumidity
									.equalsIgnoreCase("Humidity")) {
								if (MobileUtils
										.isMobElementExists(
												"XPATH",
												"//UIAStaticText[@name='High/Low Humidity']",
												testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[HBB] High/Low Humidity is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[HBB] High/Low Humidity is not shown");
								}
							}
						} else if (statInfo.getDeviceType().equalsIgnoreCase(
								"Jasper")) {
							if (temperatureOrHumidity
									.equalsIgnoreCase("Temperature")) {
								if (MobileUtils
										.isMobElementExists(
												"XPATH",
												"//UIAStaticText[@name='High/Low Temperature']",
												testCase, 10)) {
									Keyword.ReportStep_Pass(testCase,
											"[Jasper] High/Low Temperature is shown");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Jasper] High/Low Temperature is not shown");
								}
							} else if (temperatureOrHumidity
									.equalsIgnoreCase("Humidity")) {
								if (MobileUtils
										.isMobElementExists(
												"XPATH",
												"//UIAStaticText[@name='High/Low Humidity']",
												testCase, 10)) {
									flag = false;
									Keyword.ReportStep_Fail(testCase,
											FailType.FUNCTIONAL_FAILURE,
											"[Jasper] High/Low Humidity is shown");
								} else {
									Keyword.ReportStep_Pass(testCase,
											"[Jasper] High/Low Humidity is not shown");
								}
							}
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						}

					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to click on Stat name: " + temp);
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate list of stat names");
			}
		}

		return flag;
	}

	public static boolean verifyAllStatsDisplayedInComfortAlertsScreen(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		List<WebElement> statNames;
		int deviceCount = 0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		LocationInformation locInfo = new LocationInformation(testCase, inputs);
		deviceCount = locInfo.getDeviceCountOfLocation();

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"StatName", 5)) {
				statNames = MobileUtils.getMobElements(fieldObjects, testCase,
						"StatName");
				if (deviceCount == statNames.size()) {
					for (int i = 0; i < statNames.size(); i++) {
						Keyword.ReportStep_Pass(testCase, "Stat shown: "
								+ statNames.get(i).getText());
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Number of stats of location in app: "
									+ statNames.size()
									+ " is not matching with that in CHIL: "
									+ deviceCount);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate list of stat names");
			}
		} else {
			if (MobileUtils.isMobElementExists("XPATH",
					"//UIAApplication//UIATableView//UIAStaticText", testCase,
					10)) {
				statNames = MobileUtils.getMobElements(testCase, "XPATH",
						"//UIAApplication//UIATableView//UIAStaticText");
				if (deviceCount == statNames.size()) {
					for (int i = 0; i < statNames.size(); i++) {
						Keyword.ReportStep_Pass(testCase, "Stat shown: "
								+ statNames.get(i).getAttribute("value"));
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Number of stats of location in app: "
									+ statNames.size()
									+ " is not matching with that in CHIL: "
									+ deviceCount);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate list of stat names");
			}
		}

		return flag;
	}

	public static boolean setIndoorHumidityAlerts(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);

		if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowHumidityOption", 10)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"HighLowHumidityOption")) {
					flag = false;
				} else {
					Random r = new Random();
					do {
						do {
							belowValue = r.nextInt((90 - 5) + 1) + 5;
						} while (belowValue % 5 != 0);

						do {
							aboveValue = r.nextInt((95 - 10) + 1) + 10;
						} while (aboveValue % 5 != 0);

					} while (belowValue >= aboveValue);
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils
								.isMobElementExists(fieldObjects, testCase,
										"IndoorAboveBelowHumidityAndroid", 10)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowHumidityAndroid")
									.get(0).getText().split("%")[0]);
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowHumidityAndroid")
									.get(1).getText().split("%")[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Below value in app is shown: "
												+ belowValueApp
												+ " and Above value in app is shown: "
												+ aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase,
										"[BeforeChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowHumidityAndroid")
									.get(0).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(belowValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowHumidityAndroid")
									.get(1).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(aboveValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase,
									"IndoorAboveBelowHumidityAndroid", 5)) {
								belowValueApp = Integer
										.parseInt(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowHumidityAndroid")
												.get(0).getText().split("%")[0]);
								aboveValueApp = Integer
										.parseInt(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowHumidityAndroid")
												.get(1).getText().split("%")[0]);
								Keyword.ReportStep_Pass(testCase,
										"[AfterChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					} else {
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowHumidityiOS", 10)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowHumidityiOS").get(0)
									.getText().split("%")[0]);
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveHumidityiOS").get(0)
									.getText().split("%")[0]);
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value in app is shown: "
											+ belowValueApp
											+ " and Above value in app is shown: "
											+ aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase,
									"[BeforeChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						}
						try {
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorBelowHumidityiOS",
											String.valueOf(belowValue) + "%");
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorAboveHumidityiOS",
											String.valueOf(aboveValue) + "%");

						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Error message: " + e.getMessage());
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowHumidityiOS", 5)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowHumidityiOS").get(0)
									.getText().split("%")[0]);
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveHumidityiOS").get(0)
									.getText().split("%")[0]);
							Keyword.ReportStep_Pass(testCase,
									"[AfterChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					}
					if ((belowValueApp >= 5 && belowValueApp <= 90)
							&& (aboveValueApp <= 95 && aboveValueApp >= 10)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Below value is set within the range 5% and 90% AND Above value is set within the range 10% and 95%");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Below and Above values are not set within the range: Below(5%->90%) and Above(10%->95%)");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"High/Low Humidity option now shown");
			}
		} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			Keyword.ReportStep_Pass(testCase,
					"Humidity is not supported in Jasper type");
		}

		return flag;
	}

	public static boolean setIndoorTemperatureAlerts(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;

		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"HighLowTemperatureOption", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"HighLowTemperatureOption")) {
				flag = false;
			} else {
				Random r = new Random();
				if (statInfo.getThermostatUnits().equalsIgnoreCase(
						GlobalVariables.FAHRENHEIT)) {
					int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						belowValue = r.nextInt((98 - 39) + 1) + 39;
						aboveValue = r.nextInt((99 - 40) + 1) + 40;
					} while (belowValue >= aboveValue);

					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorAboveBelowTemperatureAndroid",
								10)) {
							belowValueApp = Integer
									.parseInt(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveBelowTemperatureAndroid")
											.get(0).getText()
											.split(String.valueOf(degree))[0]);
							aboveValueApp = Integer
									.parseInt(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveBelowTemperatureAndroid")
											.get(1).getText()
											.split(String.valueOf(degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Below value in app is shown: "
												+ belowValueApp
												+ " and Above value in app is shown: "
												+ aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase,
										"[BeforeChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowTemperatureAndroid")
									.get(0).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(belowValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowTemperatureAndroid")
									.get(1).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(aboveValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase,
									"IndoorAboveBelowTemperatureAndroid", 5)) {
								belowValueApp = Integer
										.parseInt(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowTemperatureAndroid")
												.get(0).getText()
												.split(String.valueOf(degree))[0]);
								aboveValueApp = Integer
										.parseInt(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowTemperatureAndroid")
												.get(1).getText()
												.split(String.valueOf(degree))[0]);
								Keyword.ReportStep_Pass(testCase,
										"[AfterChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					} else {

						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowTemperatureiOS", 10)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value in app is shown: "
											+ belowValueApp
											+ " and Above value in app is shown: "
											+ aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase,
									"[BeforeChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						}
						try {
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorBelowTemperatureiOS",
											String.valueOf(belowValue)
													+ "\u00B0");
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorAboveTemperatureiOS",
											String.valueOf(aboveValue)
													+ "\u00B0");

						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Error message: " + e.getMessage());
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowTemperatureiOS", 5)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							Keyword.ReportStep_Pass(testCase,
									"[AfterChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					}
					if ((belowValueApp >= 39 && belowValueApp <= 98)
							&& (aboveValueApp <= 99 && aboveValueApp >= 40)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Below value is set within the range 39 and 98 AND Above value is set within the range 40 and 99");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Below and Above values are not set within the range: Below(39->98) and Above(40->99)");
					}
				} else {
					double belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						belowValue = (r.nextInt((365 - 40) + 1) + 40) / 10.0;
						belowValue = Math.round(belowValue * 2) / 2.0;
						aboveValue = (r.nextInt((370 - 45) + 1) + 45) / 10.0;
						aboveValue = Math.round(aboveValue * 2) / 2.0;
					} while (belowValue >= aboveValue);
					if (testCase.getPlatform().toUpperCase()
							.contains("ANDROID")) {
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorAboveBelowTemperatureAndroid",
								10)) {
							belowValueApp = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveBelowTemperatureAndroid")
											.get(0).getText()
											.split(String.valueOf(degree))[0]);
							aboveValueApp = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveBelowTemperatureAndroid")
											.get(1).getText()
											.split(String.valueOf(degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Below value in app is shown: "
												+ belowValueApp
												+ " and Above value in app is shown: "
												+ aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase,
										"[BeforeChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowTemperatureAndroid")
									.get(0).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(belowValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveBelowTemperatureAndroid")
									.get(1).click();
							try {
								element = testCase.getMobileDriver().scrollTo(
										String.valueOf(aboveValue));
								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}

							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase,
									"IndoorAboveBelowTemperatureAndroid", 5)) {
								belowValueApp = Double
										.parseDouble(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowTemperatureAndroid")
												.get(0).getText()
												.split(String.valueOf(degree))[0]);
								aboveValueApp = Double
										.parseDouble(MobileUtils
												.getMobElements(fieldObjects,
														testCase,
														"IndoorAboveBelowTemperatureAndroid")
												.get(1).getText()
												.split(String.valueOf(degree))[0]);
								Keyword.ReportStep_Pass(testCase,
										"[AfterChange] Below value is shown: "
												+ belowValueApp
												+ " and Above value is shown: "
												+ aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					} else {

						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowTemperatureiOS", 10)) {
							belowValueApp = Double.parseDouble(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueApp = Double.parseDouble(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value in app is shown: "
											+ belowValueApp
											+ " and Above value in app is shown: "
											+ aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase,
									"[BeforeChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						}
						try {
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorBelowTemperatureiOS",
											String.valueOf(belowValue)
													+ "\u00B0");
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"IndoorAboveTemperatureiOS",
											String.valueOf(aboveValue)
													+ "\u00B0");

						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Error message: " + e.getMessage());
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "IndoorBelowTemperatureiOS", 5)) {
							belowValueApp = Double.parseDouble(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueApp = Double.parseDouble(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							Keyword.ReportStep_Pass(testCase,
									"[AfterChange] Below value is shown: "
											+ belowValueApp
											+ " and Above value is shown: "
											+ aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below and Above values are not shown");
						}
					}
					if ((belowValueApp >= 4.0 && belowValueApp <= 36.5)
							&& (aboveValueApp <= 37.0 && aboveValueApp >= 4.5)) {
						Keyword.ReportStep_Pass(
								testCase,
								"Below value is set within the range 4.0 and 36.5 AND Above value is set within the range 4.5 and 37.0");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Below and Above values are not set within the range: Below(4.0->36.5) and Above(4.5->37.0)");
					}
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"High/Low Temperature option now shown");
		}

		return flag;
	}

	public static boolean verifyTemperatureOrHumidityFieldIncrementsForAlerts(
			TestCases testCase, TestCaseInputs inputs,
			String temperatureOrhumidity) {
		boolean flag = true;
		int belowValueApp = 0, aboveValueApp = 0, belowValueAppAdd = 0, aboveValueAppAdd = 0;
		Double belowValueAppCelsius = 0.0, aboveValueAppCelsius = 0.0, belowValueAppCelsiusAdd = 0.0, aboveValueAppCelsiusAdd = 0.0;
		String highOrlowTemperatureValue = "", highOrlowHumidityValue = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowTemperatureOrHumidity", 10)) {
				if (temperatureOrhumidity
						.equalsIgnoreCase("Indoor Temperature")) {
					highOrlowTemperatureValue = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(0)
							.getText();
				} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
					if (statInfo.getDeviceType()
							.equalsIgnoreCase("HoneyBadger")) {
						highOrlowHumidityValue = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HighLowTemperatureOrHumidity").get(1)
								.getText();
					} else if (statInfo.getDeviceType().equalsIgnoreCase(
							"Jasper")) {
						Keyword.ReportStep_Pass(testCase,
								"Humidity is not supported in Jasper");
						return flag;
					}
				}

				if (temperatureOrhumidity
						.equalsIgnoreCase("Indoor Temperature")) {
					if (statInfo.getThermostatUnits().equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (highOrlowTemperatureValue.contains("F")) {
							Keyword.ReportStep_Pass(testCase,
									"High/Low temperature value: "
											+ highOrlowTemperatureValue
											+ " is in intervals of 1F");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"High/Low temperature value: "
											+ highOrlowTemperatureValue
											+ " is not in intervals of 1F");
						}
					} else if (statInfo.getThermostatUnits().equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (highOrlowTemperatureValue.contains("C")) {
							Keyword.ReportStep_Pass(testCase,
									"High/Low temperature value: "
											+ highOrlowTemperatureValue
											+ " is in intervals of 0.5C");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"High/Low temperature value: "
											+ highOrlowTemperatureValue
											+ " is not in intervals of 0.5C");
						}
					}
				} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
					if (statInfo.getDeviceType()
							.equalsIgnoreCase("HoneyBadger")) {
						String tempBelow = "", tempAbove = "";
						tempBelow = highOrlowHumidityValue.split("/")[0];
						tempBelow = tempBelow.replaceAll("\\s+", "");
						tempAbove = highOrlowHumidityValue.split("/")[1];
						tempAbove = tempAbove.replaceAll("\\s+", "");

						if (Integer.parseInt(tempBelow.split("%")[0]) % 5 == 0) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below humidity value: "
											+ highOrlowHumidityValue.split("/")[0]
											+ " is in intervals of 5%");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below humidity value: "
											+ highOrlowHumidityValue.split("/")[0]
											+ " is not in intervals of 5%");
						}
						if (Integer.parseInt(tempAbove.split("%")[0]) % 5 == 0) {
							Keyword.ReportStep_Pass(
									testCase,
									"Above humidity value: "
											+ highOrlowHumidityValue.split("/")[1]
											+ " is in intervals of 5%");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Above humidity value: "
											+ highOrlowHumidityValue.split("/")[1]
											+ " is not in intervals of 5%");
						}
					} else if (statInfo.getDeviceType().equalsIgnoreCase(
							"Jasper")) {
						Keyword.ReportStep_Pass(testCase,
								"Humidity is not supported in Jasper");
						return flag;
					}
				}
			}
		} else {
			if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HighLowTemperatureOption", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"HighLowTemperatureOption")) {
						flag = false;
					}
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"IndoorBelowTemperatureiOS", 10)) {
						if (statInfo.getThermostatUnits().equalsIgnoreCase(
								GlobalVariables.FAHRENHEIT)) {
							belowValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueApp = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							if (belowValueApp == 39) {
								belowValueAppAdd = belowValueApp + 1;
							} else {
								belowValueAppAdd = belowValueApp - 1;
							}
							if (aboveValueApp == 40) {
								aboveValueAppAdd = aboveValueApp + 1;
							} else {
								aboveValueAppAdd = aboveValueApp - 1;
							}
							try {
								flag = flag
										& MobileUtils
												.setValueInPicker(
														testCase,
														fieldObjects,
														"IndoorBelowTemperatureiOS",
														String.valueOf(belowValueAppAdd)
																+ "\u00B0");
								flag = flag
										& MobileUtils
												.setValueInPicker(
														testCase,
														fieldObjects,
														"IndoorAboveTemperatureiOS",
														String.valueOf(aboveValueAppAdd)
																+ "\u00B0");

							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}
							belowValueAppAdd = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorBelowTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							aboveValueAppAdd = Integer.parseInt(MobileUtils
									.getMobElements(fieldObjects, testCase,
											"IndoorAboveTemperatureiOS").get(0)
									.getText().split(",")[0].replaceAll(
									"\u00B0", ""));
							if (((belowValueApp - belowValueAppAdd) == 1 || (belowValueAppAdd - belowValueApp) == 1)
									&& ((aboveValueApp - aboveValueAppAdd) == 1 || (aboveValueAppAdd - aboveValueApp) == 1)) {
								Keyword.ReportStep_Pass(testCase,
										"Below & Above value are displayed as increment by 1F");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Below & Above value are not displayed as increment by 1F");
							}

						} else if (statInfo.getThermostatUnits()
								.equalsIgnoreCase(GlobalVariables.CELSIUS)) {
							belowValueAppCelsius = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorBelowTemperatureiOS")
											.get(0).getText().split(",")[0]
											.replaceAll("\u00B0", ""));
							aboveValueAppCelsius = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveTemperatureiOS")
											.get(0).getText().split(",")[0]
											.replaceAll("\u00B0", ""));
							if (belowValueAppCelsius == 4.0) {
								belowValueAppCelsiusAdd = belowValueAppCelsius + 0.5;
							} else {
								belowValueAppCelsiusAdd = belowValueAppCelsius - 0.5;
							}
							if (aboveValueAppCelsius == 4.5) {
								aboveValueAppCelsiusAdd = aboveValueAppCelsius + 0.5;
							} else {
								aboveValueAppCelsiusAdd = aboveValueAppCelsius - 0.5;
							}
							try {
								flag = flag
										& MobileUtils
												.setValueInPicker(
														testCase,
														fieldObjects,
														"IndoorBelowTemperatureiOS",
														String.valueOf(belowValueAppCelsiusAdd)
																+ "\u00B0");
								flag = flag
										& MobileUtils
												.setValueInPicker(
														testCase,
														fieldObjects,
														"IndoorAboveTemperatureiOS",
														String.valueOf(aboveValueAppCelsiusAdd)
																+ "\u00B0");

							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Error message: " + e.getMessage());
							}
							belowValueAppCelsiusAdd = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorBelowTemperatureiOS")
											.get(0).getText().split(",")[0]
											.replaceAll("\u00B0", ""));
							aboveValueAppCelsiusAdd = Double
									.parseDouble(MobileUtils
											.getMobElements(fieldObjects,
													testCase,
													"IndoorAboveTemperatureiOS")
											.get(0).getText().split(",")[0]
											.replaceAll("\u00B0", ""));
							if (((belowValueAppCelsius - belowValueAppCelsiusAdd) == 0.5 || (belowValueAppCelsiusAdd - belowValueAppCelsius) == 0.5)
									&& ((aboveValueAppCelsius - aboveValueAppCelsiusAdd) == 0.5 || (aboveValueAppCelsiusAdd - aboveValueAppCelsius) == 0.5)) {
								Keyword.ReportStep_Pass(testCase,
										"Below & Above value are displayed as increment by 0.5C");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Below & Above value are not displayed as increment by 0.5C");
							}
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"HighLowTemperatureOption not present");
				}
			} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
				if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")) {
					highOrlowHumidityValue = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowHumidity").get(0).getText();
					String tempBelow = "", tempAbove = "";
					tempBelow = highOrlowHumidityValue.split("/")[0];
					tempBelow = tempBelow.replaceAll("\\s+", "");
					tempAbove = highOrlowHumidityValue.split("/")[1];
					tempAbove = tempAbove.replaceAll("\\s+", "");

					if (Integer.parseInt(tempBelow.split("%")[0]) % 5 == 0) {
						Keyword.ReportStep_Pass(testCase,
								"Below humidity value: "
										+ highOrlowHumidityValue.split("/")[0]
										+ " is in intervals of 5%");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Below humidity value: "
										+ highOrlowHumidityValue.split("/")[0]
										+ " is not in intervals of 5%");
					}
					if (Integer.parseInt(tempAbove.split("%")[0]) % 5 == 0) {
						Keyword.ReportStep_Pass(testCase,
								"Above humidity value: "
										+ highOrlowHumidityValue.split("/")[1]
										+ " is in intervals of 5%");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Above humidity value: "
										+ highOrlowHumidityValue.split("/")[1]
										+ " is not in intervals of 5%");
					}
				} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
					Keyword.ReportStep_Pass(testCase,
							"Humidity is not supported in Jasper");
					return flag;
				}
			}
		}
		return flag;
	}

	public static boolean validateBelowAboveValuesLogicForTemperatureOrHumidity(
			TestCases testCase, TestCaseInputs inputs,
			String temperatureOrhumidity) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");
		String highOrlowValue = "", belowValue = "", aboveValue = "";

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"HighLowTemperatureOrHumidity", 10)) {
				if (temperatureOrhumidity
						.equalsIgnoreCase("Indoor Temperature")) {
					highOrlowValue = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperatureOrHumidity").get(0)
							.getText();
					belowValue = highOrlowValue.split("/")[0];
					belowValue = belowValue.replaceAll("\\s+", "");
					aboveValue = highOrlowValue.split("/")[1];
					aboveValue = aboveValue.replaceAll("\\s+", "");
					if (statInfo.getThermostatUnits().equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (Integer.parseInt(belowValue.split(String
								.valueOf(degree))[0]) < Integer
								.parseInt(aboveValue.split(String
										.valueOf(degree))[0])) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						}
					} else {
						if (Double.parseDouble(belowValue.split(String
								.valueOf(degree))[0]) < Double
								.parseDouble(aboveValue.split(String
										.valueOf(degree))[0])) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						}
					}
				} else if (temperatureOrhumidity
						.equalsIgnoreCase("Indoor Humidity")) {
					if (statInfo.getDeviceType()
							.equalsIgnoreCase("HoneyBadger")) {
						highOrlowValue = MobileUtils
								.getMobElements(fieldObjects, testCase,
										"HighLowTemperatureOrHumidity").get(1)
								.getText();
						belowValue = highOrlowValue.split("/")[0];
						belowValue = belowValue.replaceAll("\\s+", "");
						aboveValue = highOrlowValue.split("/")[1];
						aboveValue = aboveValue.replaceAll("\\s+", "");

						if (Integer.parseInt(belowValue.split("%")[0]) < Integer
								.parseInt(aboveValue.split("%")[0])) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of humidity: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of humidity: "
											+ highOrlowValue.split("/")[1]);
						}
					} else if (statInfo.getDeviceType().equalsIgnoreCase(
							"Jasper")) {
						Keyword.ReportStep_Pass(testCase,
								"Humidity is not supported in Jasper type");
						return flag;
					}
				}
			}

		} else {
			if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"HighLowTemperature", 10)) {
					highOrlowValue = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowTemperature").get(0).getText();
					belowValue = highOrlowValue.split("/")[0];
					belowValue = belowValue.replaceAll("\\s+", "");
					aboveValue = highOrlowValue.split("/")[1];
					aboveValue = aboveValue.replaceAll("\\s+", "");
					if (statInfo.getThermostatUnits().equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (Integer.parseInt(belowValue.split(String
								.valueOf(degree))[0]) < Integer
								.parseInt(aboveValue.split(String
										.valueOf(degree))[0])) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						}
					} else {
						if (Double.parseDouble(belowValue.split(String
								.valueOf(degree))[0]) < Double
								.parseDouble(aboveValue.split(String
										.valueOf(degree))[0])) {
							Keyword.ReportStep_Pass(
									testCase,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: "
											+ highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of indoor temperature: "
											+ highOrlowValue.split("/")[1]);
						}

					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"HighLow Temperature is not displayed");
				}
			} else if (temperatureOrhumidity
					.equalsIgnoreCase("Indoor Humidity")) {
				if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")) {
					highOrlowValue = MobileUtils
							.getMobElements(fieldObjects, testCase,
									"HighLowHumidity").get(0).getText();
					belowValue = highOrlowValue.split("/")[0];
					belowValue = belowValue.replaceAll("\\s+", "");
					aboveValue = highOrlowValue.split("/")[1];
					aboveValue = aboveValue.replaceAll("\\s+", "");

					if (Integer.parseInt(belowValue.split("%")[0]) < Integer
							.parseInt(aboveValue.split("%")[0])) {
						Keyword.ReportStep_Pass(
								testCase,
								"Below value of indoor temperature: "
										+ highOrlowValue.split("/")[0]
										+ " is set to less than the Above value of humidity: "
										+ highOrlowValue.split("/")[1]);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Below value of indoor temperature: "
										+ highOrlowValue.split("/")[0]
										+ " is not set to less than the Above value of humidity: "
										+ highOrlowValue.split("/")[1]);
					}
				} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
					Keyword.ReportStep_Pass(testCase,
							"Humidity is not supported in Jasper type");
					return flag;
				}
			}

		}

		return flag;
	}

	public static boolean setReplaceFilterEveryValue(TestCases testCase,
			TestCaseInputs inputs, String value) {
		boolean flag = true;
		WebElement element = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		inputs.setInputValue(REPLACE_FILTER_EVERY_VALUE, value);
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				Keyword.ReportStep_Pass(testCase,
						"Filter Reminder is not supported in EMEA stat type");
				return flag;
			}
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@text='Replace Filter Every:']", testCase, 10)) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"ReplaceFilterEveryValue").getText()
						.equalsIgnoreCase(value)) {
					Keyword.ReportStep_Pass(testCase,
							"Replace Filter Every value set to: " + value);
				} else {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ReplaceFilterEveryValue")) {
						flag = false;
					} else {
						element = testCase.getMobileDriver().scrollToExact(
								value);
						if (element != null) {
							element.click();
						}
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[BeforeSettingReplaceFilterEvery] Failed to locate Replace Filter Every field");
			}
			if (MobileUtils.isMobElementExists("XPATH",
					"//*[@text='Replace Filter Every:']", testCase, 10)) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"ReplaceFilterEveryValue").getText()
						.equalsIgnoreCase(value)) {
					Keyword.ReportStep_Pass(testCase,
							"Replace Filter Every value set to: " + value);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Replace Filter Every value in app: "
									+ MobileUtils
											.getMobElement(fieldObjects,
													testCase,
													"ReplaceFilterEveryValue")
											.getText()
									+ " is not set to the expected value: "
									+ value);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[AfterSettingReplaceFilterEvery] Failed to locate Replace Filter Every field");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ReplaceFilterEveryValue")) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"ReplaceFilterEveryValue")
						.getAttribute("value").equalsIgnoreCase(value)) {
					Keyword.ReportStep_Pass(testCase,
							"Replace Filter Every value set to: " + value);
				} else {
					if (MobileUtils.clickOnElement(fieldObjects, testCase,
							"ReplaceFilterEveryValue")) {
						try {
							flag = flag
									& MobileUtils.setValueInPicker(testCase,
											fieldObjects,
											"ReplaceFilterEveryPicker",
											value.toLowerCase());
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "ReplaceFilterEveryValue")) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Unable to Close ReplaceFilterEveryValue Picker");
							}
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "ReplaceFilterEveryValue")) {
								if (MobileUtils
										.getMobElement(fieldObjects, testCase,
												"ReplaceFilterEveryValue")
										.getAttribute("value")
										.equalsIgnoreCase(value)) {
									Keyword.ReportStep_Pass(testCase,
											"Replace Filter Every value set to: "
													+ value);
								} else {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Replace Filter Every value in app: "
													+ MobileUtils
															.getMobElement(
																	fieldObjects,
																	testCase,
																	"ReplaceFilterEveryValue")
															.getText()
													+ " is not set to the expected value: "
													+ value);
								}
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"[AfterSettingReplaceFilterEvery] Failed to locate Replace Filter Every field");
							}

						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Unable to set Value in the Picker");
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Unable to Click on the Replace Filter");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[BeforeSettingReplaceFilterEvery] Failed to locate Replace Filter Every field");
			}

		}

		return flag;
	}

	public static boolean setFilterLastReplacedDate(TestCases testCase,
			TestCaseInputs inputs, Date dateStringToSet) {
		boolean flag = true;
		String FilterReminderDate = "", MonthToSet = "", DatetoSet = "", YeartoSet = "";

		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				Keyword.ReportStep_Pass(testCase,
						"Filter Reminder is not supported in EMEA stat type");
				return flag;
			}
		}
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {

			// To Be Implemented

		} else {
			SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM dd yyyy");
			FilterReminderDate = dateFormat.format(dateStringToSet);
			MonthToSet = FilterReminderDate.split("\\s+")[0];
			DatetoSet = FilterReminderDate.split("\\s+")[1].replaceFirst("^0",
					"");
			;
			YeartoSet = FilterReminderDate.split("\\s+")[2];
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"FilterLastReplacedValue")) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"FilterLastReplacedValue")) {
					flag = false;
				}
				try {
					flag = flag
							& MobileUtils.setValueInPicker(testCase,
									fieldObjects, "DatePickerYear", YeartoSet);
					flag = flag
							& MobileUtils
									.setValueInPicker(testCase, fieldObjects,
											"DatePickerMonth", MonthToSet);
					flag = flag
							& MobileUtils.setValueInPicker(testCase,
									fieldObjects, "DatePickerDate", DatetoSet);
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"FilterLastReplacedValue")) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Unable to Close FilterLastReplaced Picker");
					}
					Keyword.ReportStep_Pass(testCase,
							"FilterLastReplaced date is set successfully");

				} catch (Exception e) {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Unable to set Value in the Picker");
				}

			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Filter Last Replaced value");
			}

		}

		return flag;
	}

	public static boolean setFilterLastReplacedDate(TestCases testCase,
			TestCaseInputs inputs, String dateStringToSet) {
		boolean flag = true;
		int i = 0, j = 0, displayedMonthIndex = 0, monthToSetIndex = 0;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");
		String[] months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",
				"Aug", "Sep", "Oct", "Nov", "Dec" };

		String monthToSet = dateStringToSet.split("\\s+")[0];
		monthToSet = months[Integer.parseInt(monthToSet) - 1];
		String dateToSet = dateStringToSet.split("\\s+")[1];
		String yearToSet = dateStringToSet.split("\\s+")[2];

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				Keyword.ReportStep_Pass(testCase,
						"Filter Reminder is not supported in EMEA stat type");
				return flag;
			}
		}
		Keyword.ReportStep_Pass(testCase, "Setting Filter Last Replaced to: "
				+ dateStringToSet);
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"FilterLastReplacedValue", 10)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"FilterLastReplacedValue")) {
				flag = false;
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"DatePickerYear", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"DatePickerYear")) {
						flag = false;
					} else {
						WebElement element = testCase.getMobileDriver()
								.scrollToExact(yearToSet);
						if (element != null) {
							element.click();
						}
						WebElement elem = MobileUtils.getMobElement(testCase,
								"XPATH", "//android.view.View[@index='0']");
						if (elem != null) {
							elem.click();
						}

						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "DatePickerDate", 5)) {
							String displayedMonth = MobileUtils
									.getMobElement(fieldObjects, testCase,
											"DatePickerDate").getText()
									.split("\\s+")[1];
							while (!months[i].equalsIgnoreCase(displayedMonth)) {
								i++;
							}
							displayedMonthIndex = i;
							while (!months[j].equalsIgnoreCase(monthToSet)) {
								j++;
							}
							monthToSetIndex = j;
							if (displayedMonthIndex > monthToSetIndex) {
								for (int index = 0; index < displayedMonthIndex
										- monthToSetIndex; index++) {
									if (!MobileUtils.clickOnElement(
											fieldObjects, testCase,
											"CalendarPreviousButton")) {
										flag = false;
									}
								}
							} else if (displayedMonthIndex < monthToSetIndex) {
								for (int index = 0; index < monthToSetIndex
										- displayedMonthIndex; index++) {
									if (!MobileUtils.clickOnElement(
											fieldObjects, testCase,
											"CalendarNextButton")) {
										flag = false;
									}
								}
							}
							elem = MobileUtils.getMobElement(
									testCase,
									"XPATH",
									"//android.view.View[@index='"
											+ (Integer.valueOf(dateToSet) - 1)
											+ "']");
							if (elem != null) {
								elem.click();
							} else {
								flag = false;
								Keyword.ReportStep_Fail(
										testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Date: "
												+ (Integer.valueOf(dateToSet) - 1)
												+ " is not there in the month selected");
							}

							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "CalendarOkButton", 5)) {
								if (!MobileUtils.clickOnElement(fieldObjects,
										testCase, "CalendarOkButton")) {
									flag = false;
								}
							}
						}
					}
				}
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"FilterLastReplacedValue", 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Filter Last Replaced value set to: "
									+ MobileUtils
											.getMobElement(fieldObjects,
													testCase,
													"FilterLastReplacedValue")
											.getText());
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Filter Last Replaced value");
				}
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"NextScheduledReminderValue", 5)) {
					Keyword.ReportStep_Pass(
							testCase,
							"Next Scheduled Reminder value set to: "
									+ MobileUtils.getMobElement(fieldObjects,
											testCase,
											"NextScheduledReminderValue")
											.getText());
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Next Scheduled Reminder value");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Not in Filter Reminder settings screen");
		}
		return flag;
	}

	public static boolean verifySelectedFieldIsNotEditable(TestCases testCase,
			TestCaseInputs inputs, String fieldName) {
		boolean flag = true;

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				Keyword.ReportStep_Pass(testCase,
						"Filter Reminder is not supported in EMEA stat type");
				return flag;
			}
		}
		if (fieldName.equalsIgnoreCase("Next Scheduled Reminder")) {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "AlertsAndNotifications");
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"NextScheduledReminderValue", 5)) {
				if (MobileUtils
						.getMobElement(fieldObjects, testCase,
								"NextScheduledReminderValue")
						.getAttribute("clickable").equalsIgnoreCase("false")) {
					Keyword.ReportStep_Pass(testCase,
							"Next Scheduled Reminder field is not editable");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Next Scheduled Reminder field can be edited");
				}
			}
		}

		return flag;
	}

	public static boolean validateFilterNextScheduledReminderDate(
			TestCases testCase, String dateToValidate) {
		boolean flag = true;
		String replaceFilterEveryValue = "", filterLastReplacedDate = "", nextScheduledReminderDate = "", currentDate = "";

		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "AlertsAndNotifications");

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			int displayedLastReplacedMonth, displayedLastReplacedDate, displayedLastReplacedYear, displayedNextScheduledReminderMonth, displayedNextScheduledReminderDate, displayedNextScheduledReminderYear;
			String[] months = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
					"Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ReplaceFilterEveryValue", 10)) {

				replaceFilterEveryValue = MobileUtils.getMobElement(
						fieldObjects, testCase, "ReplaceFilterEveryValue")
						.getText();
				filterLastReplacedDate = MobileUtils.getMobElement(
						fieldObjects, testCase, "FilterLastReplacedValue")
						.getText();
				nextScheduledReminderDate = MobileUtils.getMobElement(
						fieldObjects, testCase, "NextScheduledReminderValue")
						.getText();

				if (!dateToValidate.equalsIgnoreCase("Current date")) {
					try {
						SimpleDateFormat dateFormat = new SimpleDateFormat(
								"MMMM dd yyyy");
						Date d1 = dateFormat.parse(filterLastReplacedDate);
						Calendar c1 = Calendar.getInstance();
						c1.setTime(d1);
						c1.add(Calendar.MONTH,
								Integer.parseInt(replaceFilterEveryValue
										.split("\\s+")[0]));
						displayedLastReplacedMonth = c1.get(Calendar.MONTH);
						displayedLastReplacedDate = c1.get(Calendar.DATE);
						displayedLastReplacedYear = c1.get(Calendar.YEAR);

						d1 = dateFormat.parse(nextScheduledReminderDate);
						c1 = Calendar.getInstance();
						c1.setTime(d1);
						displayedNextScheduledReminderMonth = c1
								.get(Calendar.MONTH);
						displayedNextScheduledReminderDate = c1
								.get(Calendar.DATE);
						displayedNextScheduledReminderYear = c1
								.get(Calendar.YEAR);

						if (displayedLastReplacedMonth == displayedNextScheduledReminderMonth
								&& displayedLastReplacedDate == displayedNextScheduledReminderDate
								&& displayedLastReplacedYear == displayedNextScheduledReminderYear) {
							Keyword.ReportStep_Pass(testCase,
									"Next Scheduled Reminder date: "
											+ nextScheduledReminderDate
											+ " is set accordingly to "
											+ replaceFilterEveryValue
											+ " after Last Replaced date: "
											+ filterLastReplacedDate);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Next Scheduled Reminder date: "
											+ nextScheduledReminderDate
											+ " is not set accordingly to "
											+ replaceFilterEveryValue
											+ " after Last Replaced date: "
											+ filterLastReplacedDate);
						}

					} catch (ParseException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[ParseException] Error message: "
										+ e.getMessage());
					} catch (NumberFormatException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[NumberFormatException] Error message: "
										+ e.getMessage());
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[Exception] Error message: " + e.getMessage());
					}
				} else {
					currentDate = getCurrentISTTime(testCase);
					currentDate = currentDate.split("T")[0];
					if (nextScheduledReminderDate.split("\\s+")[2]
							.equalsIgnoreCase(currentDate.split("-")[0])
							&& nextScheduledReminderDate.split("\\s+")[1]
									.equalsIgnoreCase(currentDate.split("-")[2])
							&& nextScheduledReminderDate.split("\\s+")[0]
									.equalsIgnoreCase(months[Integer
											.parseInt(currentDate.split("-")[1]) - 1])) {
						Keyword.ReportStep_Pass(testCase,
								"Current date is shown in Next Scheduled Reminder field: "
										+ currentDate);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Current date: "
										+ currentDate
										+ " is shown in Next Scheduled Reminder field: "
										+ nextScheduledReminderDate);
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Replace Filter Every value");
			}
		} else {
			String ExpectedLastReplacedDate = "", displayedNextScheduledReminderDate = "";
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ReplaceFilterEveryValue", 10)) {

				replaceFilterEveryValue = MobileUtils.getMobElement(
						fieldObjects, testCase, "ReplaceFilterEveryValue")
						.getAttribute("value");
				filterLastReplacedDate = MobileUtils.getMobElement(
						fieldObjects, testCase, "FilterLastReplacedValue")
						.getAttribute("value");
				nextScheduledReminderDate = MobileUtils.getMobElement(
						fieldObjects, testCase, "NextScheduledReminderValue")
						.getAttribute("value");

				if (!dateToValidate.equalsIgnoreCase("Current date")) {
					try {
						SimpleDateFormat dateFormat = new SimpleDateFormat(
								"MMM dd,yyyy");
						Date d1 = dateFormat.parse(filterLastReplacedDate);
						Calendar c1 = Calendar.getInstance();
						c1.setTime(d1);
						c1.add(Calendar.MONTH,
								Integer.parseInt(replaceFilterEveryValue
										.split("\\s+")[0]));
						d1 = c1.getTime();
						ExpectedLastReplacedDate = dateFormat.format(d1);
						d1 = dateFormat.parse(nextScheduledReminderDate);
						displayedNextScheduledReminderDate = dateFormat
								.format(d1);

						if (ExpectedLastReplacedDate
								.equalsIgnoreCase(displayedNextScheduledReminderDate)) {
							Keyword.ReportStep_Pass(testCase,
									"Next Scheduled Reminder date: "
											+ nextScheduledReminderDate
											+ " is set accordingly to "
											+ replaceFilterEveryValue
											+ " after Last Replaced date: "
											+ filterLastReplacedDate);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Next Scheduled Reminder date: "
											+ nextScheduledReminderDate
											+ " is not set accordingly to "
											+ replaceFilterEveryValue
											+ " after Last Replaced date: "
											+ filterLastReplacedDate);
						}

					} catch (ParseException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[ParseException] Error message: "
										+ e.getMessage());
					} catch (NumberFormatException e) {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[NumberFormatException] Error message: "
										+ e.getMessage());
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[Exception] Error message: " + e.getMessage());
					}
				} else {
					SimpleDateFormat dateFormat = new SimpleDateFormat(
							"yyyy-MM-dd");
					currentDate = getCurrentISTTime(testCase);
					try {
						Date d1 = dateFormat.parse(currentDate.split("T")[0]);
						dateFormat = new SimpleDateFormat("MMM dd,yyyy");
						String Expecteddate = dateFormat.format(d1);
						if (nextScheduledReminderDate
								.equalsIgnoreCase(Expecteddate)) {
							Keyword.ReportStep_Pass(testCase,
									"Current date is shown in Next Scheduled Reminder field: "
											+ currentDate);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Current date: "
											+ currentDate
											+ " is shown in Next Scheduled Reminder field: "
											+ nextScheduledReminderDate);
						}

					} catch (ParseException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[Exception] Error message: " + e.getMessage());
					}

				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Replace Filter Every value");
			}
		}

		return flag;
	}

	public static boolean navigateWeatherForecastScreen(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "PrimaryCard");

		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"WeatherButton", 5)) {
			if (MobileUtils.clickOnElement(fieldObjects, testCase,
					"WeatherButton")) {
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click Weather forecast icon");
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Weather forecast icon");
		}

		return flag;
	}

	public static boolean validateAlertsInPrimaryCard(TestCases testCase,
			TestCaseInputs inputs, String alertType) {
		boolean flag = true, alertFlag = false;
		String expectedAlertText = "";
		List<WebElement> alertIcons = null, alertTitles = null, alertSubTitles = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");

		if (!MobileUtils.isMobElementExists(fieldObjects, testCase,
				"NotificationsIcon", 10)) {
			flag = flag & JasperUtils.navigateToPrimaryCard(testCase);
		} else {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"NotificationsIcon")) {
				flag = false;
			} else {
				fieldObjects = MobileUtils.loadObjectFile(testCase,
						"AlertsAndNotifications");
				if (alertType.equalsIgnoreCase("Indoor Temperature")) {
					String isIndoorTempLowerThanOriginal = inputs
							.getInputValue(JasperUtils.IS_INDOORTEMP_LOWER_THAN_ORIGINAL);
					if (isIndoorTempLowerThanOriginal.equalsIgnoreCase("true")) {
						expectedAlertText = "It's below "
								+ inputs.getInputValue(JasperUtils.INDOORTEMP_BELOW_VALUE)
								+ JasperUtils.degree;
					} else if (isIndoorTempLowerThanOriginal
							.equalsIgnoreCase("false")) {
						expectedAlertText = "It's above "
								+ inputs.getInputValue(JasperUtils.INDOORTEMP_ABOVE_VALUE)
								+ JasperUtils.degree;
					}

				} else if (alertType.equalsIgnoreCase("Indoor Humidity")) {
					String isIndoorHumidityLowerThanOriginal = inputs
							.getInputValue(JasperUtils.IS_INDOORHUMIDITY_LOWER_THAN_ORIGINAL);
					if (isIndoorHumidityLowerThanOriginal
							.equalsIgnoreCase("true")) {
						expectedAlertText = "Humidity below "
								+ inputs.getInputValue(JasperUtils.INDOORHUMIDITY_BELOW_VALUE)
								+ "%";
					} else if (isIndoorHumidityLowerThanOriginal
							.equalsIgnoreCase("false")) {
						expectedAlertText = "Humidity above "
								+ inputs.getInputValue(JasperUtils.INDOORHUMIDITY_ABOVE_VALUE)
								+ "%";
					}

				} else if (alertType.equalsIgnoreCase("Filter Reminder")) {
					expectedAlertText = "Replace air filter";

				} else {
					flag = false;
					Keyword.ReportStep_Fail(
							testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to validate for the Alert type specified: "
									+ alertType
									+ "\nPlease check the specified alert type to be validated");
				}

				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if ((MobileUtils.isMobElementExists(fieldObjects, testCase,
							"AlertIcon", 5))
							|| (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "AlertTitle", 5))) {
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "AlertIcon", 5)) {
							alertIcons = MobileUtils.getMobElements(
									fieldObjects, testCase, "AlertIcon");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate Alert icons");
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "AlertTitle", 5)) {
							alertTitles = MobileUtils.getMobElements(
									fieldObjects, testCase, "AlertTitle");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate Alert Title");
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "AlertSubTitle", 5)) {
							alertSubTitles = MobileUtils.getMobElements(
									fieldObjects, testCase, "AlertSubTitle");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to locate Alert location and Time");
						}
						for (int i = 0; i < alertIcons.size(); i++) {
							if (alertTitles.get(i).getText()
									.equalsIgnoreCase(expectedAlertText)) {
								if ((alertSubTitles.get(i).getText()
										.contains("ago"))
										|| (alertSubTitles.get(i).getText()
												.contains("yesterday"))) {
									flag = false;
									Keyword.ReportStep_Fail(
											testCase,
											FailType.FUNCTIONAL_FAILURE,
											"Alert found: "
													+ alertTitles.get(i)
															.getText()
													+ "\n"
													+ alertSubTitles.get(i)
															.getText()
													+ " but it is an old alert generated");
								} else {
									Keyword.ReportStep_Pass(testCase,
											"Alert found: "
													+ alertTitles.get(i)
															.getText()
													+ "\n"
													+ alertSubTitles.get(i)
															.getText());
									alertFlag = true;
								}
								break;
							}
						}
						if (alertFlag) {
							Keyword.ReportStep_Pass(testCase,
									"Found expected alert for " + alertType);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Expected Alert for " + alertType
											+ " not found");
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE, "No Alert exist");
					}
				} else {

				}
			}
		}

		return flag;
	}

	public static boolean selectIndividualDaysViewOrGroupedDaysView(
			TestCases testCase, String viewDays) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		try {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ScheduleOptionsButton", 10)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ScheduleOptionsButton")) {
					flag = false;
				}
			} else {
				flag = flag & viewScheduleOnPrimaryCard(testCase);
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ScheduleOptionsButton", 10)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ScheduleOptionsButton")) {
						flag = false;
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate Schedule Edit icon");
				}
			}

			if ("Individual Days".equalsIgnoreCase(viewDays)) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ViewByIndividualDays", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ViewByIndividualDays")) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Selected View by Individual days");
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ScheduleEditCancelButton", 5)) {
						if (!MobileUtils.clickOnElement(fieldObjects, testCase,
								"ScheduleEditCancelButton")) {
							flag = false;
						} else {
							Keyword.ReportStep_Pass(testCase,
									"Schedule was already in Individual days view");
						}
					}
				}
			} else {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"ViewByGroupedDays", 5)) {
					if (!MobileUtils.clickOnElement(fieldObjects, testCase,
							"ViewByGroupedDays")) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Selected View by Grouped days");
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ScheduleEditCancelButton", 5)) {
						if (!MobileUtils.clickOnElement(fieldObjects, testCase,
								"ScheduleEditCancelButton")) {
							flag = false;
						} else {
							Keyword.ReportStep_Pass(testCase,
									"Schedule was already in Grouped days view");
						}
					}
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
					FailType.FUNCTIONAL_FAILURE,
					"Error Occured : " + e.getMessage());
		}

		return flag;
	}

	public static boolean clickOnDeleteIconForSelectedPeriodNA(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		String[] schedulePeriods = { "Wake", "Away", "Home", "Sleep" };
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		Random rn = new Random();
		String periodToSelect = schedulePeriods[rn.nextInt((3 - 0) + 1) + 0];
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (MobileUtils.isMobElementExists("XPATH", "//*[@text='"
					+ periodToSelect + "']", testCase, 5)) {
				if (!MobileUtils.clickOnElement(testCase, "XPATH",
						"//*[@text='" + periodToSelect + "']")) {
					flag = false;
				} else {
					Keyword.ReportStep_Pass(testCase, "Selected period-"
							+ periodToSelect);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period-" + periodToSelect);
			}
		} else {
			String[] scheduleDay = { "Monday", "Tuesday", "Wednesday",
					"Thursday", "Friday", "Saturday", "Sunday" };
			String DayToSelect = scheduleDay[rn.nextInt((6 - 0) + 1) + 0];
			TouchAction touchAction = new TouchAction(
					testCase.getMobileDriver());
			if (inputs.getInputValue(JasperUtils.SHOW_VIEW_TYPE)
					.equalsIgnoreCase("Individual Days")) {
				if (MobileUtils.isMobElementExists("name", DayToSelect,
						testCase, 5)) {
					testCase.getMobileDriver().scrollToExact(DayToSelect);
					while (!MobileUtils.isMobElementExists("name", DayToSelect
							+ "_" + periodToSelect, testCase, 5)) {
						AppiumDriver<MobileElement> driver = testCase
								.getMobileDriver();
						Dimension dimension = driver.manage().window()
								.getSize();
						int height = dimension.getHeight();
						int width = dimension.getWidth();
						touchAction.press(width / 2, height / 2)
								.waitAction(2000).moveTo(width / 2, 82)
								.release();
						touchAction.perform();
					}
					if (!MobileUtils.clickOnElement(testCase, "name",
							DayToSelect + "_" + periodToSelect)) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Failed to locate the period-" + DayToSelect
										+ "_" + periodToSelect);
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected period-"
								+ DayToSelect + "_" + periodToSelect);
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate the period-" + DayToSelect + "_"
									+ periodToSelect);
				}
			} else {
				if (MobileUtils.isMobElementExists("name", "Everyday_"
						+ periodToSelect, testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name",
							"Everyday_" + periodToSelect)) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected period-"
								+ periodToSelect);
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Failed to locate the period-" + periodToSelect);
				}
			}
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"PeriodDeleteIcon", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"PeriodDeleteIcon")) {
				flag = false;
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate the Period delete icon");
		}

		return flag;
	}

	public static boolean verifySchedulePeriodNotDeleted(TestCases testCase,
			boolean deleteSchedulePeriod) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		if (!deleteSchedulePeriod) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CancelChangeButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"CancelChangeButton")) {
					flag = false;
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"PeriodDeleteIcon", 5)) {
						Keyword.ReportStep_Pass(testCase,
								"Schedule period is not deleted when clicked on Cancel during Delete operation");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Schedule period is deleted when clicked on Cancel during Delete operation");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Period Cancel button not found");
			}
		} else {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"ConfirmDeleteButton", 5)) {
				if (!MobileUtils.clickOnElement(fieldObjects, testCase,
						"ConfirmDeleteButton")) {
					flag = false;
				} else {
					if (!MobileUtils.isMobElementExists(fieldObjects, testCase,
							"PeriodDeleteIcon", 5)) {
						Keyword.ReportStep_Pass(testCase,
								"Schedule period is deleted when clicked on Delete during Delete operation");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Schedule period is not deleted when clicked on Delete during Delete operation");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Period Confirm Delete button not found");
			}
		}

		return flag;
	}

	public static boolean editTimeBasedSchedule(TestCases testCase,
			TestCaseInputs inputs, String schedulePeriod,
			int periodCounterToBeDeleted) {
		boolean flag = true;
		WebElement period = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ schedulePeriod + "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriod.split("_")[1]);
				while (!MobileUtils.isMobElementExists("XPATH",
						"//*[@content-desc='" + schedulePeriod + "']",
						testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//*[@content-desc='" + schedulePeriod + "']"));
		} else {
			if (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + schedulePeriod
							+ "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriod.split("_")[0]);
				while (!MobileUtils.isMobElementExists("xpath",
						"//UIAApplication//UIATableCell[@name='"
								+ schedulePeriod + "']", testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ schedulePeriod
							+ "']//UIAStaticText[contains(@name,'"
							+ schedulePeriod + "')]"));
			String time = schedulePeriod.split("_")[0] + "_Time";
			String cp = schedulePeriod + "_CoolTemperature";
			String hp = schedulePeriod + "_HeatTemperature";
			WebElement elemTime = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ schedulePeriod
							+ "']//UIAStaticText[contains(@name,'" + time
							+ "')]"));
			System.out.println(elemTime.getAttribute("value"));
			if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
				WebElement elemCP = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ schedulePeriod + "']//*[contains(@name,'"
								+ cp + "')]"));
				WebElement elemHP = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ schedulePeriod + "']//*[contains(@name,'"
								+ hp + "')]"));
				System.out.println(elemCP.getAttribute("value"));
				System.out.println(elemHP.getAttribute("value"));
			} else if (allowedModes.contains("Cool")
					&& !allowedModes.contains("Heat")) {
				WebElement elemCP = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ schedulePeriod + "']//*[contains(@name,'"
								+ cp + "')]"));
				System.out.println(elemCP.getAttribute("value"));
			} else if (!allowedModes.contains("Cool")
					&& allowedModes.contains("Heat")) {
				WebElement elemHP = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ schedulePeriod + "']//*[contains(@name,'"
								+ hp + "')]"));
				System.out.println(elemHP.getAttribute("value"));
			}
		}
		String periodName = "";
		HashMap<String, String> periodTimeandSetPoint = new HashMap<String, String>();
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			periodTimeandSetPoint.put("periodName",
					schedulePeriod.split("_")[0]);
			periodName = schedulePeriod.split("_")[0];
		} else {
			periodTimeandSetPoint.put("periodName",
					schedulePeriod.split("_")[1]);
			periodName = schedulePeriod.split("_")[1];
		}

		if (periodName.equalsIgnoreCase("Wake")
				|| periodName.equalsIgnoreCase("1")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
					|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
				periodTimeandSetPoint.put("Time",
						inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_TIME));
			} else {
				periodTimeandSetPoint.put("StartTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_1_TIME));
				periodTimeandSetPoint.put("EndTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_2_TIME));
			}
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_HEAT_SETPOINT));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_WAKE_COOL_SETPOINT));
			}
		} else if (periodName.equalsIgnoreCase("Away")
				|| periodName.equalsIgnoreCase("2")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
					|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
				periodTimeandSetPoint.put("Time",
						inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_TIME));
			} else {
				periodTimeandSetPoint.put("StartTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_2_TIME));
				periodTimeandSetPoint.put("EndTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_3_TIME));
			}
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_HEAT_SETPOINT));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_AWAY_COOL_SETPOINT));
			}
		} else if (periodName.equalsIgnoreCase("Home")
				|| periodName.equalsIgnoreCase("3")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
					|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
				periodTimeandSetPoint.put("Time",
						inputs.getInputValue(JasperUtils.EVERYDAY_HOME_TIME));
			} else {
				periodTimeandSetPoint.put("StartTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_3_TIME));
				periodTimeandSetPoint.put("EndTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_4_TIME));
			}
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_HOME_HEAT_SETPOINT));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_HOME_COOL_SETPOINT));
			}
		} else if (periodName.equalsIgnoreCase("Sleep")
				|| periodName.equalsIgnoreCase("4")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
					|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
				periodTimeandSetPoint.put("Time",
						inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_TIME));
			} else {
				periodTimeandSetPoint.put("StartTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_4_TIME));
				periodTimeandSetPoint.put("EndTime",
						inputs.getInputValue(JasperUtils.EVERYDAY_1_TIME));
			}
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
			} else if (allowedModes.contains("Heat")
					&& !allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("HeatSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_HEAT_SETPOINT));
			} else if (!allowedModes.contains("Heat")
					&& allowedModes.contains("Cool")) {
				periodTimeandSetPoint
						.put("CoolSetPoint",
								inputs.getInputValue(JasperUtils.EVERYDAY_SLEEP_COOL_SETPOINT));
			}
		}
		inputs.setInputValue(PERIOD_NAME_NA + periodCounterToBeDeleted,
				schedulePeriod);
		inputs.setInputValue(SCHEDULE_PERIOD_EDITED, schedulePeriod);

		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting time and set points for "
						+ schedulePeriod + " ***************");
		flag = flag
				& JasperUtils.setTimeSchedulePeriodTimeAndSetPoints(testCase,
						inputs, periodTimeandSetPoint, period);
		flag = flag
				& MobileUtils.clickOnElement(fieldObjects, testCase,
						"SaveButton");
		Keyword.ReportStep_Pass(testCase,
				"*************** Completed setting time and set points for "
						+ schedulePeriod + " ***************");

		return flag;
	}

	public static boolean editTimeBasedScheduleByDeletingPeriods(
			TestCases testCase, TestCaseInputs inputs, String schedulePeriod,
			int periodCounterToBeDeleted) {
		boolean flag = true;
		WebElement period = null;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ schedulePeriod + "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriod.split("_")[1]);
				while (!MobileUtils.isMobElementExists("XPATH",
						"//*[@content-desc='" + schedulePeriod + "']",
						testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//*[@content-desc='" + schedulePeriod + "']"));
		} else {
			if (MobileUtils.isMobElementExists("name", schedulePeriod,
					testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriod.split("_")[0]);
				while (!MobileUtils.isMobElementExists("name", schedulePeriod,
						testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ schedulePeriod
							+ "']//UIAStaticText[contains(@name,'"
							+ schedulePeriod + "')]"));

		}
		inputs.setInputValue(PERIOD_NAME_NA + periodCounterToBeDeleted,
				schedulePeriod);

		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase, "*************** Deleting period- "
				+ schedulePeriod + " ***************");
		try {
			period.click();
			Keyword.ReportStep_Pass(testCase, "Selected period-"
					+ schedulePeriod);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to select the period-" + period);
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"PeriodDeleteIcon", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"PeriodDeleteIcon")) {
				flag = false;
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate the Period delete icon");
		}
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"ConfirmDeleteButton", 5)) {
			if (!MobileUtils.clickOnElement(fieldObjects, testCase,
					"ConfirmDeleteButton")) {
				flag = false;
			} else {
				if (!MobileUtils.isMobElementExists(fieldObjects, testCase,
						"PeriodDeleteIcon", 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Schedule period is deleted when clicked on Delete during Delete operation");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Schedule period is not deleted when clicked on Delete during Delete operation");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Period Confirm Delete button not found");
		}

		Keyword.ReportStep_Pass(testCase,
				"*************** Completed deleting period- " + schedulePeriod
						+ " ***************");
		if (schedulePeriod.contains("Wake")) {
			inputs.setInputValue(EVERYDAY_WAKE_TIME, "Tap to set");
		} else if (schedulePeriod.contains("Away")) {
			inputs.setInputValue(EVERYDAY_AWAY_TIME, "Tap to set");
		} else if (schedulePeriod.contains("Home")) {
			inputs.setInputValue(EVERYDAY_HOME_TIME, "Tap to set");
		} else if (schedulePeriod.contains("Sleep")) {
			inputs.setInputValue(EVERYDAY_SLEEP_TIME, "Tap to set");
		}

		return flag;
	}

	public static boolean verifySelectedScreenInViewScheduleScreen(
			TestCases testCase, String scheduleTypeToBeValidated) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		flag = flag & viewScheduleOnPrimaryCard(testCase);

		if (scheduleTypeToBeValidated.equalsIgnoreCase("No")) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"CreateScheduleButton", 5)
					&& MobileUtils.isMobElementExists(fieldObjects, testCase,
							"NoScheduleText", 5)) {
				Keyword.ReportStep_Pass(testCase,
						"No Schedule screen is shown in View schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"No Schedule screen in not shown in View schedule screen");
			}
		} else if (scheduleTypeToBeValidated.equalsIgnoreCase("Everyday")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("XPATH",
						"//*[@text='Everyday']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Everyday Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Everyday Schedule screen in not shown in View schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("XPATH",
						"//UIAStaticText[@name='Everyday']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Everyday Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Everyday Schedule screen in not shown in View schedule screen");
				}
			}

		} else if (scheduleTypeToBeValidated
				.equalsIgnoreCase("Weekday and Weekend")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("XPATH",
						"//*[@text='Monday-Friday']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Weekday and Weekend Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Weekday and Weekend Schedule screen in not shown in View schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("XPATH",
						"//UIAStaticText[@name='Monday-Friday']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Weekday and Weekend Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Weekday and Weekend Schedule screen in not shown in View schedule screen");
				}
			}

		} else if (scheduleTypeToBeValidated.equalsIgnoreCase("Geofence")) {
			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils.isMobElementExists("XPATH",
						"//*[@text='Use My Home Settings']", testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Geofence Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Geofence Schedule screen in not shown in View schedule screen");
				}
			} else {
				if (MobileUtils.isMobElementExists("XPATH",
						"//UIAStaticText[@name='Use My Home Settings']",
						testCase, 5)) {
					Keyword.ReportStep_Pass(testCase,
							"Geofence Schedule screen is shown in View schedule screen");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Geofence Schedule screen in not shown in View schedule screen");
				}
			}
		}

		return flag;
	}

	public static boolean verifyEditedDayIsSeparatedFromGroupInTimeSchedule(
			TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true, editedDayDisplayed = false;
		List<WebElement> scheduleDayHeaders = null;
		ArrayList<String> arrlist = new ArrayList<String>(8);
		int editedDayDisplayedCount = 0;
		String temp = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		for (int i = 1; i <= 6; i++) {
			if (!inputs.getInputValue(PERIOD_NAME_NA + i).isEmpty()
					&& inputs.getInputValue(PERIOD_NAME_NA + i) != null) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ScheduleDayHeader", 5)) {
						scheduleDayHeaders = MobileUtils.getMobElements(
								fieldObjects, testCase, "ScheduleDayHeader");
						for (int j = 0; j < scheduleDayHeaders.size(); j++) {
							if (!arrlist.contains(scheduleDayHeaders.get(j)
									.getText())) {
								arrlist.add(scheduleDayHeaders.get(j).getText());
							}
						}
						touchAction.press(width / 2, height / 2)
								.waitAction(2000).moveTo(width / 2, 82)
								.release();
						touchAction.perform();
					}
				} else {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"ScheduleDayHeader", 5)) {
						scheduleDayHeaders = MobileUtils.getMobElements(
								fieldObjects, testCase, "ScheduleDayHeader");
						for (int j = 0; j < scheduleDayHeaders.size(); j++) {
							if (!arrlist.contains(scheduleDayHeaders.get(j)
									.getAttribute("name"))) {
								arrlist.add(scheduleDayHeaders.get(j)
										.getAttribute("name"));
							}
						}
						touchAction.press(width / 2, height / 2)
								.waitAction(2000).moveTo(width / 2, 82)
								.release();
						touchAction.perform();
					}
				}
			}
		}
		System.out.println(arrlist);
		for (int i = 1; i <= 6; i++) {
			if (!inputs.getInputValue(PERIOD_NAME_NA + i).isEmpty()
					&& inputs.getInputValue(PERIOD_NAME_NA + i) != null) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					temp = inputs.getInputValue(PERIOD_NAME_NA + i).split("_")[1];
				} else {
					temp = inputs.getInputValue(PERIOD_NAME_NA + i).split("_")[0];
				}
				if (arrlist.contains(temp)) {
					editedDayDisplayedCount = 0;
					editedDayDisplayed = true;
					for (int j = 0; j < arrlist.size(); j++) {
						if (arrlist.get(j).contains(temp)) {
							editedDayDisplayedCount++;
							if (arrlist.get(j).contains("-")
									|| arrlist.get(j).contains(",")) {
								flag = false;
								Keyword.ReportStep_Fail(testCase,
										FailType.FUNCTIONAL_FAILURE,
										"Edited day is not shown separately: "
												+ arrlist.get(j));
							} else {
								Keyword.ReportStep_Pass(testCase,
										"Edited day is shown separately: "
												+ arrlist.get(j));
							}
						}
					}
					if (editedDayDisplayedCount > 1) {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Edited day in Grouped Days view is shown more than once");
					}

				} else {

				}
				if (!editedDayDisplayed) {
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE, "Edited day: " + temp
									+ " is not shown separately in the group");
				}
			}
		}

		return flag;
	}

	public static boolean editTimeBasedScheduleWithMinMaxValues(
			TestCases testCase, TestCaseInputs inputs, String periodName) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[1]);
			while (!MobileUtils.isMobElementExists("XPATH",
					"//*[@content-desc='" + periodName + "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ periodName + "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				WebElement period = MobileUtils.getMobElement(testCase,
						"XPATH", "//*[@content-desc='" + periodName + "']");
				if (period != null) {
					if (!MobileUtils.clickOnElement(testCase, "XPATH",
							"//*[@content-desc='" + periodName + "']")) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected period: "
								+ periodName);

						if (periodName.contains("Wake")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_WAKE);
						} else if (periodName.contains("Away")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_AWAY);
						} else if (periodName.contains("Home")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_HOME);
						} else if (periodName.contains("Sleep")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_SLEEP);
						}

						if (periodName.contains("1")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_1);
						} else if (periodName.contains("2")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_2);
						} else if (periodName.contains("3")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_3);
						} else if (periodName.contains("4")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_4);
						}

						Keyword.ReportStep_Pass(testCase, " ");
						Keyword.ReportStep_Pass(testCase,
								"*************** Setting maximum and minimum set points ***************");
						flag = flag
								& JasperUtils.setTimeSchedulePeriodSetPoints(
										testCase, inputs, null, true);
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase, "SaveButton");
						Keyword.ReportStep_Pass(
								testCase,
								"*************** Completed setting maximum and minimum set points ***************");
						inputs.setInputValue(SCHEDULE_PERIOD_EDITED, periodName);
						inputs.setInputValue(PERIOD_NAME_NA + 1, periodName);
					}
				}
			}
		} else {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[0]);
			while (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			if (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				WebElement period = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ periodName
								+ "']//UIAStaticText[contains(@name,'"
								+ periodName + "')]"));
				if (period != null) {
					if (!MobileUtils.clickOnElement(testCase, "XPATH",
							"//UIAApplication//UIATableCell[@name='"
									+ periodName
									+ "']//UIAStaticText[contains(@name,'"
									+ periodName + "')]")) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected period: "
								+ periodName);

						if (periodName.contains("Wake")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_WAKE);
						} else if (periodName.contains("Away")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_AWAY);
						} else if (periodName.contains("Home")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_HOME);
						} else if (periodName.contains("Sleep")) {
							inputs.setInputValue(PERIOD_NAME_NA, EVERYDAY_SLEEP);
						}

						if (periodName.contains("1")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_1);
						} else if (periodName.contains("2")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_2);
						} else if (periodName.contains("3")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_3);
						} else if (periodName.contains("4")) {
							inputs.setInputValue(PERIOD_NUMBER_EMEA, EVERYDAY_4);
						}

						Keyword.ReportStep_Pass(testCase, " ");
						Keyword.ReportStep_Pass(testCase,
								"*************** Setting maximum and minimum set points ***************");
						flag = flag
								& JasperUtils.setTimeSchedulePeriodSetPoints(
										testCase, inputs, null, true);
						flag = flag
								& MobileUtils.clickOnElement(fieldObjects,
										testCase, "SaveButton");
						Keyword.ReportStep_Pass(
								testCase,
								"*************** Completed setting maximum and minimum set points ***************");
						inputs.setInputValue(SCHEDULE_PERIOD_EDITED, periodName);
						inputs.setInputValue(PERIOD_NAME_NA + 1, periodName);
					}
				}
			}
		}

		return flag;
	}

	public static boolean verifyTemperatureWithinRangeForEditedPeriodInTimeSchedule(
			TestCases testCase, TestCaseInputs inputs, String periodName) {
		boolean flag = true;
		WebElement period = null, periodCoolPoint = null, periodHeatPoint = null;
		Double maxHeat = 0.0, minHeat = 0.0, maxCool = 0.0, minCool = 0.0;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Grouped Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Grouped Days");
		} else if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Individual Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Individual Days");
		}

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[1]);
			while (!MobileUtils.isMobElementExists("XPATH",
					"//*[@content-desc='" + periodName + "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ periodName + "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				period = MobileUtils.getMobElement(testCase, "XPATH",
						"//*[@content-desc='" + periodName + "']");
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					maxHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxHeat"));
					minHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinHeat"));
					maxCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxCool"));
					minCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinCool"));

					periodCoolPoint = period.findElement(By
							.id("scheduling_period_cooling_point"));
					periodHeatPoint = period.findElement(By
							.id("scheduling_period_heating_point"));

					if (Double.parseDouble(periodCoolPoint.getText()) <= maxCool
							&& Double.parseDouble(periodCoolPoint.getText()) >= minCool) {
						Keyword.ReportStep_Pass(
								testCase,
								"Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getText())
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getText())
										+ " is not set within or at the maximum and minimum range");
					}
					if (Double.parseDouble(periodHeatPoint.getText()) <= maxHeat
							&& Double.parseDouble(periodHeatPoint.getText()) >= minHeat) {
						Keyword.ReportStep_Pass(
								testCase,
								"Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getText())
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getText())
										+ " is not set within or at the maximum and minimum range");
					}

				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					maxHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxHeat"));
					minHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinHeat"));

					periodHeatPoint = period.findElement(By
							.id("scheduling_period_heating_point"));

					if (Double.parseDouble(periodHeatPoint.getText()) <= maxHeat
							&& Double.parseDouble(periodHeatPoint.getText()) >= minHeat) {
						Keyword.ReportStep_Pass(
								testCase,
								"Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getText())
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getText())
										+ " is not set within or at the maximum and minimum range");
					}

				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					maxCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxCool"));
					minCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinCool"));

					periodCoolPoint = period.findElement(By
							.id("scheduling_period_cooling_point"));

					if (Double.parseDouble(periodCoolPoint.getText()) <= maxCool
							&& Double.parseDouble(periodCoolPoint.getText()) >= minCool) {
						Keyword.ReportStep_Pass(
								testCase,
								"Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getText())
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getText())
										+ " is not set within or at the maximum and minimum range");
					}
				}
			}
		} else {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[0]);
			while (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ periodName + "']//UIAStaticText[contains(@name,'"
							+ periodName + "')]"));
			String cp = periodName + "_CoolTemperature";
			String hp = periodName + "_HeatTemperature";
			if (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				period = MobileUtils.getMobElement(testCase, "XPATH",
						"//UIAApplication//UIATableCell[@name='" + periodName
								+ "']//UIAStaticText[contains(@name,'"
								+ periodName + "')]");
				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					maxHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxHeat"));
					minHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinHeat"));
					maxCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxCool"));
					minCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinCool"));

					periodCoolPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ cp + "')]"));
					periodHeatPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ hp + "')]"));

					if (Double.parseDouble(periodCoolPoint
							.getAttribute("value")) <= maxCool
							&& Double.parseDouble(periodCoolPoint
									.getAttribute("value")) >= minCool) {
						Keyword.ReportStep_Pass(
								testCase,
								"Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getAttribute("value"))
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getAttribute("value"))
										+ " is not set within or at the maximum and minimum range");
					}
					if (Double.parseDouble(periodHeatPoint
							.getAttribute("value")) <= maxHeat
							&& Double.parseDouble(periodHeatPoint
									.getAttribute("value")) >= minHeat) {
						Keyword.ReportStep_Pass(
								testCase,
								"Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getAttribute("value"))
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getAttribute("value"))
										+ " is not set within or at the maximum and minimum range");
					}

				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					maxHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxHeat"));
					minHeat = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinHeat"));

					periodHeatPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ hp + "')]"));

					if (Double.parseDouble(periodHeatPoint
							.getAttribute("value")) <= maxHeat
							&& Double.parseDouble(periodHeatPoint
									.getAttribute("value")) >= minHeat) {
						Keyword.ReportStep_Pass(
								testCase,
								"Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getAttribute("value"))
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Heat Set Point value: "
										+ Double.parseDouble(periodHeatPoint
												.getAttribute("value"))
										+ " is not set within or at the maximum and minimum range");
					}

				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					maxCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MaxCool"));
					minCool = Double.parseDouble(statInfo
							.getDeviceMaxMinSetPoints().get("MinCool"));

					periodCoolPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ cp + "')]"));

					if (Double.parseDouble(periodCoolPoint
							.getAttribute("value")) <= maxCool
							&& Double.parseDouble(periodCoolPoint
									.getAttribute("value")) >= minCool) {
						Keyword.ReportStep_Pass(
								testCase,
								"Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getAttribute("value"))
										+ " is set within or at the maximum and minimum range");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(
								testCase,
								FailType.FUNCTIONAL_FAILURE,
								"[TemperatureInMaxMinRange] Cool Set Point value: "
										+ Double.parseDouble(periodCoolPoint
												.getAttribute("value"))
										+ " is not set within or at the maximum and minimum range");
					}
				}
			}
		}

		return flag;
	}

	public static boolean verifyTemperatureFieldIncrementsForEditedPeriodInTimeSchedule(
			TestCases testCase, TestCaseInputs inputs, String periodName) {
		boolean flag = true;
		WebElement period = null, periodCoolPoint = null, periodHeatPoint = null;
		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		List<String> allowedModes = statInfo.getAllowedModes();

		if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Grouped Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Grouped Days");
		} else if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Individual Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Individual Days");
		}

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[1]);
			while (!MobileUtils.isMobElementExists("XPATH",
					"//*[@content-desc='" + periodName + "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ periodName + "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				period = MobileUtils.getMobElement(testCase, "XPATH",
						"//*[@content-desc='" + periodName + "']");

				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					periodCoolPoint = period.findElement(By
							.id("scheduling_period_cooling_point"));
					periodHeatPoint = period.findElement(By
							.id("scheduling_period_heating_point"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodCoolPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is not in 0.5C increments for Celsius mode");
						}
						if (periodHeatPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodCoolPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is not in 1F increments for Fahrenheit mode");
						}
						if (!periodHeatPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}

				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					periodHeatPoint = period.findElement(By
							.id("scheduling_period_heating_point"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodHeatPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodHeatPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint.getText()
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}

				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					periodCoolPoint = period.findElement(By
							.id("scheduling_period_cooling_point"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodCoolPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodCoolPoint.getText().contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}
				}
			}
		} else {
			testCase.getMobileDriver().scrollToExact(periodName.split("_")[0]);
			while (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				touchAction.press(width / 2, height / 2).waitAction(2000)
						.moveTo(width / 2, 82).release();
				touchAction.perform();
			}
			String cp = periodName + "_CoolTemperature";
			String hp = periodName + "_HeatTemperature";
			if (!MobileUtils.isMobElementExists("XPATH",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			} else {
				period = testCase.getMobileDriver().findElement(
						By.xpath("//UIAApplication//UIATableCell[@name='"
								+ periodName
								+ "']//UIAStaticText[contains(@name,'"
								+ periodName + "')]"));

				if (allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					periodCoolPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ cp + "')]"));
					periodHeatPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ hp + "')]"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodCoolPoint.getAttribute("value").contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint.getText()
											+ " is not in 0.5C increments for Celsius mode");
						}
						if (periodHeatPoint.getAttribute("value").contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodCoolPoint.getAttribute("value")
								.contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is not in 1F increments for Fahrenheit mode");
						}
						if (!periodHeatPoint.getAttribute("value")
								.contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}

				} else if (!allowedModes.contains("Cool")
						&& allowedModes.contains("Heat")) {
					periodHeatPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ hp + "')]"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodHeatPoint.getAttribute("value").contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodHeatPoint.getAttribute("value")
								.contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Heat set point: "
											+ periodHeatPoint
													.getAttribute("value")
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}

				} else if (allowedModes.contains("Cool")
						&& !allowedModes.contains("Heat")) {
					periodCoolPoint = testCase.getMobileDriver().findElement(
							By.xpath("//UIAApplication//UIATableCell[@name='"
									+ periodName + "']//*[contains(@name,'"
									+ cp + "')]"));

					if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.CELSIUS)) {
						if (periodCoolPoint.getAttribute("value").contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is in 0.5C increments for Celsius mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is not in 0.5C increments for Celsius mode");
						}
					} else if (inputs.getInputValue(UNITS).equalsIgnoreCase(
							GlobalVariables.FAHRENHEIT)) {
						if (!periodCoolPoint.getAttribute("value")
								.contains(".")) {
							Keyword.ReportStep_Pass(
									testCase,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is in 1F increments for Fahrenheit mode");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(
									testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Cool set point: "
											+ periodCoolPoint
													.getAttribute("value")
											+ " is not in 1F increments for Fahrenheit mode");
						}
					}
				}
			}
		}

		return flag;
	}

	public static boolean validateTimeforSpecificTimeSchedulePeriod(
			TestCases testCase, TestCaseInputs inputs, String timeToVerify,
			String periodName) {
		boolean flag = true;
		String periodTime = "";

		if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Grouped Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Grouped Days");
		} else if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Individual Days")) {
			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Individual Days");
		}

		WebElement period = null;
		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ periodName + "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						periodName.split("_")[1]);
				while (!MobileUtils.isMobElementExists("XPATH",
						"//*[@content-desc='" + periodName + "']", testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//*[@content-desc='" + periodName + "']"));
			if (period != null) {
				periodTime = period
						.findElement(By.id("scheduling_period_time")).getText();
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			}
		} else {
			if (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='" + periodName
							+ "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						periodName.split("_")[0]);
				while (!MobileUtils.isMobElementExists("xpath",
						"//UIAApplication//UIATableCell[@name='" + periodName
								+ "']", testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ periodName + "']//UIAStaticText[contains(@name,'"
							+ periodName + "')]"));
			if (period != null) {
				periodTime = testCase
						.getMobileDriver()
						.findElement(
								By.xpath("//UIAApplication//UIATableCell[@name='"
										+ periodName
										+ "']//UIAStaticText[contains(@name,'"
										+ timeToVerify + "')]"))
						.getAttribute("value");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate the period: " + periodName);
			}
			System.out.println(periodTime);
		}

		if (periodTime.equalsIgnoreCase(timeToVerify)) {
			Keyword.ReportStep_Pass(testCase, "Period time for " + periodName
					+ " is set to " + periodTime);
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Period time for " + periodName + " is set to "
							+ periodTime
							+ " which is not same as expected value "
							+ timeToVerify);
		}

		return flag;
	}

	public static boolean verifyNumberOfSchedulePeriodsInTimeSchedule(
			TestCases testCase, TestCaseInputs inputs,
			int numberOfPeriodsToCheck) {
		boolean flag = true;
		List<WebElement> period = null;
		String temp = "";
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "ScheduleScreen");
		if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Grouped Days")) {

			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Grouped Days");

			if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
				if (MobileUtils
						.isMobElementExists("XPATH",
								"//*[contains(@content-desc,'_Everyday')]",
								testCase, 5)) {
					period = MobileUtils.getMobElements(testCase, "xpath",
							"//*[contains(@content-desc,'_Everyday')]");
					temp = period.get(0).getAttribute("name");
					if (!(period.size() > 1)) {
						try {
							period.get(0).click();
							Keyword.ReportStep_Pass(testCase,
									"Selected period-" + temp);
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select the period-" + temp);
						}
						if (!MobileUtils.isMobElementExists(fieldObjects,
								testCase, "PeriodDeleteIcon", 5)) {
							Keyword.ReportStep_Pass(testCase,
									"Period Delete icon is not shown-not able to delete the period");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period Delete icon is shown");
						}

					} else {
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Number of periods present is more than 1: "
										+ period.size());
					}
				}
			} else {
				if (MobileUtils
						.isMobElementExists(
								"XPATH",
								"//UIATableCell[@value='' and contains(@name,'Everyday_')]",
								testCase, 5)) {
					period = MobileUtils
							.getMobElements(testCase, "xpath",
									"//UIATableCell[@value='' and contains(@name,'Everyday_')]");
					temp = period.get(0).getAttribute("name");
					if (!(period.size() > 1)) {
						try {
							period.get(0).click();
							Keyword.ReportStep_Pass(testCase,
									"Selected period-" + temp);
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select the period-" + temp);
						}
						if (!MobileUtils.isMobElementExists(fieldObjects,
								testCase, "PeriodDeleteIcon", 5)) {
							Keyword.ReportStep_Pass(testCase,
									"Period Delete icon is not shown-not able to delete the period");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period Delete icon is shown");
						}

					} else {
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Number of periods present is more than 1: "
										+ period.size());
					}
				}
			}
		} else if (inputs.getInputValue(SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Individual Days")) {

			String[] days = { "Monday", "Tuesday", "Wednesday", "Thursday",
					"Friday", "Saturday", "Sunday" };
			int count = 0, tries;

			AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			int height = dimension.getHeight();
			int width = dimension.getWidth();
			TouchAction touchAction = new TouchAction(
					testCase.getMobileDriver());

			flag = flag
					& JasperUtils.selectIndividualDaysViewOrGroupedDaysView(
							testCase, "Individual Days");

			for (int i = 0; i < days.length; i++) {
				if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
					testCase.getMobileDriver().scrollToExact(days[i]);
					tries = 0;
					while (MobileUtils.isMobElementExists("XPATH",
							"//*[contains(@content-desc,'" + "_" + days[i]
									+ "')]", testCase, 5)
							&& tries < 1) {
						period = MobileUtils.getMobElements(testCase, "xpath",
								"//*[contains(@content-desc,'" + "_" + days[i]
										+ "')]");
						temp = period.get(0).getAttribute("name");
						try {
							period.get(0).click();
							Keyword.ReportStep_Pass(testCase,
									"Selected period-" + temp);
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select the period-" + temp);
						}
						if (!MobileUtils.isMobElementExists(fieldObjects,
								testCase, "PeriodDeleteIcon", 5)) {
							Keyword.ReportStep_Pass(testCase,
									"Period Delete icon is not shown-not able to delete the period");
							count++;
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period Delete icon is shown");
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						}
						touchAction.press(width / 2, height / 2)
								.waitAction(2000).moveTo(width / 2, 82)
								.release();
						touchAction.perform();
						tries++;
					}
				} else {
					testCase.getMobileDriver().scrollToExact(days[i]);
					tries = 0;
					while (MobileUtils.isMobElementExists("XPATH",
							"//*[contains(@name,'" + days[i] + "_')]",
							testCase, 5)
							&& tries < 1) {
						period = MobileUtils.getMobElements(testCase, "xpath",
								"//*[contains(@name,'" + days[i] + "_')]");
						temp = period.get(0).getAttribute("name");
						try {
							period.get(0).click();
							Keyword.ReportStep_Pass(testCase,
									"Selected period-" + temp);
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Failed to select the period-" + temp);
						}
						if (!MobileUtils.isMobElementExists(fieldObjects,
								testCase, "PeriodDeleteIcon", 5)) {
							Keyword.ReportStep_Pass(testCase,
									"Period Delete icon is not shown-not able to delete the period");
							count++;
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase,
									FailType.FUNCTIONAL_FAILURE,
									"Period Delete icon is shown");
						}
						if (MobileUtils.isMobElementExists(fieldObjects,
								testCase, "BackButton", 5)) {
							if (!MobileUtils.clickOnElement(fieldObjects,
									testCase, "BackButton")) {
								flag = false;
							}
						}
						touchAction.press(width / 2, height / 2)
								.waitAction(2000).moveTo(width / 2, 82)
								.release();
						touchAction.perform();
						tries++;
					}
				}
			}
			if (count > 2) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Number of periods present: " + count
								+ " are more than expected number "
								+ numberOfPeriodsToCheck);
			} else {
				Keyword.ReportStep_Pass(testCase, "Number of periods present: "
						+ count + " is as expected number: "
						+ numberOfPeriodsToCheck);
			}
		}

		return flag;
	}

	public static boolean selectAnySchedulePeriodOfADay(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;
		String schedulePeriodToSelect = "", jasperStatType = "";
		WebElement period = null;

		String[] schedulePeriods_NA = { "Wake", "Away", "Home", "Sleep" };
		String[] schedulePeriods_EMEA = { "1", "2", "3", "4" };
		String[] days = { "Monday", "Tuesday", "Wednesday", "Thursday",
				"Friday", "Saturday", "Sunday" };
		Random rn = new Random();

		ThermostatInformation statInfo = new ThermostatInformation(testCase,
				inputs);
		if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
			jasperStatType = statInfo.getJasperDeviceType();
		}
		if (!statInfo.isStatOnline()) {
			Keyword.ReportStep_Pass(testCase, "Thermostat is offline");
			return true;
		}

		if (inputs.getInputValue(JasperUtils.SHOW_VIEW_TYPE).equalsIgnoreCase(
				"Grouped Days")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
				if (statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
					schedulePeriodToSelect = schedulePeriods_NA[rn
							.nextInt((3 - 0) + 0) + 1] + "_Everyday";
				} else if (jasperStatType.equalsIgnoreCase("EMEA")) {
					schedulePeriodToSelect = schedulePeriods_EMEA[rn
							.nextInt((3 - 0) + 0) + 1] + "_Everyday";
				}
			} else if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")) {
				schedulePeriodToSelect = schedulePeriods_NA[rn
						.nextInt((3 - 0) + 0) + 1] + "_Everyday";
			}

		} else if (inputs.getInputValue(JasperUtils.SHOW_VIEW_TYPE)
				.equalsIgnoreCase("Individual Days")) {
			if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
				if (statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
					schedulePeriodToSelect = schedulePeriods_NA[rn
							.nextInt((3 - 0) + 0) + 1]
							+ "_"
							+ days[rn.nextInt((6 - 0) + 1) + 0];
				} else if (jasperStatType.equalsIgnoreCase("EMEA")) {
					schedulePeriodToSelect = schedulePeriods_EMEA[rn
							.nextInt((3 - 0) + 0) + 1]
							+ "_"
							+ days[rn.nextInt((6 - 0) + 1) + 0];
				}
			} else if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")) {
				schedulePeriodToSelect = schedulePeriods_NA[rn
						.nextInt((3 - 0) + 0) + 1]
						+ "_"
						+ days[rn.nextInt((6 - 0) + 0) + 1];
			}
		}

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			if (!MobileUtils.isMobElementExists("XPATH", "//*[@content-desc='"
					+ schedulePeriodToSelect + "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriodToSelect.split("_")[1]);
				while (!MobileUtils.isMobElementExists("XPATH",
						"//*[@content-desc='" + schedulePeriodToSelect + "']",
						testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//*[@content-desc='" + schedulePeriodToSelect
							+ "']"));
		} else {
			if (!MobileUtils.isMobElementExists("xpath",
					"//UIAApplication//UIATableCell[@name='"
							+ schedulePeriodToSelect + "']", testCase, 5)) {
				testCase.getMobileDriver().scrollToExact(
						schedulePeriodToSelect.split("_")[0]);
				while (!MobileUtils.isMobElementExists("xpath",
						"//UIAApplication//UIATableCell[@name='"
								+ schedulePeriodToSelect + "']", testCase, 5)) {
					touchAction.press(width / 2, height / 2).waitAction(2000)
							.moveTo(width / 2, 82).release();
					touchAction.perform();
				}
			}
			period = testCase.getMobileDriver().findElement(
					By.xpath("//UIAApplication//UIATableCell[@name='"
							+ schedulePeriodToSelect
							+ "']//UIAStaticText[contains(@name,'"
							+ schedulePeriodToSelect + "')]"));

		}
		if (period != null) {
			try {
				period.click();
				Keyword.ReportStep_Pass(testCase, "Selected period: "
						+ schedulePeriodToSelect);
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to select the period: "
								+ schedulePeriodToSelect);
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate the period: " + schedulePeriodToSelect);
		}

		return flag;
	}

	public static boolean toggleGeofence(TestCases testCase, boolean On) {

		boolean flag = true;
		try {
			HashMap<String, MobileObject> fieldObjects = MobileUtils
					.loadObjectFile(testCase, "GlobalDrawer");
			if (MobileUtils.clickOnElement(fieldObjects, testCase,
					"GlobalDrawerButton", "[GlobalDrawerButton]")) {
				if (MobileUtils.clickOnElement(fieldObjects, testCase,
						"ComfortConfig", "[ComfortConfig]")) {
					fieldObjects = MobileUtils.loadObjectFile(testCase,
							"GeofenceManager");
					if (MobileUtils.clickOnElement(fieldObjects, testCase,
							"Geofence", "[Geofence]")) {
						MobileElement button = MobileUtils.getMobElement(
								fieldObjects, testCase,
								"GeofenceLocationButton", true);
						if (button != null) {

							if (testCase.getPlatform().toUpperCase()
									.contains("IOS")) {
								button = testCase
										.getMobileDriver()
										.findElement(
												By.xpath("//UIASwitch[@name='Geofence this Location']"));
								// button1.click();
								System.out
										.println(button.getAttribute("value"));
								if (On) {
									if (button.getAttribute("value")
											.equals("0")) {
										button.click();
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is turned on");
									} else {
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is already turned on");

									}
								} else {
									if (button.getAttribute("value")
											.equals("1")) {
										button.click();
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is turned off");
									} else {
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is already turned off");
									}
								}
								for (int i = 0; i < 3; i++) {
									testCase.getMobileDriver()
											.findElement(By.id("Back")).click();
									// MobileUtils.clickOnElement(fieldObjects,
									// testCase, "BackButton");
								}

							} else {
								if (On) {
									if (button.getText()
											.equalsIgnoreCase("Off")) {
										button.click();
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is turned on");
									} else {
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is already turned on");

									}
								} else {
									if (button.getText().equalsIgnoreCase("On")) {
										button.click();
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is turned off");
									} else {
										Keyword.ReportStep_Pass(testCase,
												"Geofence location is already turned off");
									}
								}
								for (int i = 0; i < 3; i++) {
									MobileUtils.clickOnElement(fieldObjects,
											testCase, "GlobalDrawerButton");
								}
							}

						}

					}
				}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Exception : toggleGeofence :" + e.getMessage());
			flag = false;
		}

		return flag;
	}

	public static boolean navigateToGeofenceCentre(TestCases testCase) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "GlobalDrawer");
		try {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase,
					"GlobalDrawerButton", false)) {
				if (MobileUtils.clickOnElement(fieldObjects, testCase,
						"GlobalDrawerButton")) {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase,
							"LocationDetails", false)) {
						if (MobileUtils.clickOnElement(fieldObjects, testCase,
								"LocationDetails")) {
							fieldObjects = MobileUtils.loadObjectFile(testCase,
									"LocationDetails");
							if (MobileUtils.isMobElementExists(fieldObjects,
									testCase, "GeofenceCentre", false)) {
								if (MobileUtils.clickOnElement(fieldObjects,
										testCase, "GeofenceCentre")) {
									Keyword.ReportStep_Pass(testCase,
											"Successfully navigated to Geofence Centre page");

								}

							}

						}

					}
				}

			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Exception : navigateToGeofenceCentre :" + e.getMessage());
			flag = false;
		}
		return flag;
	}

	/*
	 * public static boolean updateAndSaveGeofenceCentre(TestCases testCase,
	 * TestCaseInputs inputs) { boolean flag = true;
	 * 
	 * HashMap<String, MobileObject> fieldObjects =
	 * MobileUtils.loadObjectFile(testCase, "GeofenceCentre"); try { if
	 * (!inputs.isRealDevice()) { Location location = new Location(Latitude,
	 * Longitude, Altitude); testCase.getMobileDriver().setLocation(location); }
	 * else { ChapiUtil chUtil = new ChapiUtil(inputs); try { if
	 * (chUtil.getConnection()) {
	 * 
	 * long locationid =
	 * chUtil.getLocationID(inputs.getInputValue("LOCATION1_NAME")); int
	 * response = chUtil.setGeolocation(String.valueOf(locationid), Latitude,
	 * Longitude, 100);
	 * 
	 * if (HttpURLConnection.HTTP_OK == response) {
	 * Keyword.ReportStep_Pass(testCase,
	 * "Set User Away from Home [CHAPI] : Location of User Set to  - Location Longitude : "
	 * + Longitude + ", Location Latitude : " + Latitude); } else { flag =
	 * false; Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
	 * FailType.FUNCTIONAL_FAILURE,
	 * "Set User Away from Home [CHAPI] : Unable to change the center of location. Response Code - "
	 * + response); }
	 * 
	 * } else { flag = false;
	 * Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
	 * FailType.FUNCTIONAL_FAILURE,
	 * "Set User Away : Unable to connect to CHAPI."); }
	 * 
	 * } catch (Exception e) { flag = false;
	 * Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
	 * FailType.FUNCTIONAL_FAILURE,
	 * "Set User Away : Unable to update the Location - " +
	 * inputs.getInputValue("LOCATION1_NAME") + " : Error occured-" +
	 * e.getMessage()); } } // update device location if
	 * (MobileUtils.isMobElementExists(fieldObjects, testCase, "UpdateGeofence",
	 * false)) { if (MobileUtils.clickOnElement(fieldObjects, testCase,
	 * "UpdateGeofence")) { if (MobileUtils.isMobElementExists(fieldObjects,
	 * testCase, "Update", false)) { if
	 * (MobileUtils.clickOnElement(fieldObjects, testCase, "Update")) {
	 * 
	 * if (MobileUtils.isMobElementExists(fieldObjects, testCase, "SaveCenter",
	 * false)) { if (MobileUtils.clickOnElement(fieldObjects, testCase,
	 * "SaveCenter")) { fieldObjects = MobileUtils.loadObjectFile(testCase,
	 * "LocationDetails"); Keyword.ReportStep_Pass(testCase,
	 * "Successfully updated and saved the Geofence Centre page");
	 * 
	 * }
	 * 
	 * } } } }
	 * 
	 * }
	 * 
	 * } catch (Exception e) {
	 * 
	 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
	 * "Exception : updateAndSaveGeofenceCentre :" + e.getMessage()); flag =
	 * false; } // Navigate back to home screen if
	 * (testCase.getPlatform().toUpperCase().contains("IOS")) {
	 * testCase.getMobileDriver().findElement(By.id("Back")).click(); } else {
	 * fieldObjects = MobileUtils.loadObjectFile(testCase, "GlobalDrawer");
	 * MobileUtils.clickOnElement(fieldObjects, testCase, "GlobalDrawerButton");
	 * } return flag; }
	 */

	public static boolean selectLocation(TestCases testCase,
			String locationToBeSelected) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase,
				"LocationSpinner")) {
			WebElement element = MobileUtils.getMobElement(fieldObjects,
					testCase, "LocationSpinner");
			if (testCase.getPlatform().toUpperCase().contains("IOS")) {
				if (element.getAttribute("value").equals(locationToBeSelected)) {
					Keyword.ReportStep_Pass(testCase,
							"Select Location From DashBoard : User is already in location : "
									+ locationToBeSelected);
				} else {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "LocationSpinner");

					if (MobileUtils.clickOnElement(testCase, "name",
							locationToBeSelected)) {
						Keyword.ReportStep_Pass(testCase,
								"Select Location From DashBoard : Successfully selected location : "
										+ locationToBeSelected);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Select Location From DashBoard : Failed to select location : "
										+ locationToBeSelected);
					}
				}
			} else {
				if (element.getText().equalsIgnoreCase(locationToBeSelected)) {
					Keyword.ReportStep_Pass(testCase,
							"Select Location From DashBoard : User is already in location : "
									+ locationToBeSelected);
				} else {
					boolean f = false;
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "LocationSpinner");
					List<WebElement> locNames = MobileUtils.getMobElements(
							fieldObjects, testCase, "LocationDropDown");
					for (WebElement ele : locNames) {
						if (ele.getText()
								.equalsIgnoreCase(locationToBeSelected)) {
							ele.click();
							f = true;
							break;
						}
					}
					if (f) {
						Keyword.ReportStep_Pass(testCase,
								"Select Location From DashBoard : Successfully selected location : "
										+ locationToBeSelected);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase,
								FailType.FUNCTIONAL_FAILURE,
								"Select Location From DashBoard : Failed to select location : "
										+ locationToBeSelected);
					}
				}
			}
		}
		return flag;
	}

	public static boolean setAppEnvironment(TestCases testCase,
			TestCaseInputs inputs, boolean enableGeoFenceFlag) {
		boolean flag = true;
		String environmentToSelect = inputs
				.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
		HashMap<String, MobileObject> fieldObjects = MobileUtils
				.loadObjectFile(testCase, "HomeScreen");
		String ExecutionLocation = inputs
				.getInputValue(TestCaseInputs.EXEC_LOCATION);
		WebElement lyricLogo = MobileUtils.getMobElement(fieldObjects,
				testCase, "LyricLogo");
		flag = (lyricLogo == null) ? false : true;

		AppiumDriver<MobileElement> driver = testCase.getMobileDriver();
		TouchAction action = new TouchAction(driver);
		if (testCase.getPlatform().toUpperCase().contains("IOS")) {
			WebElement elem = MobileUtils.getMobElement(fieldObjects, testCase,
					"HoneywellImage");
			try {
				action.press(elem).waitAction(5000).release().perform();
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[Set App Environment ] : Failed to open secret menu");
			}
		} else {
			try {
				WebElement elem = MobileUtils.getMobElement(fieldObjects,
						testCase, "HoneywellRosette");
				if (inputs.isRunningOn("TestObject")) {
					action.press(elem).waitAction(8000).release().perform();
				} else if (inputs.isRunningOn("Perfecto")) {
					action.longPress(elem, 8000).waitAction().release()
							.waitAction().perform();
				} else {
					action.press(elem).waitAction(8000).release().perform();
				}
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set App Environment : Failed to open secret. Error Message : "
								+ e.getMessage());
				return flag;
			}
		}

		// ============= Setting the Application environment ===================
		switch (testCase.getPlatform()) {
		case Mobile.IOS_Extra_LARGE:
		case Mobile.IOS_LARGE:
		case Mobile.IOS_MEDIUM: {
			try {
				if (MobileUtils.isMobElementExists("xpath",
						"//XCUIElementTypeTextField[contains(@value,'https')]",
						testCase, 5, false)) {
					System.out.println("test 1");

					flag = flag
							& MobileUtils
									.clickOnElement(testCase, "xpath",
											"//XCUIElementTypeTextField[contains(@value,'https')]");
					flag = flag
							& MobileUtils.clickOnElement(testCase, "name",
									"Return");
				}
				if (environmentToSelect.equals("Chil Das(QA)")) {
					System.out.println("test 2");

					flag = flag
							& MobileUtils.clickOnElement(testCase, "name",
									"Chil Das(QA)");
				} else if (environmentToSelect.equals("CHIL Int (Azure)")) {
					System.out.println("test 3");

					flag = flag
							& MobileUtils.clickOnElement(testCase, "name",
									"Camera DEV - CHIL INT");
				} else if (environmentToSelect.equals("Chil Das(Test)")) {
					System.out.println("test 4");
					flag = flag
							& MobileUtils.clickOnElement(testCase, "name",
									"Chil Das(Test)");
				}
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name", "Done");
			} catch (Exception e) {
				Keyword.ReportStep_Fail(
						testCase,
						FailType.FUNCTIONAL_FAILURE,
						"[Set App Environment ] :  Error Occured - "
								+ e.getMessage());
				flag = false;
			} finally {
				if (!flag) {
					testCase.getMobileDriver().closeApp();
					testCase.getMobileDriver().quit();
					testCase.setMobileDriver(null);
				}
			}
		}
			break;
		case Mobile.ANDROID_Extra_LARGE:
		case Mobile.ANDROID_LARGE:
		case Mobile.ANDROID_MEDIUM: {
			try {

				if (MobileUtils.isMobElementExists(fieldObjects, testCase,
						"WebServerURL")) {
					flag = MobileUtils.clickOnElement(fieldObjects, testCase,
							"WebServerURL");
					Thread.sleep(1000);
				}
				String xpath = "//*[@text='" + environmentToSelect + "']";

				if (MobileUtils.clickOnElement(testCase, "XPATH", xpath)) {
					Keyword.ReportStep_Pass(testCase,
							"[Set App Environment ] :  App environment set to "
									+ environmentToSelect);
				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
							FailType.FRAMEWORK_CONFIGURATION,
							"[Set App Environment ] : Not able to Select the required environment - "
									+ environmentToSelect);
					flag = false;
				}
				if (!MobileUtils
						.getMobElement(testCase, "id", "url_selection_header")
						.getAttribute("text")
						.equalsIgnoreCase(environmentToSelect)) {
					flag = flag
							& MobileUtils.clickOnElement(fieldObjects,
									testCase, "WebServerURL");
					Thread.sleep(1000);
					flag = flag
							& MobileUtils.clickOnElement(testCase, "XPATH",
									xpath);
				}

				if (MobileUtils.pressBackButton(testCase)) {
					Keyword.ReportStep_Pass(testCase,
							"[Set App Environment ] : Navigating back to Login screen");
				} else {
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"[Set App Environment ] : Navigating back to Login screen failed");
					flag = false;
				}
				break;
			} catch (Exception e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[Set App Environment ] : [Set App Environment ] : Error occured - "
								+ e.getMessage());
				flag = false;
			} finally {
				if (!flag) {
					testCase.getMobileDriver().closeApp();
					testCase.getMobileDriver().quit();
					testCase.setMobileDriver(null);
				}
			}
		}
		}

		if (environmentToSelect.equalsIgnoreCase("Production")
				&& (ExecutionLocation.equalsIgnoreCase("Perfecto") || ExecutionLocation
						.equalsIgnoreCase("Saucelabs"))) {
			flag = flag & true;
		} else {
			lyricLogo = MobileUtils.getMobElement(fieldObjects, testCase,
					"LyricLogo");
			flag = flag & (lyricLogo == null) ? false : true;
		}
		return flag;
	}

	public static boolean selectDeviceToInstall(TestCases testCase,
			String deviceToInstall) {
		boolean flag = true;
		String xpath;
		if (testCase.getPlatform().toUpperCase().contains("ANDROID")) {
			xpath = "//android.widget.TextView[@text='" + deviceToInstall
					+ "']";
			if (MobileUtils.isMobElementExists("xpath", xpath, testCase, 3)) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "xpath", xpath);
			} else {
				// testCase.getMobileDriver().scrollTo(deviceToInstall);
				Dimension d1 = MobileUtils.getMobElement(testCase, "id",
						"fragment_add_new_device_list").getSize();
				int startx = (int) (d1.width * 0.70);
				int starty = (int) (d1.height * 0.80);
				int endy = (int) (d1.height * 0.20);
				testCase.getMobileDriver().swipe(startx, starty, startx, endy,
						3000);
				if (MobileUtils.isMobElementExists("xpath", xpath, testCase, 3)) {
					flag = flag
							& MobileUtils.clickOnElement(testCase, "xpath",
									xpath);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Could not find device : " + deviceToInstall);
				}
			}
		} else {
			String locatorValue;
			if (deviceToInstall.equals("Honeywell DAS")) {
				locatorValue = "Lyric DAS";
			} else {
				locatorValue = deviceToInstall;
			}
			if (MobileUtils.isMobElementExists("name", locatorValue, testCase,
					3)) {
				flag = flag
						& MobileUtils.clickOnElement(testCase, "name",
								locatorValue);
			} else {
				Dimension d1 = MobileUtils.getMobElement(testCase, "xpath",
						"//XCUIElementTypeTable").getSize();
				int startx = (int) (d1.width * 0.70);
				int starty = (int) (d1.height * 0.80);
				int endy = (int) (d1.height * 0.20);
				testCase.getMobileDriver().swipe(startx, starty, startx, endy,
						3000);
				if (MobileUtils.isMobElementExists("name", locatorValue,
						testCase, 3)) {
					flag = flag
							& MobileUtils.clickOnElement(testCase, "name",
									locatorValue);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase,
							FailType.FUNCTIONAL_FAILURE,
							"Could not find device : " + locatorValue);
				}

			}
		}
		return flag;
	}

	public static String takeScreenShot(String path, WebDriver driv) {

		String scrName = "#";

		if (driv == null) {
			return scrName;
		} else {
			try {
				File scrSht = ((TakesScreenshot) new Augmenter()
						.augment((RemoteWebDriver) driv))
						.getScreenshotAs(OutputType.FILE);
				String temp = scrSht.getName();

				File scrFolder = new File(path);

				FileUtils.copyFileToDirectory(scrSht, scrFolder);
				scrName = temp;
			} catch (Exception e) {
				scrName = scrName + "Error : " + e.getCause();
			}
		}
		return scrName;
	}
}